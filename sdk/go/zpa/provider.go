// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// The provider type for the zpa package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// zpa client id
	ZpaClientId pulumi.StringPtrOutput `pulumi:"zpaClientId"`
	// zpa client secret
	ZpaClientSecret pulumi.StringPtrOutput `pulumi:"zpaClientSecret"`
	// Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
	ZpaCloud pulumi.StringPtrOutput `pulumi:"zpaCloud"`
	// zpa customer id
	ZpaCustomerId pulumi.StringPtrOutput `pulumi:"zpaCustomerId"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.ZpaClientId == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLIENT_ID"); d != nil {
			args.ZpaClientId = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZpaClientSecret == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLIENT_SECRET"); d != nil {
			args.ZpaClientSecret = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZpaCloud == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLOUD"); d != nil {
			args.ZpaCloud = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZpaCustomerId == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CUSTOMER_ID"); d != nil {
			args.ZpaCustomerId = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZpaClientSecret != nil {
		args.ZpaClientSecret = pulumi.ToSecret(args.ZpaClientSecret).(pulumi.StringPtrInput)
	}
	if args.ZpaCustomerId != nil {
		args.ZpaCustomerId = pulumi.ToSecret(args.ZpaCustomerId).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"zpaClientSecret",
		"zpaCustomerId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:zpa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// zpa client id
	ZpaClientId *string `pulumi:"zpaClientId"`
	// zpa client secret
	ZpaClientSecret *string `pulumi:"zpaClientSecret"`
	// Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
	ZpaCloud *string `pulumi:"zpaCloud"`
	// zpa customer id
	ZpaCustomerId *string `pulumi:"zpaCustomerId"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// zpa client id
	ZpaClientId pulumi.StringPtrInput
	// zpa client secret
	ZpaClientSecret pulumi.StringPtrInput
	// Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
	ZpaCloud pulumi.StringPtrInput
	// zpa customer id
	ZpaCustomerId pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// zpa client id
func (o ProviderOutput) ZpaClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZpaClientId }).(pulumi.StringPtrOutput)
}

// zpa client secret
func (o ProviderOutput) ZpaClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZpaClientSecret }).(pulumi.StringPtrOutput)
}

// Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
func (o ProviderOutput) ZpaCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZpaCloud }).(pulumi.StringPtrOutput)
}

// zpa customer id
func (o ProviderOutput) ZpaCustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZpaCustomerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
