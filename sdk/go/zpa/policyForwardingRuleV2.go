// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-client-forwarding-policy)
// * [API documentation](https://help.zscaler.com/zpa/configuring-client-forwarding-policies-using-api)
//
// The **zpa_policy_forwarding_rule_v2** resource creates and manages policy access forwarding rule in the Zscaler Private Access cloud using a new v2 API endpoint.
//
//	⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.
//
//	⚠️ **WARNING:**: The attribute ``ruleOrder`` is now deprecated in favor of the new resource  ``policyAccessRuleReorder``
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisIdPController, err := zpa.GetIdPController(ctx, &zpa.GetIdPControllerArgs{
//				Name: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			emailUserSso, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("Email_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			groupUser, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("GroupName_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			a000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("A000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			b000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("B000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Segment Group
//			thisSegmentGroup, err := zpa.NewSegmentGroup(ctx, "thisSegmentGroup", &zpa.SegmentGroupArgs{
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Create Policy Access Rule V2
//			_, err = zpa.NewPolicyAccessForwardingRuleV2(ctx, "thisPolicyAccessForwardingRuleV2", &zpa.PolicyAccessForwardingRuleV2Args{
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("BYPASS"),
//				Conditions: zpa.PolicyAccessForwardingRuleV2ConditionArray{
//					&zpa.PolicyAccessForwardingRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessForwardingRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessForwardingRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("APP_GROUP"),
//								Values: pulumi.StringArray{
//									thisSegmentGroup.ID(),
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessForwardingRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessForwardingRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessForwardingRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("SAML"),
//								EntryValues: zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("user1@acme.com"),
//										Lhs: pulumi.String(emailUserSso.Id),
//									},
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("A000"),
//										Lhs: pulumi.String(groupUser.Id),
//									},
//								},
//							},
//							&zpa.PolicyAccessForwardingRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("SCIM_GROUP"),
//								EntryValues: zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(a000.Id),
//										Lhs: pulumi.String(thisIdPController.Id),
//									},
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(b000.Id),
//										Lhs: pulumi.String(thisIdPController.Id),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessForwardingRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessForwardingRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessForwardingRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("PLATFORM"),
//								EntryValues: zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("true"),
//										Lhs: pulumi.String("linux"),
//									},
//									&zpa.PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("true"),
//										Lhs: pulumi.String("android"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## LHS and RHS Values
//
// | Object Type | LHS| RHS| VALUES
// |----------|-----------|----------|----------
// | APP  |   |  | “applicationSegmentId“ |
// | APP_GROUP  |   |  | “segmentGroupId“|
// | CLIENT_TYPE  |   |  |  “zpnClientTypeZappl“, “zpnClientTypeExporter“, “zpnClientTypeBrowserIsolation“, “zpnClientTypeIpAnchoring“, “zpnClientTypeEdgeConnector“, “zpnClientTypeBranchConnector“,  “zpnClientTypeZappPartner“, “zpnClientTypeZapp“  |
// | SAML | “samlAttributeId“  | “attributeValueToMatch“ |
// | SCIM | “scimAttributeId“  | “attributeValueToMatch“  |
// | SCIM_GROUP | “scimGroupAttributeId“  | “attributeValueToMatch“  |
// | PLATFORM | “mac“, “ios“, “windows“, “android“, “linux“ | “"true"“ / “"false"“ |
// | POSTURE | “postureUdid“  | “"true"“ / “"false"“ |
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// Policy access timeout rule can be imported by using `<RULE ID>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/policyForwardingRuleV2:PolicyForwardingRuleV2 example <rule_id>
// ```
//
// Deprecated: zpa.index/policyforwardingrulev2.PolicyForwardingRuleV2 has been deprecated in favor of zpa.index/policyaccessforwardingrulev2.PolicyAccessForwardingRuleV2
type PolicyForwardingRuleV2 struct {
	pulumi.CustomResourceState

	// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyForwardingRuleV2ConditionArrayOutput `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	MicrotenantId pulumi.StringOutput    `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name        pulumi.StringOutput `pulumi:"name"`
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
}

// NewPolicyForwardingRuleV2 registers a new resource with the given unique name, arguments, and options.
func NewPolicyForwardingRuleV2(ctx *pulumi.Context,
	name string, args *PolicyForwardingRuleV2Args, opts ...pulumi.ResourceOption) (*PolicyForwardingRuleV2, error) {
	if args == nil {
		args = &PolicyForwardingRuleV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyForwardingRuleV2
	err := ctx.RegisterResource("zpa:index/policyForwardingRuleV2:PolicyForwardingRuleV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyForwardingRuleV2 gets an existing PolicyForwardingRuleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyForwardingRuleV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyForwardingRuleV2State, opts ...pulumi.ResourceOption) (*PolicyForwardingRuleV2, error) {
	var resource PolicyForwardingRuleV2
	err := ctx.ReadResource("zpa:index/policyForwardingRuleV2:PolicyForwardingRuleV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyForwardingRuleV2 resources.
type policyForwardingRuleV2State struct {
	// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyForwardingRuleV2Condition `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name        *string `pulumi:"name"`
	PolicySetId *string `pulumi:"policySetId"`
}

type PolicyForwardingRuleV2State struct {
	// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyForwardingRuleV2ConditionArrayInput
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name        pulumi.StringPtrInput
	PolicySetId pulumi.StringPtrInput
}

func (PolicyForwardingRuleV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*policyForwardingRuleV2State)(nil)).Elem()
}

type policyForwardingRuleV2Args struct {
	// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyForwardingRuleV2Condition `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyForwardingRuleV2 resource.
type PolicyForwardingRuleV2Args struct {
	// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyForwardingRuleV2ConditionArrayInput
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name pulumi.StringPtrInput
}

func (PolicyForwardingRuleV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*policyForwardingRuleV2Args)(nil)).Elem()
}

type PolicyForwardingRuleV2Input interface {
	pulumi.Input

	ToPolicyForwardingRuleV2Output() PolicyForwardingRuleV2Output
	ToPolicyForwardingRuleV2OutputWithContext(ctx context.Context) PolicyForwardingRuleV2Output
}

func (*PolicyForwardingRuleV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyForwardingRuleV2)(nil)).Elem()
}

func (i *PolicyForwardingRuleV2) ToPolicyForwardingRuleV2Output() PolicyForwardingRuleV2Output {
	return i.ToPolicyForwardingRuleV2OutputWithContext(context.Background())
}

func (i *PolicyForwardingRuleV2) ToPolicyForwardingRuleV2OutputWithContext(ctx context.Context) PolicyForwardingRuleV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyForwardingRuleV2Output)
}

// PolicyForwardingRuleV2ArrayInput is an input type that accepts PolicyForwardingRuleV2Array and PolicyForwardingRuleV2ArrayOutput values.
// You can construct a concrete instance of `PolicyForwardingRuleV2ArrayInput` via:
//
//	PolicyForwardingRuleV2Array{ PolicyForwardingRuleV2Args{...} }
type PolicyForwardingRuleV2ArrayInput interface {
	pulumi.Input

	ToPolicyForwardingRuleV2ArrayOutput() PolicyForwardingRuleV2ArrayOutput
	ToPolicyForwardingRuleV2ArrayOutputWithContext(context.Context) PolicyForwardingRuleV2ArrayOutput
}

type PolicyForwardingRuleV2Array []PolicyForwardingRuleV2Input

func (PolicyForwardingRuleV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyForwardingRuleV2)(nil)).Elem()
}

func (i PolicyForwardingRuleV2Array) ToPolicyForwardingRuleV2ArrayOutput() PolicyForwardingRuleV2ArrayOutput {
	return i.ToPolicyForwardingRuleV2ArrayOutputWithContext(context.Background())
}

func (i PolicyForwardingRuleV2Array) ToPolicyForwardingRuleV2ArrayOutputWithContext(ctx context.Context) PolicyForwardingRuleV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyForwardingRuleV2ArrayOutput)
}

// PolicyForwardingRuleV2MapInput is an input type that accepts PolicyForwardingRuleV2Map and PolicyForwardingRuleV2MapOutput values.
// You can construct a concrete instance of `PolicyForwardingRuleV2MapInput` via:
//
//	PolicyForwardingRuleV2Map{ "key": PolicyForwardingRuleV2Args{...} }
type PolicyForwardingRuleV2MapInput interface {
	pulumi.Input

	ToPolicyForwardingRuleV2MapOutput() PolicyForwardingRuleV2MapOutput
	ToPolicyForwardingRuleV2MapOutputWithContext(context.Context) PolicyForwardingRuleV2MapOutput
}

type PolicyForwardingRuleV2Map map[string]PolicyForwardingRuleV2Input

func (PolicyForwardingRuleV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyForwardingRuleV2)(nil)).Elem()
}

func (i PolicyForwardingRuleV2Map) ToPolicyForwardingRuleV2MapOutput() PolicyForwardingRuleV2MapOutput {
	return i.ToPolicyForwardingRuleV2MapOutputWithContext(context.Background())
}

func (i PolicyForwardingRuleV2Map) ToPolicyForwardingRuleV2MapOutputWithContext(ctx context.Context) PolicyForwardingRuleV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyForwardingRuleV2MapOutput)
}

type PolicyForwardingRuleV2Output struct{ *pulumi.OutputState }

func (PolicyForwardingRuleV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyForwardingRuleV2)(nil)).Elem()
}

func (o PolicyForwardingRuleV2Output) ToPolicyForwardingRuleV2Output() PolicyForwardingRuleV2Output {
	return o
}

func (o PolicyForwardingRuleV2Output) ToPolicyForwardingRuleV2OutputWithContext(ctx context.Context) PolicyForwardingRuleV2Output {
	return o
}

// This is for providing the rule action. Supported values: `BYPASS`, `INTERCEPT`, and `INTERCEPT_ACCESSIBLE`
func (o PolicyForwardingRuleV2Output) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// This is for proviidng the set of conditions for the policy.
func (o PolicyForwardingRuleV2Output) Conditions() PolicyForwardingRuleV2ConditionArrayOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) PolicyForwardingRuleV2ConditionArrayOutput { return v.Conditions }).(PolicyForwardingRuleV2ConditionArrayOutput)
}

// This is the description of the access policy rule.
func (o PolicyForwardingRuleV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PolicyForwardingRuleV2Output) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// This is the name of the policy rule.
func (o PolicyForwardingRuleV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyForwardingRuleV2Output) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyForwardingRuleV2) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

type PolicyForwardingRuleV2ArrayOutput struct{ *pulumi.OutputState }

func (PolicyForwardingRuleV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyForwardingRuleV2)(nil)).Elem()
}

func (o PolicyForwardingRuleV2ArrayOutput) ToPolicyForwardingRuleV2ArrayOutput() PolicyForwardingRuleV2ArrayOutput {
	return o
}

func (o PolicyForwardingRuleV2ArrayOutput) ToPolicyForwardingRuleV2ArrayOutputWithContext(ctx context.Context) PolicyForwardingRuleV2ArrayOutput {
	return o
}

func (o PolicyForwardingRuleV2ArrayOutput) Index(i pulumi.IntInput) PolicyForwardingRuleV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyForwardingRuleV2 {
		return vs[0].([]*PolicyForwardingRuleV2)[vs[1].(int)]
	}).(PolicyForwardingRuleV2Output)
}

type PolicyForwardingRuleV2MapOutput struct{ *pulumi.OutputState }

func (PolicyForwardingRuleV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyForwardingRuleV2)(nil)).Elem()
}

func (o PolicyForwardingRuleV2MapOutput) ToPolicyForwardingRuleV2MapOutput() PolicyForwardingRuleV2MapOutput {
	return o
}

func (o PolicyForwardingRuleV2MapOutput) ToPolicyForwardingRuleV2MapOutputWithContext(ctx context.Context) PolicyForwardingRuleV2MapOutput {
	return o
}

func (o PolicyForwardingRuleV2MapOutput) MapIndex(k pulumi.StringInput) PolicyForwardingRuleV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyForwardingRuleV2 {
		return vs[0].(map[string]*PolicyForwardingRuleV2)[vs[1].(string)]
	}).(PolicyForwardingRuleV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyForwardingRuleV2Input)(nil)).Elem(), &PolicyForwardingRuleV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyForwardingRuleV2ArrayInput)(nil)).Elem(), PolicyForwardingRuleV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyForwardingRuleV2MapInput)(nil)).Elem(), PolicyForwardingRuleV2Map{})
	pulumi.RegisterOutputType(PolicyForwardingRuleV2Output{})
	pulumi.RegisterOutputType(PolicyForwardingRuleV2ArrayOutput{})
	pulumi.RegisterOutputType(PolicyForwardingRuleV2MapOutput{})
}
