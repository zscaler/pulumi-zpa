// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-microtenants)
// * [API documentation](https://help.zscaler.com/zpa/configuring-microtenants-using-api)
//
// The **zpa_microtenant_controller** resource creates a microtenant controller in the Zscaler Private Access cloud. This resource allows organizations to delegate responsibilities of admins directly to the acquired or merged company admins so that they can manage their configurations independently
//
// ⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// // ZPA Microtenant Controller resource
// this, err := zpa.NewMicrotenant(ctx, "this", &zpa.MicrotenantArgs{
// Description: pulumi.String("Microtenant_A"),
// Enabled: pulumi.Bool(true),
// CriteriaAttribute: pulumi.String("AuthDomain"),
// CriteriaAttributeValues: pulumi.StringArray{
// pulumi.String("acme.com"),
// },
// })
// if err != nil {
// return err
// }
// ctx.Export("zpaMicrotenantController1", this.Users.ApplyT(func(users []zpa.MicrotenantUser) ([]map[string]interface{}, error) {
// return "TODO: For expression", nil
// }).(pulumi.[]map[string]interface{}Output))
// return nil
// })
// }
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **microtenant_controller** can be imported by using `<MICROTENANT ID>` or `<MICROTENANT NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/microtenant:Microtenant example <microtenant_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/microtenant:Microtenant example <microtenant_name>
// ```
type Microtenant struct {
	pulumi.CustomResourceState

	// - (Required) Type of authentication criteria for the microtenant
	CriteriaAttribute pulumi.StringPtrOutput `pulumi:"criteriaAttribute"`
	// - (Required) The domain associated with the respective microtenant controller resource
	CriteriaAttributeValues pulumi.StringArrayOutput `pulumi:"criteriaAttributeValues"`
	Description             pulumi.StringPtrOutput   `pulumi:"description"`
	Enabled                 pulumi.BoolOutput        `pulumi:"enabled"`
	// - (Required) Name of the microtenant controller.
	Name  pulumi.StringOutput        `pulumi:"name"`
	Users MicrotenantUserArrayOutput `pulumi:"users"`
}

// NewMicrotenant registers a new resource with the given unique name, arguments, and options.
func NewMicrotenant(ctx *pulumi.Context,
	name string, args *MicrotenantArgs, opts ...pulumi.ResourceOption) (*Microtenant, error) {
	if args == nil {
		args = &MicrotenantArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Microtenant
	err := ctx.RegisterResource("zpa:index/microtenant:Microtenant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMicrotenant gets an existing Microtenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMicrotenant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MicrotenantState, opts ...pulumi.ResourceOption) (*Microtenant, error) {
	var resource Microtenant
	err := ctx.ReadResource("zpa:index/microtenant:Microtenant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Microtenant resources.
type microtenantState struct {
	// - (Required) Type of authentication criteria for the microtenant
	CriteriaAttribute *string `pulumi:"criteriaAttribute"`
	// - (Required) The domain associated with the respective microtenant controller resource
	CriteriaAttributeValues []string `pulumi:"criteriaAttributeValues"`
	Description             *string  `pulumi:"description"`
	Enabled                 *bool    `pulumi:"enabled"`
	// - (Required) Name of the microtenant controller.
	Name  *string           `pulumi:"name"`
	Users []MicrotenantUser `pulumi:"users"`
}

type MicrotenantState struct {
	// - (Required) Type of authentication criteria for the microtenant
	CriteriaAttribute pulumi.StringPtrInput
	// - (Required) The domain associated with the respective microtenant controller resource
	CriteriaAttributeValues pulumi.StringArrayInput
	Description             pulumi.StringPtrInput
	Enabled                 pulumi.BoolPtrInput
	// - (Required) Name of the microtenant controller.
	Name  pulumi.StringPtrInput
	Users MicrotenantUserArrayInput
}

func (MicrotenantState) ElementType() reflect.Type {
	return reflect.TypeOf((*microtenantState)(nil)).Elem()
}

type microtenantArgs struct {
	// - (Required) Type of authentication criteria for the microtenant
	CriteriaAttribute *string `pulumi:"criteriaAttribute"`
	// - (Required) The domain associated with the respective microtenant controller resource
	CriteriaAttributeValues []string `pulumi:"criteriaAttributeValues"`
	Description             *string  `pulumi:"description"`
	Enabled                 *bool    `pulumi:"enabled"`
	// - (Required) Name of the microtenant controller.
	Name  *string           `pulumi:"name"`
	Users []MicrotenantUser `pulumi:"users"`
}

// The set of arguments for constructing a Microtenant resource.
type MicrotenantArgs struct {
	// - (Required) Type of authentication criteria for the microtenant
	CriteriaAttribute pulumi.StringPtrInput
	// - (Required) The domain associated with the respective microtenant controller resource
	CriteriaAttributeValues pulumi.StringArrayInput
	Description             pulumi.StringPtrInput
	Enabled                 pulumi.BoolPtrInput
	// - (Required) Name of the microtenant controller.
	Name  pulumi.StringPtrInput
	Users MicrotenantUserArrayInput
}

func (MicrotenantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*microtenantArgs)(nil)).Elem()
}

type MicrotenantInput interface {
	pulumi.Input

	ToMicrotenantOutput() MicrotenantOutput
	ToMicrotenantOutputWithContext(ctx context.Context) MicrotenantOutput
}

func (*Microtenant) ElementType() reflect.Type {
	return reflect.TypeOf((**Microtenant)(nil)).Elem()
}

func (i *Microtenant) ToMicrotenantOutput() MicrotenantOutput {
	return i.ToMicrotenantOutputWithContext(context.Background())
}

func (i *Microtenant) ToMicrotenantOutputWithContext(ctx context.Context) MicrotenantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrotenantOutput)
}

// MicrotenantArrayInput is an input type that accepts MicrotenantArray and MicrotenantArrayOutput values.
// You can construct a concrete instance of `MicrotenantArrayInput` via:
//
//	MicrotenantArray{ MicrotenantArgs{...} }
type MicrotenantArrayInput interface {
	pulumi.Input

	ToMicrotenantArrayOutput() MicrotenantArrayOutput
	ToMicrotenantArrayOutputWithContext(context.Context) MicrotenantArrayOutput
}

type MicrotenantArray []MicrotenantInput

func (MicrotenantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Microtenant)(nil)).Elem()
}

func (i MicrotenantArray) ToMicrotenantArrayOutput() MicrotenantArrayOutput {
	return i.ToMicrotenantArrayOutputWithContext(context.Background())
}

func (i MicrotenantArray) ToMicrotenantArrayOutputWithContext(ctx context.Context) MicrotenantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrotenantArrayOutput)
}

// MicrotenantMapInput is an input type that accepts MicrotenantMap and MicrotenantMapOutput values.
// You can construct a concrete instance of `MicrotenantMapInput` via:
//
//	MicrotenantMap{ "key": MicrotenantArgs{...} }
type MicrotenantMapInput interface {
	pulumi.Input

	ToMicrotenantMapOutput() MicrotenantMapOutput
	ToMicrotenantMapOutputWithContext(context.Context) MicrotenantMapOutput
}

type MicrotenantMap map[string]MicrotenantInput

func (MicrotenantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Microtenant)(nil)).Elem()
}

func (i MicrotenantMap) ToMicrotenantMapOutput() MicrotenantMapOutput {
	return i.ToMicrotenantMapOutputWithContext(context.Background())
}

func (i MicrotenantMap) ToMicrotenantMapOutputWithContext(ctx context.Context) MicrotenantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrotenantMapOutput)
}

type MicrotenantOutput struct{ *pulumi.OutputState }

func (MicrotenantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Microtenant)(nil)).Elem()
}

func (o MicrotenantOutput) ToMicrotenantOutput() MicrotenantOutput {
	return o
}

func (o MicrotenantOutput) ToMicrotenantOutputWithContext(ctx context.Context) MicrotenantOutput {
	return o
}

// - (Required) Type of authentication criteria for the microtenant
func (o MicrotenantOutput) CriteriaAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microtenant) pulumi.StringPtrOutput { return v.CriteriaAttribute }).(pulumi.StringPtrOutput)
}

// - (Required) The domain associated with the respective microtenant controller resource
func (o MicrotenantOutput) CriteriaAttributeValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Microtenant) pulumi.StringArrayOutput { return v.CriteriaAttributeValues }).(pulumi.StringArrayOutput)
}

func (o MicrotenantOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Microtenant) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MicrotenantOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Microtenant) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// - (Required) Name of the microtenant controller.
func (o MicrotenantOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Microtenant) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MicrotenantOutput) Users() MicrotenantUserArrayOutput {
	return o.ApplyT(func(v *Microtenant) MicrotenantUserArrayOutput { return v.Users }).(MicrotenantUserArrayOutput)
}

type MicrotenantArrayOutput struct{ *pulumi.OutputState }

func (MicrotenantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Microtenant)(nil)).Elem()
}

func (o MicrotenantArrayOutput) ToMicrotenantArrayOutput() MicrotenantArrayOutput {
	return o
}

func (o MicrotenantArrayOutput) ToMicrotenantArrayOutputWithContext(ctx context.Context) MicrotenantArrayOutput {
	return o
}

func (o MicrotenantArrayOutput) Index(i pulumi.IntInput) MicrotenantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Microtenant {
		return vs[0].([]*Microtenant)[vs[1].(int)]
	}).(MicrotenantOutput)
}

type MicrotenantMapOutput struct{ *pulumi.OutputState }

func (MicrotenantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Microtenant)(nil)).Elem()
}

func (o MicrotenantMapOutput) ToMicrotenantMapOutput() MicrotenantMapOutput {
	return o
}

func (o MicrotenantMapOutput) ToMicrotenantMapOutputWithContext(ctx context.Context) MicrotenantMapOutput {
	return o
}

func (o MicrotenantMapOutput) MapIndex(k pulumi.StringInput) MicrotenantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Microtenant {
		return vs[0].(map[string]*Microtenant)[vs[1].(string)]
	}).(MicrotenantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MicrotenantInput)(nil)).Elem(), &Microtenant{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrotenantArrayInput)(nil)).Elem(), MicrotenantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MicrotenantMapInput)(nil)).Elem(), MicrotenantMap{})
	pulumi.RegisterOutputType(MicrotenantOutput{})
	pulumi.RegisterOutputType(MicrotenantArrayOutput{})
	pulumi.RegisterOutputType(MicrotenantMapOutput{})
}
