// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credential-pools)
// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
//
// The **zpa_pra_credential_pool** resource creates a privileged remote access credential pool in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisPRACredential, err := zpa.NewPRACredential(ctx, "thisPRACredential", &zpa.PRACredentialArgs{
//				Description:    pulumi.String("Created with Terraform"),
//				CredentialType: pulumi.String("PASSWORD"),
//				UserDomain:     pulumi.String("acme.com"),
//				Password:       pulumi.String(""),
//			})
//			if err != nil {
//				return err
//			}
//			// Creates Credential Pool of Type "USERNAME_PASSWORD"
//			_, err = zpa.NewPraCredentialPool(ctx, "thisPraCredentialPool", &zpa.PraCredentialPoolArgs{
//				CredentialType: pulumi.String("USERNAME_PASSWORD"),
//				Credentials: zpa.PraCredentialPoolCredentialArray{
//					&zpa.PraCredentialPoolCredentialArgs{
//						Ids: pulumi.StringArray{
//							thisPRACredential.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zpa_pra_credential_pool** can be imported by using `<POOL ID>` or `<POOL NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_name>
// ```
type PraCredentialPool struct {
	pulumi.CustomResourceState

	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrOutput `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials PraCredentialPoolCredentialArrayOutput `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPraCredentialPool registers a new resource with the given unique name, arguments, and options.
func NewPraCredentialPool(ctx *pulumi.Context,
	name string, args *PraCredentialPoolArgs, opts ...pulumi.ResourceOption) (*PraCredentialPool, error) {
	if args == nil {
		args = &PraCredentialPoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PraCredentialPool
	err := ctx.RegisterResource("zpa:index/praCredentialPool:PraCredentialPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPraCredentialPool gets an existing PraCredentialPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPraCredentialPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PraCredentialPoolState, opts ...pulumi.ResourceOption) (*PraCredentialPool, error) {
	var resource PraCredentialPool
	err := ctx.ReadResource("zpa:index/praCredentialPool:PraCredentialPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PraCredentialPool resources.
type praCredentialPoolState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials []PraCredentialPoolCredential `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
}

type PraCredentialPoolState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// List of PRA Credentials
	Credentials PraCredentialPoolCredentialArrayInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
}

func (PraCredentialPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*praCredentialPoolState)(nil)).Elem()
}

type praCredentialPoolArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials []PraCredentialPoolCredential `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PraCredentialPool resource.
type PraCredentialPoolArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// List of PRA Credentials
	Credentials PraCredentialPoolCredentialArrayInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
}

func (PraCredentialPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*praCredentialPoolArgs)(nil)).Elem()
}

type PraCredentialPoolInput interface {
	pulumi.Input

	ToPraCredentialPoolOutput() PraCredentialPoolOutput
	ToPraCredentialPoolOutputWithContext(ctx context.Context) PraCredentialPoolOutput
}

func (*PraCredentialPool) ElementType() reflect.Type {
	return reflect.TypeOf((**PraCredentialPool)(nil)).Elem()
}

func (i *PraCredentialPool) ToPraCredentialPoolOutput() PraCredentialPoolOutput {
	return i.ToPraCredentialPoolOutputWithContext(context.Background())
}

func (i *PraCredentialPool) ToPraCredentialPoolOutputWithContext(ctx context.Context) PraCredentialPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialPoolOutput)
}

// PraCredentialPoolArrayInput is an input type that accepts PraCredentialPoolArray and PraCredentialPoolArrayOutput values.
// You can construct a concrete instance of `PraCredentialPoolArrayInput` via:
//
//	PraCredentialPoolArray{ PraCredentialPoolArgs{...} }
type PraCredentialPoolArrayInput interface {
	pulumi.Input

	ToPraCredentialPoolArrayOutput() PraCredentialPoolArrayOutput
	ToPraCredentialPoolArrayOutputWithContext(context.Context) PraCredentialPoolArrayOutput
}

type PraCredentialPoolArray []PraCredentialPoolInput

func (PraCredentialPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraCredentialPool)(nil)).Elem()
}

func (i PraCredentialPoolArray) ToPraCredentialPoolArrayOutput() PraCredentialPoolArrayOutput {
	return i.ToPraCredentialPoolArrayOutputWithContext(context.Background())
}

func (i PraCredentialPoolArray) ToPraCredentialPoolArrayOutputWithContext(ctx context.Context) PraCredentialPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialPoolArrayOutput)
}

// PraCredentialPoolMapInput is an input type that accepts PraCredentialPoolMap and PraCredentialPoolMapOutput values.
// You can construct a concrete instance of `PraCredentialPoolMapInput` via:
//
//	PraCredentialPoolMap{ "key": PraCredentialPoolArgs{...} }
type PraCredentialPoolMapInput interface {
	pulumi.Input

	ToPraCredentialPoolMapOutput() PraCredentialPoolMapOutput
	ToPraCredentialPoolMapOutputWithContext(context.Context) PraCredentialPoolMapOutput
}

type PraCredentialPoolMap map[string]PraCredentialPoolInput

func (PraCredentialPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraCredentialPool)(nil)).Elem()
}

func (i PraCredentialPoolMap) ToPraCredentialPoolMapOutput() PraCredentialPoolMapOutput {
	return i.ToPraCredentialPoolMapOutputWithContext(context.Background())
}

func (i PraCredentialPoolMap) ToPraCredentialPoolMapOutputWithContext(ctx context.Context) PraCredentialPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialPoolMapOutput)
}

type PraCredentialPoolOutput struct{ *pulumi.OutputState }

func (PraCredentialPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PraCredentialPool)(nil)).Elem()
}

func (o PraCredentialPoolOutput) ToPraCredentialPoolOutput() PraCredentialPoolOutput {
	return o
}

func (o PraCredentialPoolOutput) ToPraCredentialPoolOutputWithContext(ctx context.Context) PraCredentialPoolOutput {
	return o
}

// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
// and VNC. Each protocol type has its own credential requirements.
func (o PraCredentialPoolOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialPool) pulumi.StringPtrOutput { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// List of PRA Credentials
func (o PraCredentialPoolOutput) Credentials() PraCredentialPoolCredentialArrayOutput {
	return o.ApplyT(func(v *PraCredentialPool) PraCredentialPoolCredentialArrayOutput { return v.Credentials }).(PraCredentialPoolCredentialArrayOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PraCredentialPoolOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PraCredentialPool) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the privileged credential
func (o PraCredentialPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PraCredentialPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PraCredentialPoolArrayOutput struct{ *pulumi.OutputState }

func (PraCredentialPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraCredentialPool)(nil)).Elem()
}

func (o PraCredentialPoolArrayOutput) ToPraCredentialPoolArrayOutput() PraCredentialPoolArrayOutput {
	return o
}

func (o PraCredentialPoolArrayOutput) ToPraCredentialPoolArrayOutputWithContext(ctx context.Context) PraCredentialPoolArrayOutput {
	return o
}

func (o PraCredentialPoolArrayOutput) Index(i pulumi.IntInput) PraCredentialPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PraCredentialPool {
		return vs[0].([]*PraCredentialPool)[vs[1].(int)]
	}).(PraCredentialPoolOutput)
}

type PraCredentialPoolMapOutput struct{ *pulumi.OutputState }

func (PraCredentialPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraCredentialPool)(nil)).Elem()
}

func (o PraCredentialPoolMapOutput) ToPraCredentialPoolMapOutput() PraCredentialPoolMapOutput {
	return o
}

func (o PraCredentialPoolMapOutput) ToPraCredentialPoolMapOutputWithContext(ctx context.Context) PraCredentialPoolMapOutput {
	return o
}

func (o PraCredentialPoolMapOutput) MapIndex(k pulumi.StringInput) PraCredentialPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PraCredentialPool {
		return vs[0].(map[string]*PraCredentialPool)[vs[1].(string)]
	}).(PraCredentialPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialPoolInput)(nil)).Elem(), &PraCredentialPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialPoolArrayInput)(nil)).Elem(), PraCredentialPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialPoolMapInput)(nil)).Elem(), PraCredentialPoolMap{})
	pulumi.RegisterOutputType(PraCredentialPoolOutput{})
	pulumi.RegisterOutputType(PraCredentialPoolArrayOutput{})
	pulumi.RegisterOutputType(PraCredentialPoolMapOutput{})
}
