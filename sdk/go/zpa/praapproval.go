// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-approvals)
// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-approvals-using-api)
//
// The **zpa_pra_approval_controller** resource creates a privileged remote access approval in the Zscaler Private Access cloud. This resource allows third-party users and contractors to be able to log in to a Privileged Remote Access (PRA) portal.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ZPA Segment Group resource
//			thisSegmentGroup, err := zpa.NewSegmentGroup(ctx, "this", &zpa.SegmentGroupArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// ZPA App Connector Group resource
//			thisConnectorGroup, err := zpa.NewConnectorGroup(ctx, "this", &zpa.ConnectorGroupArgs{
//				Name:                   pulumi.String("Example"),
//				Description:            pulumi.String("Example"),
//				Enabled:                pulumi.Bool(true),
//				CityCountry:            pulumi.String("San Jose, CA"),
//				CountryCode:            pulumi.String("US"),
//				Latitude:               pulumi.String("37.338"),
//				Longitude:              pulumi.String("-121.8863"),
//				Location:               pulumi.String("San Jose, CA, US"),
//				UpgradeDay:             pulumi.String("SUNDAY"),
//				UpgradeTimeInSecs:      pulumi.String("66600"),
//				OverrideVersionProfile: pulumi.Bool(true),
//				VersionProfileId:       pulumi.String("0"),
//				DnsQueryType:           pulumi.String("IPV4"),
//			})
//			if err != nil {
//				return err
//			}
//			// ZPA Server Group resource
//			thisServerGroup, err := zpa.NewServerGroup(ctx, "this", &zpa.ServerGroupArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("Example"),
//				Enabled:          pulumi.Bool(true),
//				DynamicDiscovery: pulumi.Bool(false),
//				AppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{
//					&zpa.ServerGroupAppConnectorGroupArgs{
//						Ids: pulumi.StringArray{
//							thisConnectorGroup.ID(),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				thisConnectorGroup,
//			}))
//			if err != nil {
//				return err
//			}
//			// ZPA Application Segment resource
//			this, err := zpa.NewApplicationSegment(ctx, "this", &zpa.ApplicationSegmentArgs{
//				Name:            pulumi.String("Example"),
//				Description:     pulumi.String("Example"),
//				Enabled:         pulumi.Bool(true),
//				HealthReporting: pulumi.String("ON_ACCESS"),
//				BypassType:      pulumi.String("NEVER"),
//				IsCnameEnabled:  pulumi.Bool(true),
//				TcpPortRanges: pulumi.StringArray{
//					pulumi.String("8080"),
//					pulumi.String("8080"),
//				},
//				DomainNames: pulumi.StringArray{
//					pulumi.String("server.acme.com"),
//				},
//				SegmentGroupId: thisSegmentGroup.ID(),
//				ServerGroups: zpa.ApplicationSegmentServerGroupArray{
//					&zpa.ApplicationSegmentServerGroupArgs{
//						Ids: pulumi.StringArray{
//							thisServerGroup.ID(),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				thisServerGroup,
//				thisSegmentGroup,
//			}))
//			if err != nil {
//				return err
//			}
//			// Create PRA Approval Controller
//			_, err = zpa.NewPRAApproval(ctx, "this", &zpa.PRAApprovalArgs{
//				EmailIds: pulumi.StringArray{
//					pulumi.String("jdoe@acme.com"),
//				},
//				StartTime: pulumi.String("Tue, 07 Mar 2024 11:05:30 PST"),
//				EndTime:   pulumi.String("Tue, 07 Jun 2024 11:05:30 PST"),
//				Status:    pulumi.String("FUTURE"),
//				Applications: zpa.PRAApprovalApplicationArray{
//					&zpa.PRAApprovalApplicationArgs{
//						Ids: pulumi.StringArray{
//							this.ID(),
//						},
//					},
//				},
//				WorkingHours: zpa.PRAApprovalWorkingHourArray{
//					&zpa.PRAApprovalWorkingHourArgs{
//						Days: pulumi.StringArray{
//							pulumi.String("FRI"),
//							pulumi.String("MON"),
//							pulumi.String("SAT"),
//							pulumi.String("SUN"),
//							pulumi.String("THU"),
//							pulumi.String("TUE"),
//							pulumi.String("WED"),
//						},
//						StartTime:     pulumi.String("00:10"),
//						StartTimeCron: pulumi.String("0 0 8 ? * MON,TUE,WED,THU,FRI,SAT"),
//						EndTime:       pulumi.String("09:15"),
//						EndTimeCron:   pulumi.String("0 15 17 ? * MON,TUE,WED,THU,FRI,SAT"),
//						Timezone:      pulumi.String("America/Vancouver"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zpa_pra_approval_controller** can be imported by using `<APPROVAL ID>` or `<APPROVAL NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/pRAApproval:PRAApproval this <approval_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/pRAApproval:PRAApproval this <approval_name>
// ```
type PRAApproval struct {
	pulumi.CustomResourceState

	Applications PRAApprovalApplicationArrayOutput `pulumi:"applications"`
	// The email address of the user that you are assigning the privileged approval to
	EmailIds pulumi.StringArrayOutput `pulumi:"emailIds"`
	// The end date that the user no longer has access to the privileged approval
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The start date that the user has access to the privileged approval
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The status of the privileged approval
	Status       pulumi.StringOutput               `pulumi:"status"`
	WorkingHours PRAApprovalWorkingHourArrayOutput `pulumi:"workingHours"`
}

// NewPRAApproval registers a new resource with the given unique name, arguments, and options.
func NewPRAApproval(ctx *pulumi.Context,
	name string, args *PRAApprovalArgs, opts ...pulumi.ResourceOption) (*PRAApproval, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Applications == nil {
		return nil, errors.New("invalid value for required argument 'Applications'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("zpa:index/praApprovalController:PraApprovalController"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PRAApproval
	err := ctx.RegisterResource("zpa:index/pRAApproval:PRAApproval", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPRAApproval gets an existing PRAApproval resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPRAApproval(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PRAApprovalState, opts ...pulumi.ResourceOption) (*PRAApproval, error) {
	var resource PRAApproval
	err := ctx.ReadResource("zpa:index/pRAApproval:PRAApproval", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PRAApproval resources.
type praapprovalState struct {
	Applications []PRAApprovalApplication `pulumi:"applications"`
	// The email address of the user that you are assigning the privileged approval to
	EmailIds []string `pulumi:"emailIds"`
	// The end date that the user no longer has access to the privileged approval
	EndTime *string `pulumi:"endTime"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The start date that the user has access to the privileged approval
	StartTime *string `pulumi:"startTime"`
	// The status of the privileged approval
	Status       *string                  `pulumi:"status"`
	WorkingHours []PRAApprovalWorkingHour `pulumi:"workingHours"`
}

type PRAApprovalState struct {
	Applications PRAApprovalApplicationArrayInput
	// The email address of the user that you are assigning the privileged approval to
	EmailIds pulumi.StringArrayInput
	// The end date that the user no longer has access to the privileged approval
	EndTime pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The start date that the user has access to the privileged approval
	StartTime pulumi.StringPtrInput
	// The status of the privileged approval
	Status       pulumi.StringPtrInput
	WorkingHours PRAApprovalWorkingHourArrayInput
}

func (PRAApprovalState) ElementType() reflect.Type {
	return reflect.TypeOf((*praapprovalState)(nil)).Elem()
}

type praapprovalArgs struct {
	Applications []PRAApprovalApplication `pulumi:"applications"`
	// The email address of the user that you are assigning the privileged approval to
	EmailIds []string `pulumi:"emailIds"`
	// The end date that the user no longer has access to the privileged approval
	EndTime *string `pulumi:"endTime"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The start date that the user has access to the privileged approval
	StartTime *string `pulumi:"startTime"`
	// The status of the privileged approval
	Status       *string                  `pulumi:"status"`
	WorkingHours []PRAApprovalWorkingHour `pulumi:"workingHours"`
}

// The set of arguments for constructing a PRAApproval resource.
type PRAApprovalArgs struct {
	Applications PRAApprovalApplicationArrayInput
	// The email address of the user that you are assigning the privileged approval to
	EmailIds pulumi.StringArrayInput
	// The end date that the user no longer has access to the privileged approval
	EndTime pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The start date that the user has access to the privileged approval
	StartTime pulumi.StringPtrInput
	// The status of the privileged approval
	Status       pulumi.StringPtrInput
	WorkingHours PRAApprovalWorkingHourArrayInput
}

func (PRAApprovalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*praapprovalArgs)(nil)).Elem()
}

type PRAApprovalInput interface {
	pulumi.Input

	ToPRAApprovalOutput() PRAApprovalOutput
	ToPRAApprovalOutputWithContext(ctx context.Context) PRAApprovalOutput
}

func (*PRAApproval) ElementType() reflect.Type {
	return reflect.TypeOf((**PRAApproval)(nil)).Elem()
}

func (i *PRAApproval) ToPRAApprovalOutput() PRAApprovalOutput {
	return i.ToPRAApprovalOutputWithContext(context.Background())
}

func (i *PRAApproval) ToPRAApprovalOutputWithContext(ctx context.Context) PRAApprovalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRAApprovalOutput)
}

// PRAApprovalArrayInput is an input type that accepts PRAApprovalArray and PRAApprovalArrayOutput values.
// You can construct a concrete instance of `PRAApprovalArrayInput` via:
//
//	PRAApprovalArray{ PRAApprovalArgs{...} }
type PRAApprovalArrayInput interface {
	pulumi.Input

	ToPRAApprovalArrayOutput() PRAApprovalArrayOutput
	ToPRAApprovalArrayOutputWithContext(context.Context) PRAApprovalArrayOutput
}

type PRAApprovalArray []PRAApprovalInput

func (PRAApprovalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRAApproval)(nil)).Elem()
}

func (i PRAApprovalArray) ToPRAApprovalArrayOutput() PRAApprovalArrayOutput {
	return i.ToPRAApprovalArrayOutputWithContext(context.Background())
}

func (i PRAApprovalArray) ToPRAApprovalArrayOutputWithContext(ctx context.Context) PRAApprovalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRAApprovalArrayOutput)
}

// PRAApprovalMapInput is an input type that accepts PRAApprovalMap and PRAApprovalMapOutput values.
// You can construct a concrete instance of `PRAApprovalMapInput` via:
//
//	PRAApprovalMap{ "key": PRAApprovalArgs{...} }
type PRAApprovalMapInput interface {
	pulumi.Input

	ToPRAApprovalMapOutput() PRAApprovalMapOutput
	ToPRAApprovalMapOutputWithContext(context.Context) PRAApprovalMapOutput
}

type PRAApprovalMap map[string]PRAApprovalInput

func (PRAApprovalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRAApproval)(nil)).Elem()
}

func (i PRAApprovalMap) ToPRAApprovalMapOutput() PRAApprovalMapOutput {
	return i.ToPRAApprovalMapOutputWithContext(context.Background())
}

func (i PRAApprovalMap) ToPRAApprovalMapOutputWithContext(ctx context.Context) PRAApprovalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRAApprovalMapOutput)
}

type PRAApprovalOutput struct{ *pulumi.OutputState }

func (PRAApprovalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PRAApproval)(nil)).Elem()
}

func (o PRAApprovalOutput) ToPRAApprovalOutput() PRAApprovalOutput {
	return o
}

func (o PRAApprovalOutput) ToPRAApprovalOutputWithContext(ctx context.Context) PRAApprovalOutput {
	return o
}

func (o PRAApprovalOutput) Applications() PRAApprovalApplicationArrayOutput {
	return o.ApplyT(func(v *PRAApproval) PRAApprovalApplicationArrayOutput { return v.Applications }).(PRAApprovalApplicationArrayOutput)
}

// The email address of the user that you are assigning the privileged approval to
func (o PRAApprovalOutput) EmailIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PRAApproval) pulumi.StringArrayOutput { return v.EmailIds }).(pulumi.StringArrayOutput)
}

// The end date that the user no longer has access to the privileged approval
func (o PRAApprovalOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PRAApproval) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PRAApprovalOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PRAApproval) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The start date that the user has access to the privileged approval
func (o PRAApprovalOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PRAApproval) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The status of the privileged approval
func (o PRAApprovalOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PRAApproval) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PRAApprovalOutput) WorkingHours() PRAApprovalWorkingHourArrayOutput {
	return o.ApplyT(func(v *PRAApproval) PRAApprovalWorkingHourArrayOutput { return v.WorkingHours }).(PRAApprovalWorkingHourArrayOutput)
}

type PRAApprovalArrayOutput struct{ *pulumi.OutputState }

func (PRAApprovalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRAApproval)(nil)).Elem()
}

func (o PRAApprovalArrayOutput) ToPRAApprovalArrayOutput() PRAApprovalArrayOutput {
	return o
}

func (o PRAApprovalArrayOutput) ToPRAApprovalArrayOutputWithContext(ctx context.Context) PRAApprovalArrayOutput {
	return o
}

func (o PRAApprovalArrayOutput) Index(i pulumi.IntInput) PRAApprovalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PRAApproval {
		return vs[0].([]*PRAApproval)[vs[1].(int)]
	}).(PRAApprovalOutput)
}

type PRAApprovalMapOutput struct{ *pulumi.OutputState }

func (PRAApprovalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRAApproval)(nil)).Elem()
}

func (o PRAApprovalMapOutput) ToPRAApprovalMapOutput() PRAApprovalMapOutput {
	return o
}

func (o PRAApprovalMapOutput) ToPRAApprovalMapOutputWithContext(ctx context.Context) PRAApprovalMapOutput {
	return o
}

func (o PRAApprovalMapOutput) MapIndex(k pulumi.StringInput) PRAApprovalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PRAApproval {
		return vs[0].(map[string]*PRAApproval)[vs[1].(string)]
	}).(PRAApprovalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PRAApprovalInput)(nil)).Elem(), &PRAApproval{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRAApprovalArrayInput)(nil)).Elem(), PRAApprovalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRAApprovalMapInput)(nil)).Elem(), PRAApprovalMap{})
	pulumi.RegisterOutputType(PRAApprovalOutput{})
	pulumi.RegisterOutputType(PRAApprovalArrayOutput{})
	pulumi.RegisterOutputType(PRAApprovalMapOutput{})
}
