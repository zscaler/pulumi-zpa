// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
// * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)
//
// The **zpa_policy_browser_protection_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.
//
//	⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.
//
//	⚠️ **WARNING:**: The attribute ``ruleOrder`` is now deprecated in favor of the new resource  ``policyAccessRuleReorder``
//
// ## Example Usage
//
// ### Browser Protection With MONITOR ACTION
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve Policy Types
//			// Retrieve Identity Provider ID
//			this, err := zpa.GetIdPController(ctx, &zpa.GetIdPControllerArgs{
//				Name: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SAML Attribute ID
//			emailUserSso, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("Email_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SAML Attribute ID
//			groupUser, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("GroupName_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SCIM Group ID
//			a000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("A000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SCIM Group ID
//			b000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("B000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Segment Group
//			thisSegmentGroup, err := zpa.NewSegmentGroup(ctx, "this", &zpa.SegmentGroupArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Create Policy Access Rule V2
//			_, err = zpa.NewPolicyBrowserProtectionRule(ctx, "this", &zpa.PolicyBrowserProtectionRuleArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("MONITOR"),
//				Conditions: zpa.PolicyBrowserProtectionRuleConditionArray{
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("APP_GROUP"),
//								Values: pulumi.StringArray{
//									thisSegmentGroup.ID(),
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("SAML"),
//								EntryValues: zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArray{
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("user1@acme.com"),
//										Lhs: pulumi.String(emailUserSso.Id),
//									},
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("A000"),
//										Lhs: pulumi.String(groupUser.Id),
//									},
//								},
//							},
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("SCIM_GROUP"),
//								EntryValues: zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArray{
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(a000.Id),
//										Lhs: pulumi.String(this.Id),
//									},
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(b000.Id),
//										Lhs: pulumi.String(this.Id),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("USER_PORTAL"),
//								Values: pulumi.StringArray{
//									pulumi.String("145262059234265326"),
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("CLIENT_TYPE"),
//								Values: pulumi.StringArray{
//									pulumi.String("zpn_client_type_exporter"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Browser Protection With DO_NOT_MONITOR ACTION
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve Policy Types
//			// Retrieve Identity Provider ID
//			this, err := zpa.GetIdPController(ctx, &zpa.GetIdPControllerArgs{
//				Name: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SAML Attribute ID
//			emailUserSso, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("Email_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SAML Attribute ID
//			groupUser, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("GroupName_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SCIM Group ID
//			a000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("A000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Retrieve SCIM Group ID
//			b000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("B000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Segment Group
//			thisSegmentGroup, err := zpa.NewSegmentGroup(ctx, "this", &zpa.SegmentGroupArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Create Policy Access Rule V2
//			_, err = zpa.NewPolicyBrowserProtectionRule(ctx, "this", &zpa.PolicyBrowserProtectionRuleArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("DO_NOT_MONITOR"),
//				Conditions: zpa.PolicyBrowserProtectionRuleConditionArray{
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("APP_GROUP"),
//								Values: pulumi.StringArray{
//									thisSegmentGroup.ID(),
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("SAML"),
//								EntryValues: zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArray{
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("user1@acme.com"),
//										Lhs: pulumi.String(emailUserSso.Id),
//									},
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("A000"),
//										Lhs: pulumi.String(groupUser.Id),
//									},
//								},
//							},
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("SCIM_GROUP"),
//								EntryValues: zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArray{
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(a000.Id),
//										Lhs: pulumi.String(this.Id),
//									},
//									&zpa.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(b000.Id),
//										Lhs: pulumi.String(this.Id),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("USER_PORTAL"),
//								Values: pulumi.StringArray{
//									pulumi.String("145262059234265326"),
//								},
//							},
//						},
//					},
//					&zpa.PolicyBrowserProtectionRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyBrowserProtectionRuleConditionOperandArray{
//							&zpa.PolicyBrowserProtectionRuleConditionOperandArgs{
//								ObjectType: pulumi.String("CLIENT_TYPE"),
//								Values: pulumi.StringArray{
//									pulumi.String("zpn_client_type_exporter"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## LHS and RHS Values
//
// | Object Type | LHS| RHS| VALUES
// |----------|-----------|----------|----------
// | APP  |   |  | “applicationSegmentId“ |
// | APP_GROUP  |   |  | “segmentGroupId“|
// | CLIENT_TYPE  |   |  |  “zpnClientTypeZappl“, “zpnClientTypeExporter“, “zpnClientTypeBrowserIsolation“, “zpnClientTypeIpAnchoring“, “zpnClientTypeEdgeConnector“, “zpnClientTypeBranchConnector“,  “zpnClientTypeZappPartner“, “zpnClientTypeZapp“  |
// | EDGE_CONNECTOR_GROUP  |   |  |  “<edge_connector_id>“ |
// | BRANCH_CONNECTOR_GROUP  |   |  |  “<branch_connector_id>“ |
// | LOCATION   |   |  | “locationId“ |
// | MACHINE_GRP   |   |  | “machineGroupId“ |
// | SAML | “samlAttributeId“  | “attributeValueToMatch“ |
// | SCIM | “scimAttributeId“  | “attributeValueToMatch“  |
// | SCIM_GROUP | “scimGroupAttributeId“  | “attributeValueToMatch“  |
// | PLATFORM | “mac“, “ios“, “windows“, “android“, “linux“ | “"true"“ / “"false"“ |
// | POSTURE | “postureUdid“  | “"true"“ / “"false"“ |
// | TRUSTED_NETWORK | “networkId“  | “"true"“ |
// | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | “"true"“ / “"false"“ |
// | RISK_FACTOR_TYPE | “ZIA“  | “"UNKNOWN", "LOW", "MEDIUM", "HIGH", "CRITICAL"“ |
// | CHROME_ENTERPRISE | “managed“  | “"true" / "false"“ |
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// Policy access rule can be imported by using `<RULE ID>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule example <rule_id>
// ```
type PolicyBrowserProtectionRule struct {
	pulumi.CustomResourceState

	// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyBrowserProtectionRuleConditionArrayOutput `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	MicrotenantId pulumi.StringOutput    `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name        pulumi.StringOutput `pulumi:"name"`
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
}

// NewPolicyBrowserProtectionRule registers a new resource with the given unique name, arguments, and options.
func NewPolicyBrowserProtectionRule(ctx *pulumi.Context,
	name string, args *PolicyBrowserProtectionRuleArgs, opts ...pulumi.ResourceOption) (*PolicyBrowserProtectionRule, error) {
	if args == nil {
		args = &PolicyBrowserProtectionRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyBrowserProtectionRule
	err := ctx.RegisterResource("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyBrowserProtectionRule gets an existing PolicyBrowserProtectionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyBrowserProtectionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyBrowserProtectionRuleState, opts ...pulumi.ResourceOption) (*PolicyBrowserProtectionRule, error) {
	var resource PolicyBrowserProtectionRule
	err := ctx.ReadResource("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyBrowserProtectionRule resources.
type policyBrowserProtectionRuleState struct {
	// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyBrowserProtectionRuleCondition `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name        *string `pulumi:"name"`
	PolicySetId *string `pulumi:"policySetId"`
}

type PolicyBrowserProtectionRuleState struct {
	// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyBrowserProtectionRuleConditionArrayInput
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name        pulumi.StringPtrInput
	PolicySetId pulumi.StringPtrInput
}

func (PolicyBrowserProtectionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBrowserProtectionRuleState)(nil)).Elem()
}

type policyBrowserProtectionRuleArgs struct {
	// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyBrowserProtectionRuleCondition `pulumi:"conditions"`
	// This is the description of the access policy rule.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyBrowserProtectionRule resource.
type PolicyBrowserProtectionRuleArgs struct {
	// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyBrowserProtectionRuleConditionArrayInput
	// This is the description of the access policy rule.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name pulumi.StringPtrInput
}

func (PolicyBrowserProtectionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBrowserProtectionRuleArgs)(nil)).Elem()
}

type PolicyBrowserProtectionRuleInput interface {
	pulumi.Input

	ToPolicyBrowserProtectionRuleOutput() PolicyBrowserProtectionRuleOutput
	ToPolicyBrowserProtectionRuleOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleOutput
}

func (*PolicyBrowserProtectionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBrowserProtectionRule)(nil)).Elem()
}

func (i *PolicyBrowserProtectionRule) ToPolicyBrowserProtectionRuleOutput() PolicyBrowserProtectionRuleOutput {
	return i.ToPolicyBrowserProtectionRuleOutputWithContext(context.Background())
}

func (i *PolicyBrowserProtectionRule) ToPolicyBrowserProtectionRuleOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBrowserProtectionRuleOutput)
}

// PolicyBrowserProtectionRuleArrayInput is an input type that accepts PolicyBrowserProtectionRuleArray and PolicyBrowserProtectionRuleArrayOutput values.
// You can construct a concrete instance of `PolicyBrowserProtectionRuleArrayInput` via:
//
//	PolicyBrowserProtectionRuleArray{ PolicyBrowserProtectionRuleArgs{...} }
type PolicyBrowserProtectionRuleArrayInput interface {
	pulumi.Input

	ToPolicyBrowserProtectionRuleArrayOutput() PolicyBrowserProtectionRuleArrayOutput
	ToPolicyBrowserProtectionRuleArrayOutputWithContext(context.Context) PolicyBrowserProtectionRuleArrayOutput
}

type PolicyBrowserProtectionRuleArray []PolicyBrowserProtectionRuleInput

func (PolicyBrowserProtectionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyBrowserProtectionRule)(nil)).Elem()
}

func (i PolicyBrowserProtectionRuleArray) ToPolicyBrowserProtectionRuleArrayOutput() PolicyBrowserProtectionRuleArrayOutput {
	return i.ToPolicyBrowserProtectionRuleArrayOutputWithContext(context.Background())
}

func (i PolicyBrowserProtectionRuleArray) ToPolicyBrowserProtectionRuleArrayOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBrowserProtectionRuleArrayOutput)
}

// PolicyBrowserProtectionRuleMapInput is an input type that accepts PolicyBrowserProtectionRuleMap and PolicyBrowserProtectionRuleMapOutput values.
// You can construct a concrete instance of `PolicyBrowserProtectionRuleMapInput` via:
//
//	PolicyBrowserProtectionRuleMap{ "key": PolicyBrowserProtectionRuleArgs{...} }
type PolicyBrowserProtectionRuleMapInput interface {
	pulumi.Input

	ToPolicyBrowserProtectionRuleMapOutput() PolicyBrowserProtectionRuleMapOutput
	ToPolicyBrowserProtectionRuleMapOutputWithContext(context.Context) PolicyBrowserProtectionRuleMapOutput
}

type PolicyBrowserProtectionRuleMap map[string]PolicyBrowserProtectionRuleInput

func (PolicyBrowserProtectionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyBrowserProtectionRule)(nil)).Elem()
}

func (i PolicyBrowserProtectionRuleMap) ToPolicyBrowserProtectionRuleMapOutput() PolicyBrowserProtectionRuleMapOutput {
	return i.ToPolicyBrowserProtectionRuleMapOutputWithContext(context.Background())
}

func (i PolicyBrowserProtectionRuleMap) ToPolicyBrowserProtectionRuleMapOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBrowserProtectionRuleMapOutput)
}

type PolicyBrowserProtectionRuleOutput struct{ *pulumi.OutputState }

func (PolicyBrowserProtectionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBrowserProtectionRule)(nil)).Elem()
}

func (o PolicyBrowserProtectionRuleOutput) ToPolicyBrowserProtectionRuleOutput() PolicyBrowserProtectionRuleOutput {
	return o
}

func (o PolicyBrowserProtectionRuleOutput) ToPolicyBrowserProtectionRuleOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleOutput {
	return o
}

// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
func (o PolicyBrowserProtectionRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// This is for proviidng the set of conditions for the policy.
func (o PolicyBrowserProtectionRuleOutput) Conditions() PolicyBrowserProtectionRuleConditionArrayOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) PolicyBrowserProtectionRuleConditionArrayOutput {
		return v.Conditions
	}).(PolicyBrowserProtectionRuleConditionArrayOutput)
}

// This is the description of the access policy rule.
func (o PolicyBrowserProtectionRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PolicyBrowserProtectionRuleOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// This is the name of the policy rule.
func (o PolicyBrowserProtectionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyBrowserProtectionRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBrowserProtectionRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

type PolicyBrowserProtectionRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyBrowserProtectionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyBrowserProtectionRule)(nil)).Elem()
}

func (o PolicyBrowserProtectionRuleArrayOutput) ToPolicyBrowserProtectionRuleArrayOutput() PolicyBrowserProtectionRuleArrayOutput {
	return o
}

func (o PolicyBrowserProtectionRuleArrayOutput) ToPolicyBrowserProtectionRuleArrayOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleArrayOutput {
	return o
}

func (o PolicyBrowserProtectionRuleArrayOutput) Index(i pulumi.IntInput) PolicyBrowserProtectionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyBrowserProtectionRule {
		return vs[0].([]*PolicyBrowserProtectionRule)[vs[1].(int)]
	}).(PolicyBrowserProtectionRuleOutput)
}

type PolicyBrowserProtectionRuleMapOutput struct{ *pulumi.OutputState }

func (PolicyBrowserProtectionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyBrowserProtectionRule)(nil)).Elem()
}

func (o PolicyBrowserProtectionRuleMapOutput) ToPolicyBrowserProtectionRuleMapOutput() PolicyBrowserProtectionRuleMapOutput {
	return o
}

func (o PolicyBrowserProtectionRuleMapOutput) ToPolicyBrowserProtectionRuleMapOutputWithContext(ctx context.Context) PolicyBrowserProtectionRuleMapOutput {
	return o
}

func (o PolicyBrowserProtectionRuleMapOutput) MapIndex(k pulumi.StringInput) PolicyBrowserProtectionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyBrowserProtectionRule {
		return vs[0].(map[string]*PolicyBrowserProtectionRule)[vs[1].(string)]
	}).(PolicyBrowserProtectionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBrowserProtectionRuleInput)(nil)).Elem(), &PolicyBrowserProtectionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBrowserProtectionRuleArrayInput)(nil)).Elem(), PolicyBrowserProtectionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBrowserProtectionRuleMapInput)(nil)).Elem(), PolicyBrowserProtectionRuleMap{})
	pulumi.RegisterOutputType(PolicyBrowserProtectionRuleOutput{})
	pulumi.RegisterOutputType(PolicyBrowserProtectionRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyBrowserProtectionRuleMapOutput{})
}
