// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

var _ = internal.GetEnvOrDefault

// Use exponential back off strategy for rate limits.
func GetBackoff(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "zpa:backoff")
}

// zpa client id
func GetClientId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:clientId")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLIENT_ID"); d != nil {
		value = d.(string)
	}
	return value
}

// zpa client secret
func GetClientSecret(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:clientSecret")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLIENT_SECRET"); d != nil {
		value = d.(string)
	}
	return value
}

// zpa customer id
func GetCustomerId(ctx *pulumi.Context) string {
	return config.Get(ctx, "zpa:customerId")
}

// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
func GetHttpProxy(ctx *pulumi.Context) string {
	return config.Get(ctx, "zpa:httpProxy")
}

// maximum number of retries to attempt before erroring out.
func GetMaxRetries(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "zpa:maxRetries")
}

// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
func GetMaxWaitSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "zpa:maxWaitSeconds")
}

// zpa microtenant ID
func GetMicrotenantId(ctx *pulumi.Context) string {
	return config.Get(ctx, "zpa:microtenantId")
}

// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
func GetMinWaitSeconds(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "zpa:minWaitSeconds")
}

// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
// https://help.zscaler.com/zpa/understanding-rate-limiting.
func GetParallelism(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "zpa:parallelism")
}

// zpa private key
func GetPrivateKey(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:privateKey")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_PRIVATE_KEY"); d != nil {
		value = d.(string)
	}
	return value
}

// Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
// maximum value can be `300`.
func GetRequestTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "zpa:requestTimeout")
}

// Enables interaction with the ZPA legacy API framework
func GetUseLegacyClient(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "zpa:useLegacyClient")
	if err == nil {
		return v
	}
	var value bool
	if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "ZSCALER_USE_LEGACY_CLIENT"); d != nil {
		value = d.(bool)
	}
	return value
}

// Zscaler Vanity Domain
func GetVanityDomain(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:vanityDomain")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_VANITY_DOMAIN"); d != nil {
		value = d.(string)
	}
	return value
}

// zpa client id
func GetZpaClientId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:zpaClientId")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLIENT_ID"); d != nil {
		value = d.(string)
	}
	return value
}

// zpa client secret
func GetZpaClientSecret(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:zpaClientSecret")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLIENT_SECRET"); d != nil {
		value = d.(string)
	}
	return value
}

// Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
func GetZpaCloud(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:zpaCloud")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CLOUD"); d != nil {
		value = d.(string)
	}
	return value
}

// zpa customer id
func GetZpaCustomerId(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:zpaCustomerId")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZPA_CUSTOMER_ID"); d != nil {
		value = d.(string)
	}
	return value
}

// Zscaler Cloud Name
func GetZscalerCloud(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "zpa:zscalerCloud")
	if err == nil {
		return v
	}
	var value string
	if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLOUD"); d != nil {
		value = d.(string)
	}
	return value
}
