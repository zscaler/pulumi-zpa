// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// The **zpa_policy_access_rule_reorder** is a dedicated resource to manage and update ruleOrders in any of the supported ZPA Policy Access types Zscaler Private Access cloud.
//
// ⚠️ **WARNING:**: The attribute “ruleOrder“ is now deprecated in favor of this resource for all ZPA policy types.
//
// ## Example Usage
type PolicyAccessReorderRule struct {
	pulumi.CustomResourceState

	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// (Required)
	Rules PolicyAccessReorderRuleRuleArrayOutput `pulumi:"rules"`
}

// NewPolicyAccessReorderRule registers a new resource with the given unique name, arguments, and options.
func NewPolicyAccessReorderRule(ctx *pulumi.Context,
	name string, args *PolicyAccessReorderRuleArgs, opts ...pulumi.ResourceOption) (*PolicyAccessReorderRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAccessReorderRule
	err := ctx.RegisterResource("zpa:index/policyAccessReorderRule:PolicyAccessReorderRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAccessReorderRule gets an existing PolicyAccessReorderRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAccessReorderRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAccessReorderRuleState, opts ...pulumi.ResourceOption) (*PolicyAccessReorderRule, error) {
	var resource PolicyAccessReorderRule
	err := ctx.ReadResource("zpa:index/policyAccessReorderRule:PolicyAccessReorderRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAccessReorderRule resources.
type policyAccessReorderRuleState struct {
	PolicyType *string `pulumi:"policyType"`
	// (Required)
	Rules []PolicyAccessReorderRuleRule `pulumi:"rules"`
}

type PolicyAccessReorderRuleState struct {
	PolicyType pulumi.StringPtrInput
	// (Required)
	Rules PolicyAccessReorderRuleRuleArrayInput
}

func (PolicyAccessReorderRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessReorderRuleState)(nil)).Elem()
}

type policyAccessReorderRuleArgs struct {
	PolicyType string `pulumi:"policyType"`
	// (Required)
	Rules []PolicyAccessReorderRuleRule `pulumi:"rules"`
}

// The set of arguments for constructing a PolicyAccessReorderRule resource.
type PolicyAccessReorderRuleArgs struct {
	PolicyType pulumi.StringInput
	// (Required)
	Rules PolicyAccessReorderRuleRuleArrayInput
}

func (PolicyAccessReorderRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessReorderRuleArgs)(nil)).Elem()
}

type PolicyAccessReorderRuleInput interface {
	pulumi.Input

	ToPolicyAccessReorderRuleOutput() PolicyAccessReorderRuleOutput
	ToPolicyAccessReorderRuleOutputWithContext(ctx context.Context) PolicyAccessReorderRuleOutput
}

func (*PolicyAccessReorderRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessReorderRule)(nil)).Elem()
}

func (i *PolicyAccessReorderRule) ToPolicyAccessReorderRuleOutput() PolicyAccessReorderRuleOutput {
	return i.ToPolicyAccessReorderRuleOutputWithContext(context.Background())
}

func (i *PolicyAccessReorderRule) ToPolicyAccessReorderRuleOutputWithContext(ctx context.Context) PolicyAccessReorderRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessReorderRuleOutput)
}

// PolicyAccessReorderRuleArrayInput is an input type that accepts PolicyAccessReorderRuleArray and PolicyAccessReorderRuleArrayOutput values.
// You can construct a concrete instance of `PolicyAccessReorderRuleArrayInput` via:
//
//	PolicyAccessReorderRuleArray{ PolicyAccessReorderRuleArgs{...} }
type PolicyAccessReorderRuleArrayInput interface {
	pulumi.Input

	ToPolicyAccessReorderRuleArrayOutput() PolicyAccessReorderRuleArrayOutput
	ToPolicyAccessReorderRuleArrayOutputWithContext(context.Context) PolicyAccessReorderRuleArrayOutput
}

type PolicyAccessReorderRuleArray []PolicyAccessReorderRuleInput

func (PolicyAccessReorderRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessReorderRule)(nil)).Elem()
}

func (i PolicyAccessReorderRuleArray) ToPolicyAccessReorderRuleArrayOutput() PolicyAccessReorderRuleArrayOutput {
	return i.ToPolicyAccessReorderRuleArrayOutputWithContext(context.Background())
}

func (i PolicyAccessReorderRuleArray) ToPolicyAccessReorderRuleArrayOutputWithContext(ctx context.Context) PolicyAccessReorderRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessReorderRuleArrayOutput)
}

// PolicyAccessReorderRuleMapInput is an input type that accepts PolicyAccessReorderRuleMap and PolicyAccessReorderRuleMapOutput values.
// You can construct a concrete instance of `PolicyAccessReorderRuleMapInput` via:
//
//	PolicyAccessReorderRuleMap{ "key": PolicyAccessReorderRuleArgs{...} }
type PolicyAccessReorderRuleMapInput interface {
	pulumi.Input

	ToPolicyAccessReorderRuleMapOutput() PolicyAccessReorderRuleMapOutput
	ToPolicyAccessReorderRuleMapOutputWithContext(context.Context) PolicyAccessReorderRuleMapOutput
}

type PolicyAccessReorderRuleMap map[string]PolicyAccessReorderRuleInput

func (PolicyAccessReorderRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessReorderRule)(nil)).Elem()
}

func (i PolicyAccessReorderRuleMap) ToPolicyAccessReorderRuleMapOutput() PolicyAccessReorderRuleMapOutput {
	return i.ToPolicyAccessReorderRuleMapOutputWithContext(context.Background())
}

func (i PolicyAccessReorderRuleMap) ToPolicyAccessReorderRuleMapOutputWithContext(ctx context.Context) PolicyAccessReorderRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessReorderRuleMapOutput)
}

type PolicyAccessReorderRuleOutput struct{ *pulumi.OutputState }

func (PolicyAccessReorderRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessReorderRule)(nil)).Elem()
}

func (o PolicyAccessReorderRuleOutput) ToPolicyAccessReorderRuleOutput() PolicyAccessReorderRuleOutput {
	return o
}

func (o PolicyAccessReorderRuleOutput) ToPolicyAccessReorderRuleOutputWithContext(ctx context.Context) PolicyAccessReorderRuleOutput {
	return o
}

func (o PolicyAccessReorderRuleOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessReorderRule) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// (Required)
func (o PolicyAccessReorderRuleOutput) Rules() PolicyAccessReorderRuleRuleArrayOutput {
	return o.ApplyT(func(v *PolicyAccessReorderRule) PolicyAccessReorderRuleRuleArrayOutput { return v.Rules }).(PolicyAccessReorderRuleRuleArrayOutput)
}

type PolicyAccessReorderRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessReorderRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessReorderRule)(nil)).Elem()
}

func (o PolicyAccessReorderRuleArrayOutput) ToPolicyAccessReorderRuleArrayOutput() PolicyAccessReorderRuleArrayOutput {
	return o
}

func (o PolicyAccessReorderRuleArrayOutput) ToPolicyAccessReorderRuleArrayOutputWithContext(ctx context.Context) PolicyAccessReorderRuleArrayOutput {
	return o
}

func (o PolicyAccessReorderRuleArrayOutput) Index(i pulumi.IntInput) PolicyAccessReorderRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyAccessReorderRule {
		return vs[0].([]*PolicyAccessReorderRule)[vs[1].(int)]
	}).(PolicyAccessReorderRuleOutput)
}

type PolicyAccessReorderRuleMapOutput struct{ *pulumi.OutputState }

func (PolicyAccessReorderRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessReorderRule)(nil)).Elem()
}

func (o PolicyAccessReorderRuleMapOutput) ToPolicyAccessReorderRuleMapOutput() PolicyAccessReorderRuleMapOutput {
	return o
}

func (o PolicyAccessReorderRuleMapOutput) ToPolicyAccessReorderRuleMapOutputWithContext(ctx context.Context) PolicyAccessReorderRuleMapOutput {
	return o
}

func (o PolicyAccessReorderRuleMapOutput) MapIndex(k pulumi.StringInput) PolicyAccessReorderRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyAccessReorderRule {
		return vs[0].(map[string]*PolicyAccessReorderRule)[vs[1].(string)]
	}).(PolicyAccessReorderRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessReorderRuleInput)(nil)).Elem(), &PolicyAccessReorderRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessReorderRuleArrayInput)(nil)).Elem(), PolicyAccessReorderRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessReorderRuleMapInput)(nil)).Elem(), PolicyAccessReorderRuleMap{})
	pulumi.RegisterOutputType(PolicyAccessReorderRuleOutput{})
	pulumi.RegisterOutputType(PolicyAccessReorderRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyAccessReorderRuleMapOutput{})
}
