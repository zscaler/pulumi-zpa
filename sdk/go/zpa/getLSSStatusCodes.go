// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-log-streaming-service)
// * [API documentation](https://help.zscaler.com/zpa/configuring-log-streaming-service-configurations-using-api)
//
// Use the **zpa_lss_config_status_codes** data source to get information about all LSS status codes in the Zscaler Private Access cloud. This data source is required when the `filter` parameter in the LSS Config Controller resource is set. To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSStatusCodes)
//
// > **NOTE** By Default the ZPA provider will return all status codes
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.GetLSSStatusCodes(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLSSStatusCodes(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetLSSStatusCodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLSSStatusCodesResult
	err := ctx.Invoke("zpa:index/getLSSStatusCodes:getLSSStatusCodes", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getLSSStatusCodes.
type GetLSSStatusCodesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string            `pulumi:"id"`
	ZpnAstAuthLog map[string]string `pulumi:"zpnAstAuthLog"`
	ZpnAuthLog    map[string]string `pulumi:"zpnAuthLog"`
	ZpnSysAuthLog map[string]string `pulumi:"zpnSysAuthLog"`
	ZpnTransLog   map[string]string `pulumi:"zpnTransLog"`
}

func GetLSSStatusCodesOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetLSSStatusCodesResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetLSSStatusCodesResult, error) {
		r, err := GetLSSStatusCodes(ctx, opts...)
		var s GetLSSStatusCodesResult
		if r != nil {
			s = *r
		}
		return s, err
	}).(GetLSSStatusCodesResultOutput)
}

// A collection of values returned by getLSSStatusCodes.
type GetLSSStatusCodesResultOutput struct{ *pulumi.OutputState }

func (GetLSSStatusCodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLSSStatusCodesResult)(nil)).Elem()
}

func (o GetLSSStatusCodesResultOutput) ToGetLSSStatusCodesResultOutput() GetLSSStatusCodesResultOutput {
	return o
}

func (o GetLSSStatusCodesResultOutput) ToGetLSSStatusCodesResultOutputWithContext(ctx context.Context) GetLSSStatusCodesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetLSSStatusCodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLSSStatusCodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetLSSStatusCodesResultOutput) ZpnAstAuthLog() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLSSStatusCodesResult) map[string]string { return v.ZpnAstAuthLog }).(pulumi.StringMapOutput)
}

func (o GetLSSStatusCodesResultOutput) ZpnAuthLog() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLSSStatusCodesResult) map[string]string { return v.ZpnAuthLog }).(pulumi.StringMapOutput)
}

func (o GetLSSStatusCodesResultOutput) ZpnSysAuthLog() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLSSStatusCodesResult) map[string]string { return v.ZpnSysAuthLog }).(pulumi.StringMapOutput)
}

func (o GetLSSStatusCodesResultOutput) ZpnTransLog() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetLSSStatusCodesResult) map[string]string { return v.ZpnTransLog }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLSSStatusCodesResultOutput{})
}
