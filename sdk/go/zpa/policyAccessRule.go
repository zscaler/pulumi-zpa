// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
// * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api)
//
// The **zpa_policy_access_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud.
//
//	⚠️ **WARNING:**: The attribute ``ruleOrder`` is now deprecated in favor of the new resource  ``policyAccessRuleReorder``
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			idpName, err := zpa.GetIdPController(ctx, &zpa.GetIdPControllerArgs{
//				Name: pulumi.StringRef("IdP_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("Engineering"),
//				IdpName: pulumi.StringRef("IdP_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Policy Access Rule
//			_, err = zpa.NewPolicyAccessRule(ctx, "this", &zpa.PolicyAccessRuleArgs{
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("ALLOW"),
//				Operator:    pulumi.String("AND"),
//				Conditions: zpa.PolicyAccessRuleConditionArray{
//					&zpa.PolicyAccessRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleConditionOperandArray{
//							&zpa.PolicyAccessRuleConditionOperandArgs{
//								ObjectType: pulumi.String("APP"),
//								Lhs:        pulumi.String("id"),
//								Rhs:        pulumi.Any(zpa_application_segment.This.Id),
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleConditionOperandArray{
//							&zpa.PolicyAccessRuleConditionOperandArgs{
//								ObjectType: pulumi.String("SCIM_GROUP"),
//								Lhs:        pulumi.String(idpName.Id),
//								Rhs:        pulumi.String(engineering.Id),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## LHS and RHS Values
//
// | Object Type | LHS| RHS
// |----------|-----------|----------
// | APP | “"id"“ | “applicationSegmentId“ |
// | APP_GROUP | “"id"“ | “segmentGroupId“|
// | CLIENT_TYPE | “"id"“ | “zpnClientTypeZappl“, “zpnClientTypeExporter“, “zpnClientTypeBrowserIsolation“, “zpnClientTypeIpAnchoring“, “zpnClientTypeEdgeConnector“, “zpnClientTypeBranchConnector“,  “zpnClientTypeZappPartner“, “zpnClientTypeZapp“  |
// | EDGE_CONNECTOR_GROUP | “"id"“ | “<edge_connector_id>“ |
// | IDP | “"id"“ | “identityProviderId“ |
// | SAML | “samlAttributeId“  | “attributeValueToMatch“ |
// | SCIM | “scimAttributeId“  | “attributeValueToMatch“  |
// | SCIM_GROUP | “scimGroupAttributeId“  | “attributeValueToMatch“  |
// | PLATFORM | “mac“, “ios“, “windows“, “android“, “linux“ | “"true"“ / “"false"“ |
// | MACHINE_GRP | “"id"“ | “machineGroupId“ |
// | POSTURE | “postureUdid“  | “"true"“ / “"false"“ |
// | TRUSTED_NETWORK | “networkId“  | “"true"“ |
// | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | “"true"“ / “"false"“ |
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// Policy access rule can be imported by using `<POLICY ACCESS RULE ID>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/policyAccessRule:PolicyAccessRule example <policy_access_rule_id>
// ```
type PolicyAccessRule struct {
	pulumi.CustomResourceState

	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// This field defines the description of the server.
	ActionId pulumi.StringPtrOutput `pulumi:"actionId"`
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleAppConnectorGroupArrayOutput `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups   PolicyAccessRuleAppServerGroupArrayOutput `pulumi:"appServerGroups"`
	BypassDefaultRule pulumi.BoolPtrOutput                      `pulumi:"bypassDefaultRule"`
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleConditionArrayOutput `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringPtrOutput `pulumi:"customMsg"`
	// This is for providing a customer message for the user.
	DefaultRule pulumi.BoolPtrOutput `pulumi:"defaultRule"`
	// This is the description of the access policy rule.
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	LssDefaultRule pulumi.BoolPtrOutput   `pulumi:"lssDefaultRule"`
	MicrotenantId  pulumi.StringOutput    `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Supported values: `AND`, `OR`
	Operator pulumi.StringOutput `pulumi:"operator"`
	// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
	// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
	PolicySetId       pulumi.StringOutput    `pulumi:"policySetId"`
	PolicyType        pulumi.StringOutput    `pulumi:"policyType"`
	Priority          pulumi.StringOutput    `pulumi:"priority"`
	ReauthDefaultRule pulumi.BoolPtrOutput   `pulumi:"reauthDefaultRule"`
	ReauthIdleTimeout pulumi.StringPtrOutput `pulumi:"reauthIdleTimeout"`
	ReauthTimeout     pulumi.StringPtrOutput `pulumi:"reauthTimeout"`
	// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
	RuleOrder              pulumi.StringOutput `pulumi:"ruleOrder"`
	ZpnCbiProfileId        pulumi.StringOutput `pulumi:"zpnCbiProfileId"`
	ZpnInspectionProfileId pulumi.StringOutput `pulumi:"zpnInspectionProfileId"`
	ZpnIsolationProfileId  pulumi.StringOutput `pulumi:"zpnIsolationProfileId"`
}

// NewPolicyAccessRule registers a new resource with the given unique name, arguments, and options.
func NewPolicyAccessRule(ctx *pulumi.Context,
	name string, args *PolicyAccessRuleArgs, opts ...pulumi.ResourceOption) (*PolicyAccessRule, error) {
	if args == nil {
		args = &PolicyAccessRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAccessRule
	err := ctx.RegisterResource("zpa:index/policyAccessRule:PolicyAccessRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAccessRule gets an existing PolicyAccessRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAccessRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAccessRuleState, opts ...pulumi.ResourceOption) (*PolicyAccessRule, error) {
	var resource PolicyAccessRule
	err := ctx.ReadResource("zpa:index/policyAccessRule:PolicyAccessRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAccessRule resources.
type policyAccessRuleState struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action *string `pulumi:"action"`
	// This field defines the description of the server.
	ActionId *string `pulumi:"actionId"`
	// List of app-connector IDs.
	AppConnectorGroups []PolicyAccessRuleAppConnectorGroup `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups   []PolicyAccessRuleAppServerGroup `pulumi:"appServerGroups"`
	BypassDefaultRule *bool                            `pulumi:"bypassDefaultRule"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyAccessRuleCondition `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg *string `pulumi:"customMsg"`
	// This is for providing a customer message for the user.
	DefaultRule *bool `pulumi:"defaultRule"`
	// This is the description of the access policy rule.
	Description    *string `pulumi:"description"`
	LssDefaultRule *bool   `pulumi:"lssDefaultRule"`
	MicrotenantId  *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name *string `pulumi:"name"`
	// Supported values: `AND`, `OR`
	Operator *string `pulumi:"operator"`
	// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
	// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
	PolicySetId       *string `pulumi:"policySetId"`
	PolicyType        *string `pulumi:"policyType"`
	Priority          *string `pulumi:"priority"`
	ReauthDefaultRule *bool   `pulumi:"reauthDefaultRule"`
	ReauthIdleTimeout *string `pulumi:"reauthIdleTimeout"`
	ReauthTimeout     *string `pulumi:"reauthTimeout"`
	// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
	RuleOrder              *string `pulumi:"ruleOrder"`
	ZpnCbiProfileId        *string `pulumi:"zpnCbiProfileId"`
	ZpnInspectionProfileId *string `pulumi:"zpnInspectionProfileId"`
	ZpnIsolationProfileId  *string `pulumi:"zpnIsolationProfileId"`
}

type PolicyAccessRuleState struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrInput
	// This field defines the description of the server.
	ActionId pulumi.StringPtrInput
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleAppConnectorGroupArrayInput
	// List of the server group IDs.
	AppServerGroups   PolicyAccessRuleAppServerGroupArrayInput
	BypassDefaultRule pulumi.BoolPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleConditionArrayInput
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringPtrInput
	// This is for providing a customer message for the user.
	DefaultRule pulumi.BoolPtrInput
	// This is the description of the access policy rule.
	Description    pulumi.StringPtrInput
	LssDefaultRule pulumi.BoolPtrInput
	MicrotenantId  pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name pulumi.StringPtrInput
	// Supported values: `AND`, `OR`
	Operator pulumi.StringPtrInput
	// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
	// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
	PolicySetId       pulumi.StringPtrInput
	PolicyType        pulumi.StringPtrInput
	Priority          pulumi.StringPtrInput
	ReauthDefaultRule pulumi.BoolPtrInput
	ReauthIdleTimeout pulumi.StringPtrInput
	ReauthTimeout     pulumi.StringPtrInput
	// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
	RuleOrder              pulumi.StringPtrInput
	ZpnCbiProfileId        pulumi.StringPtrInput
	ZpnInspectionProfileId pulumi.StringPtrInput
	ZpnIsolationProfileId  pulumi.StringPtrInput
}

func (PolicyAccessRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessRuleState)(nil)).Elem()
}

type policyAccessRuleArgs struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action *string `pulumi:"action"`
	// This field defines the description of the server.
	ActionId *string `pulumi:"actionId"`
	// List of app-connector IDs.
	AppConnectorGroups []PolicyAccessRuleAppConnectorGroup `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups   []PolicyAccessRuleAppServerGroup `pulumi:"appServerGroups"`
	BypassDefaultRule *bool                            `pulumi:"bypassDefaultRule"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyAccessRuleCondition `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg *string `pulumi:"customMsg"`
	// This is for providing a customer message for the user.
	DefaultRule *bool `pulumi:"defaultRule"`
	// This is the description of the access policy rule.
	Description    *string `pulumi:"description"`
	LssDefaultRule *bool   `pulumi:"lssDefaultRule"`
	MicrotenantId  *string `pulumi:"microtenantId"`
	// This is the name of the policy rule.
	Name *string `pulumi:"name"`
	// Supported values: `AND`, `OR`
	Operator *string `pulumi:"operator"`
	// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
	// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
	PolicySetId       *string `pulumi:"policySetId"`
	PolicyType        *string `pulumi:"policyType"`
	Priority          *string `pulumi:"priority"`
	ReauthDefaultRule *bool   `pulumi:"reauthDefaultRule"`
	ReauthIdleTimeout *string `pulumi:"reauthIdleTimeout"`
	ReauthTimeout     *string `pulumi:"reauthTimeout"`
	// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
	RuleOrder              *string `pulumi:"ruleOrder"`
	ZpnCbiProfileId        *string `pulumi:"zpnCbiProfileId"`
	ZpnInspectionProfileId *string `pulumi:"zpnInspectionProfileId"`
	ZpnIsolationProfileId  *string `pulumi:"zpnIsolationProfileId"`
}

// The set of arguments for constructing a PolicyAccessRule resource.
type PolicyAccessRuleArgs struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrInput
	// This field defines the description of the server.
	ActionId pulumi.StringPtrInput
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleAppConnectorGroupArrayInput
	// List of the server group IDs.
	AppServerGroups   PolicyAccessRuleAppServerGroupArrayInput
	BypassDefaultRule pulumi.BoolPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleConditionArrayInput
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringPtrInput
	// This is for providing a customer message for the user.
	DefaultRule pulumi.BoolPtrInput
	// This is the description of the access policy rule.
	Description    pulumi.StringPtrInput
	LssDefaultRule pulumi.BoolPtrInput
	MicrotenantId  pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name pulumi.StringPtrInput
	// Supported values: `AND`, `OR`
	Operator pulumi.StringPtrInput
	// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
	// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
	PolicySetId       pulumi.StringPtrInput
	PolicyType        pulumi.StringPtrInput
	Priority          pulumi.StringPtrInput
	ReauthDefaultRule pulumi.BoolPtrInput
	ReauthIdleTimeout pulumi.StringPtrInput
	ReauthTimeout     pulumi.StringPtrInput
	// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
	RuleOrder              pulumi.StringPtrInput
	ZpnCbiProfileId        pulumi.StringPtrInput
	ZpnInspectionProfileId pulumi.StringPtrInput
	ZpnIsolationProfileId  pulumi.StringPtrInput
}

func (PolicyAccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessRuleArgs)(nil)).Elem()
}

type PolicyAccessRuleInput interface {
	pulumi.Input

	ToPolicyAccessRuleOutput() PolicyAccessRuleOutput
	ToPolicyAccessRuleOutputWithContext(ctx context.Context) PolicyAccessRuleOutput
}

func (*PolicyAccessRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessRule)(nil)).Elem()
}

func (i *PolicyAccessRule) ToPolicyAccessRuleOutput() PolicyAccessRuleOutput {
	return i.ToPolicyAccessRuleOutputWithContext(context.Background())
}

func (i *PolicyAccessRule) ToPolicyAccessRuleOutputWithContext(ctx context.Context) PolicyAccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleOutput)
}

// PolicyAccessRuleArrayInput is an input type that accepts PolicyAccessRuleArray and PolicyAccessRuleArrayOutput values.
// You can construct a concrete instance of `PolicyAccessRuleArrayInput` via:
//
//	PolicyAccessRuleArray{ PolicyAccessRuleArgs{...} }
type PolicyAccessRuleArrayInput interface {
	pulumi.Input

	ToPolicyAccessRuleArrayOutput() PolicyAccessRuleArrayOutput
	ToPolicyAccessRuleArrayOutputWithContext(context.Context) PolicyAccessRuleArrayOutput
}

type PolicyAccessRuleArray []PolicyAccessRuleInput

func (PolicyAccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessRule)(nil)).Elem()
}

func (i PolicyAccessRuleArray) ToPolicyAccessRuleArrayOutput() PolicyAccessRuleArrayOutput {
	return i.ToPolicyAccessRuleArrayOutputWithContext(context.Background())
}

func (i PolicyAccessRuleArray) ToPolicyAccessRuleArrayOutputWithContext(ctx context.Context) PolicyAccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleArrayOutput)
}

// PolicyAccessRuleMapInput is an input type that accepts PolicyAccessRuleMap and PolicyAccessRuleMapOutput values.
// You can construct a concrete instance of `PolicyAccessRuleMapInput` via:
//
//	PolicyAccessRuleMap{ "key": PolicyAccessRuleArgs{...} }
type PolicyAccessRuleMapInput interface {
	pulumi.Input

	ToPolicyAccessRuleMapOutput() PolicyAccessRuleMapOutput
	ToPolicyAccessRuleMapOutputWithContext(context.Context) PolicyAccessRuleMapOutput
}

type PolicyAccessRuleMap map[string]PolicyAccessRuleInput

func (PolicyAccessRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessRule)(nil)).Elem()
}

func (i PolicyAccessRuleMap) ToPolicyAccessRuleMapOutput() PolicyAccessRuleMapOutput {
	return i.ToPolicyAccessRuleMapOutputWithContext(context.Background())
}

func (i PolicyAccessRuleMap) ToPolicyAccessRuleMapOutputWithContext(ctx context.Context) PolicyAccessRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleMapOutput)
}

type PolicyAccessRuleOutput struct{ *pulumi.OutputState }

func (PolicyAccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessRule)(nil)).Elem()
}

func (o PolicyAccessRuleOutput) ToPolicyAccessRuleOutput() PolicyAccessRuleOutput {
	return o
}

func (o PolicyAccessRuleOutput) ToPolicyAccessRuleOutputWithContext(ctx context.Context) PolicyAccessRuleOutput {
	return o
}

// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
func (o PolicyAccessRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// This field defines the description of the server.
func (o PolicyAccessRuleOutput) ActionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.ActionId }).(pulumi.StringPtrOutput)
}

// List of app-connector IDs.
func (o PolicyAccessRuleOutput) AppConnectorGroups() PolicyAccessRuleAppConnectorGroupArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRule) PolicyAccessRuleAppConnectorGroupArrayOutput { return v.AppConnectorGroups }).(PolicyAccessRuleAppConnectorGroupArrayOutput)
}

// List of the server group IDs.
func (o PolicyAccessRuleOutput) AppServerGroups() PolicyAccessRuleAppServerGroupArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRule) PolicyAccessRuleAppServerGroupArrayOutput { return v.AppServerGroups }).(PolicyAccessRuleAppServerGroupArrayOutput)
}

func (o PolicyAccessRuleOutput) BypassDefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.BoolPtrOutput { return v.BypassDefaultRule }).(pulumi.BoolPtrOutput)
}

// This is for proviidng the set of conditions for the policy.
func (o PolicyAccessRuleOutput) Conditions() PolicyAccessRuleConditionArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRule) PolicyAccessRuleConditionArrayOutput { return v.Conditions }).(PolicyAccessRuleConditionArrayOutput)
}

// This is for providing a customer message for the user.
func (o PolicyAccessRuleOutput) CustomMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.CustomMsg }).(pulumi.StringPtrOutput)
}

// This is for providing a customer message for the user.
func (o PolicyAccessRuleOutput) DefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.BoolPtrOutput { return v.DefaultRule }).(pulumi.BoolPtrOutput)
}

// This is the description of the access policy rule.
func (o PolicyAccessRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessRuleOutput) LssDefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.BoolPtrOutput { return v.LssDefaultRule }).(pulumi.BoolPtrOutput)
}

func (o PolicyAccessRuleOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// This is the name of the policy rule.
func (o PolicyAccessRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Supported values: `AND`, `OR`
func (o PolicyAccessRuleOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.Operator }).(pulumi.StringOutput)
}

// - (String) Use zpa*policy*type data source to retrieve the necessary policy Set ID `policySetId`
// > **NOTE** As of v3.2.0 the `policySetId` attribute is now optional, and will be automatically determined based on the policy type being configured. The attribute is being kept for backwards compatibility, but can be safely removed from existing configurations.
func (o PolicyAccessRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) ReauthDefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.BoolPtrOutput { return v.ReauthDefaultRule }).(pulumi.BoolPtrOutput)
}

func (o PolicyAccessRuleOutput) ReauthIdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.ReauthIdleTimeout }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessRuleOutput) ReauthTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringPtrOutput { return v.ReauthTimeout }).(pulumi.StringPtrOutput)
}

// Deprecated: The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`
func (o PolicyAccessRuleOutput) RuleOrder() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.RuleOrder }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) ZpnCbiProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.ZpnCbiProfileId }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) ZpnInspectionProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.ZpnInspectionProfileId }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleOutput) ZpnIsolationProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRule) pulumi.StringOutput { return v.ZpnIsolationProfileId }).(pulumi.StringOutput)
}

type PolicyAccessRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessRule)(nil)).Elem()
}

func (o PolicyAccessRuleArrayOutput) ToPolicyAccessRuleArrayOutput() PolicyAccessRuleArrayOutput {
	return o
}

func (o PolicyAccessRuleArrayOutput) ToPolicyAccessRuleArrayOutputWithContext(ctx context.Context) PolicyAccessRuleArrayOutput {
	return o
}

func (o PolicyAccessRuleArrayOutput) Index(i pulumi.IntInput) PolicyAccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyAccessRule {
		return vs[0].([]*PolicyAccessRule)[vs[1].(int)]
	}).(PolicyAccessRuleOutput)
}

type PolicyAccessRuleMapOutput struct{ *pulumi.OutputState }

func (PolicyAccessRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessRule)(nil)).Elem()
}

func (o PolicyAccessRuleMapOutput) ToPolicyAccessRuleMapOutput() PolicyAccessRuleMapOutput {
	return o
}

func (o PolicyAccessRuleMapOutput) ToPolicyAccessRuleMapOutputWithContext(ctx context.Context) PolicyAccessRuleMapOutput {
	return o
}

func (o PolicyAccessRuleMapOutput) MapIndex(k pulumi.StringInput) PolicyAccessRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyAccessRule {
		return vs[0].(map[string]*PolicyAccessRule)[vs[1].(string)]
	}).(PolicyAccessRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleInput)(nil)).Elem(), &PolicyAccessRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleArrayInput)(nil)).Elem(), PolicyAccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleMapInput)(nil)).Elem(), PolicyAccessRuleMap{})
	pulumi.RegisterOutputType(PolicyAccessRuleOutput{})
	pulumi.RegisterOutputType(PolicyAccessRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyAccessRuleMapOutput{})
}
