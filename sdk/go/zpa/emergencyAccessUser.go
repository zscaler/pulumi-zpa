// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/configuring-emergency-access)
// * [API documentation](https://help.zscaler.com/zpa/configuring-emergency-access-users-using-api)
//
// The **zpa_emergency_access_user** Create emergency access users with permissions limited to privileged approvals in the specified IdP that is enabled for emergency access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.NewEmergencyAccessUser(ctx, "this", &zpa.EmergencyAccessUserArgs{
//				EmailId:   pulumi.String("usertest@example.com"),
//				FirstName: pulumi.String("User"),
//				LastName:  pulumi.String("Test"),
//				UserId:    pulumi.String("usertest"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `zpa_emergency_access_user` do not support resource import.
type EmergencyAccessUser struct {
	pulumi.CustomResourceState

	// The email address of the emergency access user, as provided by the admin
	EmailId pulumi.StringPtrOutput `pulumi:"emailId"`
	// The first name of the emergency access user
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// The last name of the emergency access user, as provided by the admin
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// The unique identifier of the emergency access user
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewEmergencyAccessUser registers a new resource with the given unique name, arguments, and options.
func NewEmergencyAccessUser(ctx *pulumi.Context,
	name string, args *EmergencyAccessUserArgs, opts ...pulumi.ResourceOption) (*EmergencyAccessUser, error) {
	if args == nil {
		args = &EmergencyAccessUserArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmergencyAccessUser
	err := ctx.RegisterResource("zpa:index/emergencyAccessUser:EmergencyAccessUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmergencyAccessUser gets an existing EmergencyAccessUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmergencyAccessUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmergencyAccessUserState, opts ...pulumi.ResourceOption) (*EmergencyAccessUser, error) {
	var resource EmergencyAccessUser
	err := ctx.ReadResource("zpa:index/emergencyAccessUser:EmergencyAccessUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmergencyAccessUser resources.
type emergencyAccessUserState struct {
	// The email address of the emergency access user, as provided by the admin
	EmailId *string `pulumi:"emailId"`
	// The first name of the emergency access user
	FirstName *string `pulumi:"firstName"`
	// The last name of the emergency access user, as provided by the admin
	LastName *string `pulumi:"lastName"`
	// The unique identifier of the emergency access user
	UserId *string `pulumi:"userId"`
}

type EmergencyAccessUserState struct {
	// The email address of the emergency access user, as provided by the admin
	EmailId pulumi.StringPtrInput
	// The first name of the emergency access user
	FirstName pulumi.StringPtrInput
	// The last name of the emergency access user, as provided by the admin
	LastName pulumi.StringPtrInput
	// The unique identifier of the emergency access user
	UserId pulumi.StringPtrInput
}

func (EmergencyAccessUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*emergencyAccessUserState)(nil)).Elem()
}

type emergencyAccessUserArgs struct {
	// The email address of the emergency access user, as provided by the admin
	EmailId *string `pulumi:"emailId"`
	// The first name of the emergency access user
	FirstName *string `pulumi:"firstName"`
	// The last name of the emergency access user, as provided by the admin
	LastName *string `pulumi:"lastName"`
	// The unique identifier of the emergency access user
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a EmergencyAccessUser resource.
type EmergencyAccessUserArgs struct {
	// The email address of the emergency access user, as provided by the admin
	EmailId pulumi.StringPtrInput
	// The first name of the emergency access user
	FirstName pulumi.StringPtrInput
	// The last name of the emergency access user, as provided by the admin
	LastName pulumi.StringPtrInput
	// The unique identifier of the emergency access user
	UserId pulumi.StringPtrInput
}

func (EmergencyAccessUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emergencyAccessUserArgs)(nil)).Elem()
}

type EmergencyAccessUserInput interface {
	pulumi.Input

	ToEmergencyAccessUserOutput() EmergencyAccessUserOutput
	ToEmergencyAccessUserOutputWithContext(ctx context.Context) EmergencyAccessUserOutput
}

func (*EmergencyAccessUser) ElementType() reflect.Type {
	return reflect.TypeOf((**EmergencyAccessUser)(nil)).Elem()
}

func (i *EmergencyAccessUser) ToEmergencyAccessUserOutput() EmergencyAccessUserOutput {
	return i.ToEmergencyAccessUserOutputWithContext(context.Background())
}

func (i *EmergencyAccessUser) ToEmergencyAccessUserOutputWithContext(ctx context.Context) EmergencyAccessUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmergencyAccessUserOutput)
}

// EmergencyAccessUserArrayInput is an input type that accepts EmergencyAccessUserArray and EmergencyAccessUserArrayOutput values.
// You can construct a concrete instance of `EmergencyAccessUserArrayInput` via:
//
//	EmergencyAccessUserArray{ EmergencyAccessUserArgs{...} }
type EmergencyAccessUserArrayInput interface {
	pulumi.Input

	ToEmergencyAccessUserArrayOutput() EmergencyAccessUserArrayOutput
	ToEmergencyAccessUserArrayOutputWithContext(context.Context) EmergencyAccessUserArrayOutput
}

type EmergencyAccessUserArray []EmergencyAccessUserInput

func (EmergencyAccessUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmergencyAccessUser)(nil)).Elem()
}

func (i EmergencyAccessUserArray) ToEmergencyAccessUserArrayOutput() EmergencyAccessUserArrayOutput {
	return i.ToEmergencyAccessUserArrayOutputWithContext(context.Background())
}

func (i EmergencyAccessUserArray) ToEmergencyAccessUserArrayOutputWithContext(ctx context.Context) EmergencyAccessUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmergencyAccessUserArrayOutput)
}

// EmergencyAccessUserMapInput is an input type that accepts EmergencyAccessUserMap and EmergencyAccessUserMapOutput values.
// You can construct a concrete instance of `EmergencyAccessUserMapInput` via:
//
//	EmergencyAccessUserMap{ "key": EmergencyAccessUserArgs{...} }
type EmergencyAccessUserMapInput interface {
	pulumi.Input

	ToEmergencyAccessUserMapOutput() EmergencyAccessUserMapOutput
	ToEmergencyAccessUserMapOutputWithContext(context.Context) EmergencyAccessUserMapOutput
}

type EmergencyAccessUserMap map[string]EmergencyAccessUserInput

func (EmergencyAccessUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmergencyAccessUser)(nil)).Elem()
}

func (i EmergencyAccessUserMap) ToEmergencyAccessUserMapOutput() EmergencyAccessUserMapOutput {
	return i.ToEmergencyAccessUserMapOutputWithContext(context.Background())
}

func (i EmergencyAccessUserMap) ToEmergencyAccessUserMapOutputWithContext(ctx context.Context) EmergencyAccessUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmergencyAccessUserMapOutput)
}

type EmergencyAccessUserOutput struct{ *pulumi.OutputState }

func (EmergencyAccessUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmergencyAccessUser)(nil)).Elem()
}

func (o EmergencyAccessUserOutput) ToEmergencyAccessUserOutput() EmergencyAccessUserOutput {
	return o
}

func (o EmergencyAccessUserOutput) ToEmergencyAccessUserOutputWithContext(ctx context.Context) EmergencyAccessUserOutput {
	return o
}

// The email address of the emergency access user, as provided by the admin
func (o EmergencyAccessUserOutput) EmailId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmergencyAccessUser) pulumi.StringPtrOutput { return v.EmailId }).(pulumi.StringPtrOutput)
}

// The first name of the emergency access user
func (o EmergencyAccessUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmergencyAccessUser) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// The last name of the emergency access user, as provided by the admin
func (o EmergencyAccessUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *EmergencyAccessUser) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// The unique identifier of the emergency access user
func (o EmergencyAccessUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmergencyAccessUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type EmergencyAccessUserArrayOutput struct{ *pulumi.OutputState }

func (EmergencyAccessUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmergencyAccessUser)(nil)).Elem()
}

func (o EmergencyAccessUserArrayOutput) ToEmergencyAccessUserArrayOutput() EmergencyAccessUserArrayOutput {
	return o
}

func (o EmergencyAccessUserArrayOutput) ToEmergencyAccessUserArrayOutputWithContext(ctx context.Context) EmergencyAccessUserArrayOutput {
	return o
}

func (o EmergencyAccessUserArrayOutput) Index(i pulumi.IntInput) EmergencyAccessUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmergencyAccessUser {
		return vs[0].([]*EmergencyAccessUser)[vs[1].(int)]
	}).(EmergencyAccessUserOutput)
}

type EmergencyAccessUserMapOutput struct{ *pulumi.OutputState }

func (EmergencyAccessUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmergencyAccessUser)(nil)).Elem()
}

func (o EmergencyAccessUserMapOutput) ToEmergencyAccessUserMapOutput() EmergencyAccessUserMapOutput {
	return o
}

func (o EmergencyAccessUserMapOutput) ToEmergencyAccessUserMapOutputWithContext(ctx context.Context) EmergencyAccessUserMapOutput {
	return o
}

func (o EmergencyAccessUserMapOutput) MapIndex(k pulumi.StringInput) EmergencyAccessUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmergencyAccessUser {
		return vs[0].(map[string]*EmergencyAccessUser)[vs[1].(string)]
	}).(EmergencyAccessUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmergencyAccessUserInput)(nil)).Elem(), &EmergencyAccessUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmergencyAccessUserArrayInput)(nil)).Elem(), EmergencyAccessUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmergencyAccessUserMapInput)(nil)).Elem(), EmergencyAccessUserMap{})
	pulumi.RegisterOutputType(EmergencyAccessUserOutput{})
	pulumi.RegisterOutputType(EmergencyAccessUserArrayOutput{})
	pulumi.RegisterOutputType(EmergencyAccessUserMapOutput{})
}
