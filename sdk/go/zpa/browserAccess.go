// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

type BrowserAccess struct {
	pulumi.CustomResourceState

	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrOutput                `pulumi:"bypassType"`
	ClientlessApps BrowserAccessClientlessAppArrayOutput `pulumi:"clientlessApps"`
	ConfigSpace    pulumi.StringPtrOutput                `pulumi:"configSpace"`
	// Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domains and IPs.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrOutput   `pulumi:"doubleEncrypt"`
	Enabled         pulumi.BoolOutput      `pulumi:"enabled"`
	FqdnDnsCheck    pulumi.BoolPtrOutput   `pulumi:"fqdnDnsCheck"`
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrOutput `pulumi:"healthReporting"`
	IcmpAccessType  pulumi.StringPtrOutput `pulumi:"icmpAccessType"`
	IpAnchored      pulumi.BoolPtrOutput   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrOutput `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig pulumi.BoolPtrOutput `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        pulumi.StringOutput  `pulumi:"microtenantId"`
	// Name of the application.
	Name                      pulumi.StringOutput  `pulumi:"name"`
	PassiveHealthEnabled      pulumi.BoolOutput    `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            pulumi.StringOutput  `pulumi:"segmentGroupId"`
	SegmentGroupName          pulumi.StringOutput  `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp pulumi.BoolPtrOutput `pulumi:"selectConnectorCloseToApp"`
	// List of the server group IDs.
	ServerGroups BrowserAccessServerGroupArrayOutput `pulumi:"serverGroups"`
	TcpKeepAlive pulumi.StringOutput                 `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange BrowserAccessTcpPortRangeArrayOutput `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayOutput `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange BrowserAccessUdpPortRangeArrayOutput `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayOutput `pulumi:"udpPortRanges"`
	UseInDrMode   pulumi.BoolPtrOutput     `pulumi:"useInDrMode"`
}

// NewBrowserAccess registers a new resource with the given unique name, arguments, and options.
func NewBrowserAccess(ctx *pulumi.Context,
	name string, args *BrowserAccessArgs, opts ...pulumi.ResourceOption) (*BrowserAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientlessApps == nil {
		return nil, errors.New("invalid value for required argument 'ClientlessApps'")
	}
	if args.DomainNames == nil {
		return nil, errors.New("invalid value for required argument 'DomainNames'")
	}
	if args.SegmentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserAccess
	err := ctx.RegisterResource("zpa:index/browserAccess:BrowserAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserAccess gets an existing BrowserAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserAccessState, opts ...pulumi.ResourceOption) (*BrowserAccess, error) {
	var resource BrowserAccess
	err := ctx.ReadResource("zpa:index/browserAccess:BrowserAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserAccess resources.
type browserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                      `pulumi:"bypassType"`
	ClientlessApps []BrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                      `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	FqdnDnsCheck    *bool   `pulumi:"fqdnDnsCheck"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IcmpAccessType  *string `pulumi:"icmpAccessType"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       *bool   `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig *bool   `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        *string `pulumi:"microtenantId"`
	// Name of the application.
	Name                      *string `pulumi:"name"`
	PassiveHealthEnabled      *bool   `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            *string `pulumi:"segmentGroupId"`
	SegmentGroupName          *string `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp *bool   `pulumi:"selectConnectorCloseToApp"`
	// List of the server group IDs.
	ServerGroups []BrowserAccessServerGroup `pulumi:"serverGroups"`
	TcpKeepAlive *string                    `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange []BrowserAccessTcpPortRange `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange []BrowserAccessUdpPortRange `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
	UseInDrMode   *bool    `pulumi:"useInDrMode"`
}

type BrowserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps BrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	FqdnDnsCheck    pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IcmpAccessType  pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrInput
	IsIncompleteDrConfig pulumi.BoolPtrInput
	MicrotenantId        pulumi.StringPtrInput
	// Name of the application.
	Name                      pulumi.StringPtrInput
	PassiveHealthEnabled      pulumi.BoolPtrInput
	SegmentGroupId            pulumi.StringPtrInput
	SegmentGroupName          pulumi.StringPtrInput
	SelectConnectorCloseToApp pulumi.BoolPtrInput
	// List of the server group IDs.
	ServerGroups BrowserAccessServerGroupArrayInput
	TcpKeepAlive pulumi.StringPtrInput
	// tcp port range
	TcpPortRange BrowserAccessTcpPortRangeArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// udp port range
	UdpPortRange BrowserAccessUdpPortRangeArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
	UseInDrMode   pulumi.BoolPtrInput
}

func (BrowserAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserAccessState)(nil)).Elem()
}

type browserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                      `pulumi:"bypassType"`
	ClientlessApps []BrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                      `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	FqdnDnsCheck    *bool   `pulumi:"fqdnDnsCheck"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IcmpAccessType  *string `pulumi:"icmpAccessType"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       *bool   `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig *bool   `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        *string `pulumi:"microtenantId"`
	// Name of the application.
	Name                      *string `pulumi:"name"`
	PassiveHealthEnabled      *bool   `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            string  `pulumi:"segmentGroupId"`
	SegmentGroupName          *string `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp *bool   `pulumi:"selectConnectorCloseToApp"`
	// List of the server group IDs.
	ServerGroups []BrowserAccessServerGroup `pulumi:"serverGroups"`
	TcpKeepAlive *string                    `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange []BrowserAccessTcpPortRange `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange []BrowserAccessUdpPortRange `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
	UseInDrMode   *bool    `pulumi:"useInDrMode"`
}

// The set of arguments for constructing a BrowserAccess resource.
type BrowserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps BrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	FqdnDnsCheck    pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IcmpAccessType  pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrInput
	IsIncompleteDrConfig pulumi.BoolPtrInput
	MicrotenantId        pulumi.StringPtrInput
	// Name of the application.
	Name                      pulumi.StringPtrInput
	PassiveHealthEnabled      pulumi.BoolPtrInput
	SegmentGroupId            pulumi.StringInput
	SegmentGroupName          pulumi.StringPtrInput
	SelectConnectorCloseToApp pulumi.BoolPtrInput
	// List of the server group IDs.
	ServerGroups BrowserAccessServerGroupArrayInput
	TcpKeepAlive pulumi.StringPtrInput
	// tcp port range
	TcpPortRange BrowserAccessTcpPortRangeArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// udp port range
	UdpPortRange BrowserAccessUdpPortRangeArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
	UseInDrMode   pulumi.BoolPtrInput
}

func (BrowserAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserAccessArgs)(nil)).Elem()
}

type BrowserAccessInput interface {
	pulumi.Input

	ToBrowserAccessOutput() BrowserAccessOutput
	ToBrowserAccessOutputWithContext(ctx context.Context) BrowserAccessOutput
}

func (*BrowserAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserAccess)(nil)).Elem()
}

func (i *BrowserAccess) ToBrowserAccessOutput() BrowserAccessOutput {
	return i.ToBrowserAccessOutputWithContext(context.Background())
}

func (i *BrowserAccess) ToBrowserAccessOutputWithContext(ctx context.Context) BrowserAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserAccessOutput)
}

// BrowserAccessArrayInput is an input type that accepts BrowserAccessArray and BrowserAccessArrayOutput values.
// You can construct a concrete instance of `BrowserAccessArrayInput` via:
//
//	BrowserAccessArray{ BrowserAccessArgs{...} }
type BrowserAccessArrayInput interface {
	pulumi.Input

	ToBrowserAccessArrayOutput() BrowserAccessArrayOutput
	ToBrowserAccessArrayOutputWithContext(context.Context) BrowserAccessArrayOutput
}

type BrowserAccessArray []BrowserAccessInput

func (BrowserAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserAccess)(nil)).Elem()
}

func (i BrowserAccessArray) ToBrowserAccessArrayOutput() BrowserAccessArrayOutput {
	return i.ToBrowserAccessArrayOutputWithContext(context.Background())
}

func (i BrowserAccessArray) ToBrowserAccessArrayOutputWithContext(ctx context.Context) BrowserAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserAccessArrayOutput)
}

// BrowserAccessMapInput is an input type that accepts BrowserAccessMap and BrowserAccessMapOutput values.
// You can construct a concrete instance of `BrowserAccessMapInput` via:
//
//	BrowserAccessMap{ "key": BrowserAccessArgs{...} }
type BrowserAccessMapInput interface {
	pulumi.Input

	ToBrowserAccessMapOutput() BrowserAccessMapOutput
	ToBrowserAccessMapOutputWithContext(context.Context) BrowserAccessMapOutput
}

type BrowserAccessMap map[string]BrowserAccessInput

func (BrowserAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserAccess)(nil)).Elem()
}

func (i BrowserAccessMap) ToBrowserAccessMapOutput() BrowserAccessMapOutput {
	return i.ToBrowserAccessMapOutputWithContext(context.Background())
}

func (i BrowserAccessMap) ToBrowserAccessMapOutputWithContext(ctx context.Context) BrowserAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserAccessMapOutput)
}

type BrowserAccessOutput struct{ *pulumi.OutputState }

func (BrowserAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserAccess)(nil)).Elem()
}

func (o BrowserAccessOutput) ToBrowserAccessOutput() BrowserAccessOutput {
	return o
}

func (o BrowserAccessOutput) ToBrowserAccessOutputWithContext(ctx context.Context) BrowserAccessOutput {
	return o
}

// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
// The value NEVER indicates the use of the client forwarding policy.
func (o BrowserAccessOutput) BypassType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.BypassType }).(pulumi.StringPtrOutput)
}

func (o BrowserAccessOutput) ClientlessApps() BrowserAccessClientlessAppArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) BrowserAccessClientlessAppArrayOutput { return v.ClientlessApps }).(BrowserAccessClientlessAppArrayOutput)
}

func (o BrowserAccessOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// Description of the application.
func (o BrowserAccessOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domains and IPs.
func (o BrowserAccessOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// Whether Double Encryption is enabled or disabled for the app.
func (o BrowserAccessOutput) DoubleEncrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.DoubleEncrypt }).(pulumi.BoolPtrOutput)
}

func (o BrowserAccessOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o BrowserAccessOutput) FqdnDnsCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.FqdnDnsCheck }).(pulumi.BoolPtrOutput)
}

func (o BrowserAccessOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
func (o BrowserAccessOutput) HealthReporting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.HealthReporting }).(pulumi.StringPtrOutput)
}

func (o BrowserAccessOutput) IcmpAccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringPtrOutput { return v.IcmpAccessType }).(pulumi.StringPtrOutput)
}

func (o BrowserAccessOutput) IpAnchored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.IpAnchored }).(pulumi.BoolPtrOutput)
}

// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
// connectors.
func (o BrowserAccessOutput) IsCnameEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.IsCnameEnabled }).(pulumi.BoolPtrOutput)
}

func (o BrowserAccessOutput) IsIncompleteDrConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.IsIncompleteDrConfig }).(pulumi.BoolPtrOutput)
}

func (o BrowserAccessOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// Name of the application.
func (o BrowserAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BrowserAccessOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolOutput { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

func (o BrowserAccessOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringOutput { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o BrowserAccessOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringOutput { return v.SegmentGroupName }).(pulumi.StringOutput)
}

func (o BrowserAccessOutput) SelectConnectorCloseToApp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.SelectConnectorCloseToApp }).(pulumi.BoolPtrOutput)
}

// List of the server group IDs.
func (o BrowserAccessOutput) ServerGroups() BrowserAccessServerGroupArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) BrowserAccessServerGroupArrayOutput { return v.ServerGroups }).(BrowserAccessServerGroupArrayOutput)
}

func (o BrowserAccessOutput) TcpKeepAlive() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringOutput { return v.TcpKeepAlive }).(pulumi.StringOutput)
}

// tcp port range
func (o BrowserAccessOutput) TcpPortRange() BrowserAccessTcpPortRangeArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) BrowserAccessTcpPortRangeArrayOutput { return v.TcpPortRange }).(BrowserAccessTcpPortRangeArrayOutput)
}

// TCP port ranges used to access the app.
func (o BrowserAccessOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringArrayOutput { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// udp port range
func (o BrowserAccessOutput) UdpPortRange() BrowserAccessUdpPortRangeArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) BrowserAccessUdpPortRangeArrayOutput { return v.UdpPortRange }).(BrowserAccessUdpPortRangeArrayOutput)
}

// UDP port ranges used to access the app.
func (o BrowserAccessOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.StringArrayOutput { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

func (o BrowserAccessOutput) UseInDrMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BrowserAccess) pulumi.BoolPtrOutput { return v.UseInDrMode }).(pulumi.BoolPtrOutput)
}

type BrowserAccessArrayOutput struct{ *pulumi.OutputState }

func (BrowserAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserAccess)(nil)).Elem()
}

func (o BrowserAccessArrayOutput) ToBrowserAccessArrayOutput() BrowserAccessArrayOutput {
	return o
}

func (o BrowserAccessArrayOutput) ToBrowserAccessArrayOutputWithContext(ctx context.Context) BrowserAccessArrayOutput {
	return o
}

func (o BrowserAccessArrayOutput) Index(i pulumi.IntInput) BrowserAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserAccess {
		return vs[0].([]*BrowserAccess)[vs[1].(int)]
	}).(BrowserAccessOutput)
}

type BrowserAccessMapOutput struct{ *pulumi.OutputState }

func (BrowserAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserAccess)(nil)).Elem()
}

func (o BrowserAccessMapOutput) ToBrowserAccessMapOutput() BrowserAccessMapOutput {
	return o
}

func (o BrowserAccessMapOutput) ToBrowserAccessMapOutputWithContext(ctx context.Context) BrowserAccessMapOutput {
	return o
}

func (o BrowserAccessMapOutput) MapIndex(k pulumi.StringInput) BrowserAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserAccess {
		return vs[0].(map[string]*BrowserAccess)[vs[1].(string)]
	}).(BrowserAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserAccessInput)(nil)).Elem(), &BrowserAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserAccessArrayInput)(nil)).Elem(), BrowserAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserAccessMapInput)(nil)).Elem(), BrowserAccessMap{})
	pulumi.RegisterOutputType(BrowserAccessOutput{})
	pulumi.RegisterOutputType(BrowserAccessArrayOutput{})
	pulumi.RegisterOutputType(BrowserAccessMapOutput{})
}
