// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// Deprecated: zpa.index/praconsolecontroller.PraConsoleController has been deprecated in favor of zpa.index/praconsole.PRAConsole
type PraConsoleController struct {
	pulumi.CustomResourceState

	// The description of the privileged console
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether or not the privileged console is enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The privileged console icon. The icon image is converted to base64 encoded text format
	IconText pulumi.StringOutput `pulumi:"iconText"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the privileged console
	Name           pulumi.StringOutput                      `pulumi:"name"`
	PraApplication PraConsoleControllerPraApplicationOutput `pulumi:"praApplication"`
	PraPortals     PraConsoleControllerPraPortalArrayOutput `pulumi:"praPortals"`
}

// NewPraConsoleController registers a new resource with the given unique name, arguments, and options.
func NewPraConsoleController(ctx *pulumi.Context,
	name string, args *PraConsoleControllerArgs, opts ...pulumi.ResourceOption) (*PraConsoleController, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PraApplication == nil {
		return nil, errors.New("invalid value for required argument 'PraApplication'")
	}
	if args.PraPortals == nil {
		return nil, errors.New("invalid value for required argument 'PraPortals'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PraConsoleController
	err := ctx.RegisterResource("zpa:index/praConsoleController:PraConsoleController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPraConsoleController gets an existing PraConsoleController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPraConsoleController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PraConsoleControllerState, opts ...pulumi.ResourceOption) (*PraConsoleController, error) {
	var resource PraConsoleController
	err := ctx.ReadResource("zpa:index/praConsoleController:PraConsoleController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PraConsoleController resources.
type praConsoleControllerState struct {
	// The description of the privileged console
	Description *string `pulumi:"description"`
	// Whether or not the privileged console is enabled
	Enabled *bool `pulumi:"enabled"`
	// The privileged console icon. The icon image is converted to base64 encoded text format
	IconText *string `pulumi:"iconText"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged console
	Name           *string                             `pulumi:"name"`
	PraApplication *PraConsoleControllerPraApplication `pulumi:"praApplication"`
	PraPortals     []PraConsoleControllerPraPortal     `pulumi:"praPortals"`
}

type PraConsoleControllerState struct {
	// The description of the privileged console
	Description pulumi.StringPtrInput
	// Whether or not the privileged console is enabled
	Enabled pulumi.BoolPtrInput
	// The privileged console icon. The icon image is converted to base64 encoded text format
	IconText pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged console
	Name           pulumi.StringPtrInput
	PraApplication PraConsoleControllerPraApplicationPtrInput
	PraPortals     PraConsoleControllerPraPortalArrayInput
}

func (PraConsoleControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*praConsoleControllerState)(nil)).Elem()
}

type praConsoleControllerArgs struct {
	// The description of the privileged console
	Description *string `pulumi:"description"`
	// Whether or not the privileged console is enabled
	Enabled *bool `pulumi:"enabled"`
	// The privileged console icon. The icon image is converted to base64 encoded text format
	IconText *string `pulumi:"iconText"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged console
	Name           *string                            `pulumi:"name"`
	PraApplication PraConsoleControllerPraApplication `pulumi:"praApplication"`
	PraPortals     []PraConsoleControllerPraPortal    `pulumi:"praPortals"`
}

// The set of arguments for constructing a PraConsoleController resource.
type PraConsoleControllerArgs struct {
	// The description of the privileged console
	Description pulumi.StringPtrInput
	// Whether or not the privileged console is enabled
	Enabled pulumi.BoolPtrInput
	// The privileged console icon. The icon image is converted to base64 encoded text format
	IconText pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged console
	Name           pulumi.StringPtrInput
	PraApplication PraConsoleControllerPraApplicationInput
	PraPortals     PraConsoleControllerPraPortalArrayInput
}

func (PraConsoleControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*praConsoleControllerArgs)(nil)).Elem()
}

type PraConsoleControllerInput interface {
	pulumi.Input

	ToPraConsoleControllerOutput() PraConsoleControllerOutput
	ToPraConsoleControllerOutputWithContext(ctx context.Context) PraConsoleControllerOutput
}

func (*PraConsoleController) ElementType() reflect.Type {
	return reflect.TypeOf((**PraConsoleController)(nil)).Elem()
}

func (i *PraConsoleController) ToPraConsoleControllerOutput() PraConsoleControllerOutput {
	return i.ToPraConsoleControllerOutputWithContext(context.Background())
}

func (i *PraConsoleController) ToPraConsoleControllerOutputWithContext(ctx context.Context) PraConsoleControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraConsoleControllerOutput)
}

// PraConsoleControllerArrayInput is an input type that accepts PraConsoleControllerArray and PraConsoleControllerArrayOutput values.
// You can construct a concrete instance of `PraConsoleControllerArrayInput` via:
//
//	PraConsoleControllerArray{ PraConsoleControllerArgs{...} }
type PraConsoleControllerArrayInput interface {
	pulumi.Input

	ToPraConsoleControllerArrayOutput() PraConsoleControllerArrayOutput
	ToPraConsoleControllerArrayOutputWithContext(context.Context) PraConsoleControllerArrayOutput
}

type PraConsoleControllerArray []PraConsoleControllerInput

func (PraConsoleControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraConsoleController)(nil)).Elem()
}

func (i PraConsoleControllerArray) ToPraConsoleControllerArrayOutput() PraConsoleControllerArrayOutput {
	return i.ToPraConsoleControllerArrayOutputWithContext(context.Background())
}

func (i PraConsoleControllerArray) ToPraConsoleControllerArrayOutputWithContext(ctx context.Context) PraConsoleControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraConsoleControllerArrayOutput)
}

// PraConsoleControllerMapInput is an input type that accepts PraConsoleControllerMap and PraConsoleControllerMapOutput values.
// You can construct a concrete instance of `PraConsoleControllerMapInput` via:
//
//	PraConsoleControllerMap{ "key": PraConsoleControllerArgs{...} }
type PraConsoleControllerMapInput interface {
	pulumi.Input

	ToPraConsoleControllerMapOutput() PraConsoleControllerMapOutput
	ToPraConsoleControllerMapOutputWithContext(context.Context) PraConsoleControllerMapOutput
}

type PraConsoleControllerMap map[string]PraConsoleControllerInput

func (PraConsoleControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraConsoleController)(nil)).Elem()
}

func (i PraConsoleControllerMap) ToPraConsoleControllerMapOutput() PraConsoleControllerMapOutput {
	return i.ToPraConsoleControllerMapOutputWithContext(context.Background())
}

func (i PraConsoleControllerMap) ToPraConsoleControllerMapOutputWithContext(ctx context.Context) PraConsoleControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraConsoleControllerMapOutput)
}

type PraConsoleControllerOutput struct{ *pulumi.OutputState }

func (PraConsoleControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PraConsoleController)(nil)).Elem()
}

func (o PraConsoleControllerOutput) ToPraConsoleControllerOutput() PraConsoleControllerOutput {
	return o
}

func (o PraConsoleControllerOutput) ToPraConsoleControllerOutputWithContext(ctx context.Context) PraConsoleControllerOutput {
	return o
}

// The description of the privileged console
func (o PraConsoleControllerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PraConsoleController) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether or not the privileged console is enabled
func (o PraConsoleControllerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PraConsoleController) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The privileged console icon. The icon image is converted to base64 encoded text format
func (o PraConsoleControllerOutput) IconText() pulumi.StringOutput {
	return o.ApplyT(func(v *PraConsoleController) pulumi.StringOutput { return v.IconText }).(pulumi.StringOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PraConsoleControllerOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PraConsoleController) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the privileged console
func (o PraConsoleControllerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PraConsoleController) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PraConsoleControllerOutput) PraApplication() PraConsoleControllerPraApplicationOutput {
	return o.ApplyT(func(v *PraConsoleController) PraConsoleControllerPraApplicationOutput { return v.PraApplication }).(PraConsoleControllerPraApplicationOutput)
}

func (o PraConsoleControllerOutput) PraPortals() PraConsoleControllerPraPortalArrayOutput {
	return o.ApplyT(func(v *PraConsoleController) PraConsoleControllerPraPortalArrayOutput { return v.PraPortals }).(PraConsoleControllerPraPortalArrayOutput)
}

type PraConsoleControllerArrayOutput struct{ *pulumi.OutputState }

func (PraConsoleControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraConsoleController)(nil)).Elem()
}

func (o PraConsoleControllerArrayOutput) ToPraConsoleControllerArrayOutput() PraConsoleControllerArrayOutput {
	return o
}

func (o PraConsoleControllerArrayOutput) ToPraConsoleControllerArrayOutputWithContext(ctx context.Context) PraConsoleControllerArrayOutput {
	return o
}

func (o PraConsoleControllerArrayOutput) Index(i pulumi.IntInput) PraConsoleControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PraConsoleController {
		return vs[0].([]*PraConsoleController)[vs[1].(int)]
	}).(PraConsoleControllerOutput)
}

type PraConsoleControllerMapOutput struct{ *pulumi.OutputState }

func (PraConsoleControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraConsoleController)(nil)).Elem()
}

func (o PraConsoleControllerMapOutput) ToPraConsoleControllerMapOutput() PraConsoleControllerMapOutput {
	return o
}

func (o PraConsoleControllerMapOutput) ToPraConsoleControllerMapOutputWithContext(ctx context.Context) PraConsoleControllerMapOutput {
	return o
}

func (o PraConsoleControllerMapOutput) MapIndex(k pulumi.StringInput) PraConsoleControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PraConsoleController {
		return vs[0].(map[string]*PraConsoleController)[vs[1].(string)]
	}).(PraConsoleControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PraConsoleControllerInput)(nil)).Elem(), &PraConsoleController{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraConsoleControllerArrayInput)(nil)).Elem(), PraConsoleControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraConsoleControllerMapInput)(nil)).Elem(), PraConsoleControllerMap{})
	pulumi.RegisterOutputType(PraConsoleControllerOutput{})
	pulumi.RegisterOutputType(PraConsoleControllerArrayOutput{})
	pulumi.RegisterOutputType(PraConsoleControllerMapOutput{})
}
