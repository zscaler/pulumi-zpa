// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// Deprecated: zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential
type PraCredentialController struct {
	pulumi.CustomResourceState

	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrOutput `pulumi:"credentialType"`
	// The description of the privileged credential
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name pulumi.StringOutput `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrOutput `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewPraCredentialController registers a new resource with the given unique name, arguments, and options.
func NewPraCredentialController(ctx *pulumi.Context,
	name string, args *PraCredentialControllerArgs, opts ...pulumi.ResourceOption) (*PraCredentialController, error) {
	if args == nil {
		args = &PraCredentialControllerArgs{}
	}

	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
		"password",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PraCredentialController
	err := ctx.RegisterResource("zpa:index/praCredentialController:PraCredentialController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPraCredentialController gets an existing PraCredentialController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPraCredentialController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PraCredentialControllerState, opts ...pulumi.ResourceOption) (*PraCredentialController, error) {
	var resource PraCredentialController
	err := ctx.ReadResource("zpa:index/praCredentialController:PraCredentialController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PraCredentialController resources.
type praCredentialControllerState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// The description of the privileged credential
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase *string `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password *string `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey *string `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain *string `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username *string `pulumi:"username"`
}

type PraCredentialControllerState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// The description of the privileged credential
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrInput
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrInput
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrInput
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrInput
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrInput
}

func (PraCredentialControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*praCredentialControllerState)(nil)).Elem()
}

type praCredentialControllerArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// The description of the privileged credential
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase *string `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password *string `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey *string `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain *string `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a PraCredentialController resource.
type PraCredentialControllerArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// The description of the privileged credential
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrInput
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrInput
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrInput
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrInput
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrInput
}

func (PraCredentialControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*praCredentialControllerArgs)(nil)).Elem()
}

type PraCredentialControllerInput interface {
	pulumi.Input

	ToPraCredentialControllerOutput() PraCredentialControllerOutput
	ToPraCredentialControllerOutputWithContext(ctx context.Context) PraCredentialControllerOutput
}

func (*PraCredentialController) ElementType() reflect.Type {
	return reflect.TypeOf((**PraCredentialController)(nil)).Elem()
}

func (i *PraCredentialController) ToPraCredentialControllerOutput() PraCredentialControllerOutput {
	return i.ToPraCredentialControllerOutputWithContext(context.Background())
}

func (i *PraCredentialController) ToPraCredentialControllerOutputWithContext(ctx context.Context) PraCredentialControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialControllerOutput)
}

// PraCredentialControllerArrayInput is an input type that accepts PraCredentialControllerArray and PraCredentialControllerArrayOutput values.
// You can construct a concrete instance of `PraCredentialControllerArrayInput` via:
//
//	PraCredentialControllerArray{ PraCredentialControllerArgs{...} }
type PraCredentialControllerArrayInput interface {
	pulumi.Input

	ToPraCredentialControllerArrayOutput() PraCredentialControllerArrayOutput
	ToPraCredentialControllerArrayOutputWithContext(context.Context) PraCredentialControllerArrayOutput
}

type PraCredentialControllerArray []PraCredentialControllerInput

func (PraCredentialControllerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraCredentialController)(nil)).Elem()
}

func (i PraCredentialControllerArray) ToPraCredentialControllerArrayOutput() PraCredentialControllerArrayOutput {
	return i.ToPraCredentialControllerArrayOutputWithContext(context.Background())
}

func (i PraCredentialControllerArray) ToPraCredentialControllerArrayOutputWithContext(ctx context.Context) PraCredentialControllerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialControllerArrayOutput)
}

// PraCredentialControllerMapInput is an input type that accepts PraCredentialControllerMap and PraCredentialControllerMapOutput values.
// You can construct a concrete instance of `PraCredentialControllerMapInput` via:
//
//	PraCredentialControllerMap{ "key": PraCredentialControllerArgs{...} }
type PraCredentialControllerMapInput interface {
	pulumi.Input

	ToPraCredentialControllerMapOutput() PraCredentialControllerMapOutput
	ToPraCredentialControllerMapOutputWithContext(context.Context) PraCredentialControllerMapOutput
}

type PraCredentialControllerMap map[string]PraCredentialControllerInput

func (PraCredentialControllerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraCredentialController)(nil)).Elem()
}

func (i PraCredentialControllerMap) ToPraCredentialControllerMapOutput() PraCredentialControllerMapOutput {
	return i.ToPraCredentialControllerMapOutputWithContext(context.Background())
}

func (i PraCredentialControllerMap) ToPraCredentialControllerMapOutputWithContext(ctx context.Context) PraCredentialControllerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PraCredentialControllerMapOutput)
}

type PraCredentialControllerOutput struct{ *pulumi.OutputState }

func (PraCredentialControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PraCredentialController)(nil)).Elem()
}

func (o PraCredentialControllerOutput) ToPraCredentialControllerOutput() PraCredentialControllerOutput {
	return o
}

func (o PraCredentialControllerOutput) ToPraCredentialControllerOutputWithContext(ctx context.Context) PraCredentialControllerOutput {
	return o
}

// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
// and VNC. Each protocol type has its own credential requirements.
func (o PraCredentialControllerOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The description of the privileged credential
func (o PraCredentialControllerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PraCredentialControllerOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the privileged credential
func (o PraCredentialControllerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password that is used to protect the SSH private key. This field is optional
func (o PraCredentialControllerOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// The password associated with the username for the login you want to use for the privileged credential
func (o PraCredentialControllerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH private key associated with the username for the login you want to use for the privileged credential
func (o PraCredentialControllerOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
// console that is connected to an Active Directory Domain
func (o PraCredentialControllerOutput) UserDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.UserDomain }).(pulumi.StringPtrOutput)
}

// The username for the login you want to use for the privileged credential
func (o PraCredentialControllerOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PraCredentialController) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type PraCredentialControllerArrayOutput struct{ *pulumi.OutputState }

func (PraCredentialControllerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PraCredentialController)(nil)).Elem()
}

func (o PraCredentialControllerArrayOutput) ToPraCredentialControllerArrayOutput() PraCredentialControllerArrayOutput {
	return o
}

func (o PraCredentialControllerArrayOutput) ToPraCredentialControllerArrayOutputWithContext(ctx context.Context) PraCredentialControllerArrayOutput {
	return o
}

func (o PraCredentialControllerArrayOutput) Index(i pulumi.IntInput) PraCredentialControllerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PraCredentialController {
		return vs[0].([]*PraCredentialController)[vs[1].(int)]
	}).(PraCredentialControllerOutput)
}

type PraCredentialControllerMapOutput struct{ *pulumi.OutputState }

func (PraCredentialControllerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PraCredentialController)(nil)).Elem()
}

func (o PraCredentialControllerMapOutput) ToPraCredentialControllerMapOutput() PraCredentialControllerMapOutput {
	return o
}

func (o PraCredentialControllerMapOutput) ToPraCredentialControllerMapOutputWithContext(ctx context.Context) PraCredentialControllerMapOutput {
	return o
}

func (o PraCredentialControllerMapOutput) MapIndex(k pulumi.StringInput) PraCredentialControllerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PraCredentialController {
		return vs[0].(map[string]*PraCredentialController)[vs[1].(string)]
	}).(PraCredentialControllerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialControllerInput)(nil)).Elem(), &PraCredentialController{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialControllerArrayInput)(nil)).Elem(), PraCredentialControllerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PraCredentialControllerMapInput)(nil)).Elem(), PraCredentialControllerMap{})
	pulumi.RegisterOutputType(PraCredentialControllerOutput{})
	pulumi.RegisterOutputType(PraCredentialControllerArrayOutput{})
	pulumi.RegisterOutputType(PraCredentialControllerMapOutput{})
}
