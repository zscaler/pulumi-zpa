// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
// * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)
//
// The **zpa_policy_access_rule_v2** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.
//
//	⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.
//
//	⚠️ **WARNING:**: The attribute ``ruleOrder`` is now deprecated in favor of the new resource  ``policyAccessRuleReorder``
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisIdPController, err := zpa.GetIdPController(ctx, &zpa.GetIdPControllerArgs{
//				Name: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			emailUserSso, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("Email_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			groupUser, err := zpa.GetSAMLAttribute(ctx, &zpa.GetSAMLAttributeArgs{
//				Name:    pulumi.StringRef("GroupName_Users"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			a000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("A000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			b000, err := zpa.GetSCIMGroups(ctx, &zpa.GetSCIMGroupsArgs{
//				Name:    pulumi.StringRef("B000"),
//				IdpName: pulumi.StringRef("Idp_Name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create Segment Group
//			thisSegmentGroup, err := zpa.NewSegmentGroup(ctx, "thisSegmentGroup", &zpa.SegmentGroupArgs{
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Create Policy Access Rule V2
//			_, err = zpa.NewPolicyAccessRuleV2(ctx, "thisPolicyAccessRuleV2", &zpa.PolicyAccessRuleV2Args{
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("ALLOW"),
//				Conditions: zpa.PolicyAccessRuleV2ConditionArray{
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("APP_GROUP"),
//								Values: pulumi.StringArray{
//									thisSegmentGroup.ID(),
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("SAML"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("user1@acme.com"),
//										Lhs: pulumi.String(emailUserSso.Id),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("A000"),
//										Lhs: pulumi.String(groupUser.Id),
//									},
//								},
//							},
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("SCIM_GROUP"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(a000.Id),
//										Lhs: pulumi.String(thisIdPController.Id),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String(b000.Id),
//										Lhs: pulumi.String(thisIdPController.Id),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("PLATFORM"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("true"),
//										Lhs: pulumi.String("linux"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Rhs: pulumi.String("true"),
//										Lhs: pulumi.String("android"),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("COUNTRY_CODE"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("CA"),
//										Rhs: pulumi.String("true"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("US"),
//										Rhs: pulumi.String("true"),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("RISK_FACTOR_TYPE"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("ZIA"),
//										Rhs: pulumi.String("UNKNOWN"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("ZIA"),
//										Rhs: pulumi.String("LOW"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("ZIA"),
//										Rhs: pulumi.String("MEDIUM"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("ZIA"),
//										Rhs: pulumi.String("HIGH"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("ZIA"),
//										Rhs: pulumi.String("CRITICAL"),
//									},
//								},
//							},
//						},
//					},
//					&zpa.PolicyAccessRuleV2ConditionArgs{
//						Operator: pulumi.String("OR"),
//						Operands: zpa.PolicyAccessRuleV2ConditionOperandArray{
//							&zpa.PolicyAccessRuleV2ConditionOperandArgs{
//								ObjectType: pulumi.String("CHROME_ENTERPRISE"),
//								EntryValues: zpa.PolicyAccessRuleV2ConditionOperandEntryValueArray{
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("managed"),
//										Rhs: pulumi.String("true"),
//									},
//									&zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs{
//										Lhs: pulumi.String("managed"),
//										Rhs: pulumi.String("false"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## LHS and RHS Values
//
// | Object Type | LHS| RHS| VALUES
// |----------|-----------|----------|----------
// | APP  |   |  | “applicationSegmentId“ |
// | APP_GROUP  |   |  | “segmentGroupId“|
// | CLIENT_TYPE  |   |  |  “zpnClientTypeZappl“, “zpnClientTypeExporter“, “zpnClientTypeBrowserIsolation“, “zpnClientTypeIpAnchoring“, “zpnClientTypeEdgeConnector“, “zpnClientTypeBranchConnector“,  “zpnClientTypeZappPartner“, “zpnClientTypeZapp“  |
// | EDGE_CONNECTOR_GROUP  |   |  |  “<edge_connector_id>“ |
// | BRANCH_CONNECTOR_GROUP  |   |  |  “<branch_connector_id>“ |
// | LOCATION   |   |  | “locationId“ |
// | MACHINE_GRP   |   |  | “machineGroupId“ |
// | SAML | “samlAttributeId“  | “attributeValueToMatch“ |
// | SCIM | “scimAttributeId“  | “attributeValueToMatch“  |
// | SCIM_GROUP | “scimGroupAttributeId“  | “attributeValueToMatch“  |
// | PLATFORM | “mac“, “ios“, “windows“, “android“, “linux“ | “"true"“ / “"false"“ |
// | POSTURE | “postureUdid“  | “"true"“ / “"false"“ |
// | TRUSTED_NETWORK | “networkId“  | “"true"“ |
// | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | “"true"“ / “"false"“ |
// | RISK_FACTOR_TYPE | “ZIA“  | “"UNKNOWN", "LOW", "MEDIUM", "HIGH", "CRITICAL"“ |
// | CHROME_ENTERPRISE | “managed“  | “"true" / "false"“ |
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// Policy access rule can be imported by using `<RULE ID>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/policyAccessRuleV2:PolicyAccessRuleV2 example <rule_id>
// ```
type PolicyAccessRuleV2 struct {
	pulumi.CustomResourceState

	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleV2AppConnectorGroupArrayOutput `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups PolicyAccessRuleV2AppServerGroupArrayOutput `pulumi:"appServerGroups"`
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleV2ConditionArrayOutput `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringOutput `pulumi:"customMsg"`
	// This is the description of the access policy rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// This is the name of the policy rule.
	Name        pulumi.StringOutput `pulumi:"name"`
	Operator    pulumi.StringOutput `pulumi:"operator"`
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
}

// NewPolicyAccessRuleV2 registers a new resource with the given unique name, arguments, and options.
func NewPolicyAccessRuleV2(ctx *pulumi.Context,
	name string, args *PolicyAccessRuleV2Args, opts ...pulumi.ResourceOption) (*PolicyAccessRuleV2, error) {
	if args == nil {
		args = &PolicyAccessRuleV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAccessRuleV2
	err := ctx.RegisterResource("zpa:index/policyAccessRuleV2:PolicyAccessRuleV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAccessRuleV2 gets an existing PolicyAccessRuleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAccessRuleV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAccessRuleV2State, opts ...pulumi.ResourceOption) (*PolicyAccessRuleV2, error) {
	var resource PolicyAccessRuleV2
	err := ctx.ReadResource("zpa:index/policyAccessRuleV2:PolicyAccessRuleV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAccessRuleV2 resources.
type policyAccessRuleV2State struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action *string `pulumi:"action"`
	// List of app-connector IDs.
	AppConnectorGroups []PolicyAccessRuleV2AppConnectorGroup `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups []PolicyAccessRuleV2AppServerGroup `pulumi:"appServerGroups"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyAccessRuleV2Condition `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg *string `pulumi:"customMsg"`
	// This is the description of the access policy rule.
	Description *string `pulumi:"description"`
	// This is the name of the policy rule.
	Name        *string `pulumi:"name"`
	Operator    *string `pulumi:"operator"`
	PolicySetId *string `pulumi:"policySetId"`
}

type PolicyAccessRuleV2State struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrInput
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleV2AppConnectorGroupArrayInput
	// List of the server group IDs.
	AppServerGroups PolicyAccessRuleV2AppServerGroupArrayInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleV2ConditionArrayInput
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringPtrInput
	// This is the description of the access policy rule.
	Description pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name        pulumi.StringPtrInput
	Operator    pulumi.StringPtrInput
	PolicySetId pulumi.StringPtrInput
}

func (PolicyAccessRuleV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessRuleV2State)(nil)).Elem()
}

type policyAccessRuleV2Args struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action *string `pulumi:"action"`
	// List of app-connector IDs.
	AppConnectorGroups []PolicyAccessRuleV2AppConnectorGroup `pulumi:"appConnectorGroups"`
	// List of the server group IDs.
	AppServerGroups []PolicyAccessRuleV2AppServerGroup `pulumi:"appServerGroups"`
	// This is for proviidng the set of conditions for the policy.
	Conditions []PolicyAccessRuleV2Condition `pulumi:"conditions"`
	// This is for providing a customer message for the user.
	CustomMsg *string `pulumi:"customMsg"`
	// This is the description of the access policy rule.
	Description *string `pulumi:"description"`
	// This is the name of the policy rule.
	Name     *string `pulumi:"name"`
	Operator *string `pulumi:"operator"`
}

// The set of arguments for constructing a PolicyAccessRuleV2 resource.
type PolicyAccessRuleV2Args struct {
	// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
	Action pulumi.StringPtrInput
	// List of app-connector IDs.
	AppConnectorGroups PolicyAccessRuleV2AppConnectorGroupArrayInput
	// List of the server group IDs.
	AppServerGroups PolicyAccessRuleV2AppServerGroupArrayInput
	// This is for proviidng the set of conditions for the policy.
	Conditions PolicyAccessRuleV2ConditionArrayInput
	// This is for providing a customer message for the user.
	CustomMsg pulumi.StringPtrInput
	// This is the description of the access policy rule.
	Description pulumi.StringPtrInput
	// This is the name of the policy rule.
	Name     pulumi.StringPtrInput
	Operator pulumi.StringPtrInput
}

func (PolicyAccessRuleV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessRuleV2Args)(nil)).Elem()
}

type PolicyAccessRuleV2Input interface {
	pulumi.Input

	ToPolicyAccessRuleV2Output() PolicyAccessRuleV2Output
	ToPolicyAccessRuleV2OutputWithContext(ctx context.Context) PolicyAccessRuleV2Output
}

func (*PolicyAccessRuleV2) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessRuleV2)(nil)).Elem()
}

func (i *PolicyAccessRuleV2) ToPolicyAccessRuleV2Output() PolicyAccessRuleV2Output {
	return i.ToPolicyAccessRuleV2OutputWithContext(context.Background())
}

func (i *PolicyAccessRuleV2) ToPolicyAccessRuleV2OutputWithContext(ctx context.Context) PolicyAccessRuleV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleV2Output)
}

// PolicyAccessRuleV2ArrayInput is an input type that accepts PolicyAccessRuleV2Array and PolicyAccessRuleV2ArrayOutput values.
// You can construct a concrete instance of `PolicyAccessRuleV2ArrayInput` via:
//
//	PolicyAccessRuleV2Array{ PolicyAccessRuleV2Args{...} }
type PolicyAccessRuleV2ArrayInput interface {
	pulumi.Input

	ToPolicyAccessRuleV2ArrayOutput() PolicyAccessRuleV2ArrayOutput
	ToPolicyAccessRuleV2ArrayOutputWithContext(context.Context) PolicyAccessRuleV2ArrayOutput
}

type PolicyAccessRuleV2Array []PolicyAccessRuleV2Input

func (PolicyAccessRuleV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessRuleV2)(nil)).Elem()
}

func (i PolicyAccessRuleV2Array) ToPolicyAccessRuleV2ArrayOutput() PolicyAccessRuleV2ArrayOutput {
	return i.ToPolicyAccessRuleV2ArrayOutputWithContext(context.Background())
}

func (i PolicyAccessRuleV2Array) ToPolicyAccessRuleV2ArrayOutputWithContext(ctx context.Context) PolicyAccessRuleV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleV2ArrayOutput)
}

// PolicyAccessRuleV2MapInput is an input type that accepts PolicyAccessRuleV2Map and PolicyAccessRuleV2MapOutput values.
// You can construct a concrete instance of `PolicyAccessRuleV2MapInput` via:
//
//	PolicyAccessRuleV2Map{ "key": PolicyAccessRuleV2Args{...} }
type PolicyAccessRuleV2MapInput interface {
	pulumi.Input

	ToPolicyAccessRuleV2MapOutput() PolicyAccessRuleV2MapOutput
	ToPolicyAccessRuleV2MapOutputWithContext(context.Context) PolicyAccessRuleV2MapOutput
}

type PolicyAccessRuleV2Map map[string]PolicyAccessRuleV2Input

func (PolicyAccessRuleV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessRuleV2)(nil)).Elem()
}

func (i PolicyAccessRuleV2Map) ToPolicyAccessRuleV2MapOutput() PolicyAccessRuleV2MapOutput {
	return i.ToPolicyAccessRuleV2MapOutputWithContext(context.Background())
}

func (i PolicyAccessRuleV2Map) ToPolicyAccessRuleV2MapOutputWithContext(ctx context.Context) PolicyAccessRuleV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessRuleV2MapOutput)
}

type PolicyAccessRuleV2Output struct{ *pulumi.OutputState }

func (PolicyAccessRuleV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessRuleV2)(nil)).Elem()
}

func (o PolicyAccessRuleV2Output) ToPolicyAccessRuleV2Output() PolicyAccessRuleV2Output {
	return o
}

func (o PolicyAccessRuleV2Output) ToPolicyAccessRuleV2OutputWithContext(ctx context.Context) PolicyAccessRuleV2Output {
	return o
}

// This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
func (o PolicyAccessRuleV2Output) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// List of app-connector IDs.
func (o PolicyAccessRuleV2Output) AppConnectorGroups() PolicyAccessRuleV2AppConnectorGroupArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) PolicyAccessRuleV2AppConnectorGroupArrayOutput {
		return v.AppConnectorGroups
	}).(PolicyAccessRuleV2AppConnectorGroupArrayOutput)
}

// List of the server group IDs.
func (o PolicyAccessRuleV2Output) AppServerGroups() PolicyAccessRuleV2AppServerGroupArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) PolicyAccessRuleV2AppServerGroupArrayOutput { return v.AppServerGroups }).(PolicyAccessRuleV2AppServerGroupArrayOutput)
}

// This is for proviidng the set of conditions for the policy.
func (o PolicyAccessRuleV2Output) Conditions() PolicyAccessRuleV2ConditionArrayOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) PolicyAccessRuleV2ConditionArrayOutput { return v.Conditions }).(PolicyAccessRuleV2ConditionArrayOutput)
}

// This is for providing a customer message for the user.
func (o PolicyAccessRuleV2Output) CustomMsg() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringOutput { return v.CustomMsg }).(pulumi.StringOutput)
}

// This is the description of the access policy rule.
func (o PolicyAccessRuleV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// This is the name of the policy rule.
func (o PolicyAccessRuleV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleV2Output) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringOutput { return v.Operator }).(pulumi.StringOutput)
}

func (o PolicyAccessRuleV2Output) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessRuleV2) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

type PolicyAccessRuleV2ArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessRuleV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessRuleV2)(nil)).Elem()
}

func (o PolicyAccessRuleV2ArrayOutput) ToPolicyAccessRuleV2ArrayOutput() PolicyAccessRuleV2ArrayOutput {
	return o
}

func (o PolicyAccessRuleV2ArrayOutput) ToPolicyAccessRuleV2ArrayOutputWithContext(ctx context.Context) PolicyAccessRuleV2ArrayOutput {
	return o
}

func (o PolicyAccessRuleV2ArrayOutput) Index(i pulumi.IntInput) PolicyAccessRuleV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyAccessRuleV2 {
		return vs[0].([]*PolicyAccessRuleV2)[vs[1].(int)]
	}).(PolicyAccessRuleV2Output)
}

type PolicyAccessRuleV2MapOutput struct{ *pulumi.OutputState }

func (PolicyAccessRuleV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessRuleV2)(nil)).Elem()
}

func (o PolicyAccessRuleV2MapOutput) ToPolicyAccessRuleV2MapOutput() PolicyAccessRuleV2MapOutput {
	return o
}

func (o PolicyAccessRuleV2MapOutput) ToPolicyAccessRuleV2MapOutputWithContext(ctx context.Context) PolicyAccessRuleV2MapOutput {
	return o
}

func (o PolicyAccessRuleV2MapOutput) MapIndex(k pulumi.StringInput) PolicyAccessRuleV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyAccessRuleV2 {
		return vs[0].(map[string]*PolicyAccessRuleV2)[vs[1].(string)]
	}).(PolicyAccessRuleV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleV2Input)(nil)).Elem(), &PolicyAccessRuleV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleV2ArrayInput)(nil)).Elem(), PolicyAccessRuleV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessRuleV2MapInput)(nil)).Elem(), PolicyAccessRuleV2Map{})
	pulumi.RegisterOutputType(PolicyAccessRuleV2Output{})
	pulumi.RegisterOutputType(PolicyAccessRuleV2ArrayOutput{})
	pulumi.RegisterOutputType(PolicyAccessRuleV2MapOutput{})
}
