// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

type PolicyAccessCredentialRule struct {
	pulumi.CustomResourceState

	// This is for providing the rule action.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions  PolicyAccessCredentialRuleConditionArrayOutput  `pulumi:"conditions"`
	Credentials PolicyAccessCredentialRuleCredentialArrayOutput `pulumi:"credentials"`
	// This is the description of the access policy.
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	MicrotenantId pulumi.StringOutput    `pulumi:"microtenantId"`
	// This is the name of the policy.
	Name        pulumi.StringOutput `pulumi:"name"`
	PolicySetId pulumi.StringOutput `pulumi:"policySetId"`
}

// NewPolicyAccessCredentialRule registers a new resource with the given unique name, arguments, and options.
func NewPolicyAccessCredentialRule(ctx *pulumi.Context,
	name string, args *PolicyAccessCredentialRuleArgs, opts ...pulumi.ResourceOption) (*PolicyAccessCredentialRule, error) {
	if args == nil {
		args = &PolicyAccessCredentialRuleArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("zpa:index/policyCredentialRule:PolicyCredentialRule"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyAccessCredentialRule
	err := ctx.RegisterResource("zpa:index/policyAccessCredentialRule:PolicyAccessCredentialRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyAccessCredentialRule gets an existing PolicyAccessCredentialRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyAccessCredentialRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyAccessCredentialRuleState, opts ...pulumi.ResourceOption) (*PolicyAccessCredentialRule, error) {
	var resource PolicyAccessCredentialRule
	err := ctx.ReadResource("zpa:index/policyAccessCredentialRule:PolicyAccessCredentialRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyAccessCredentialRule resources.
type policyAccessCredentialRuleState struct {
	// This is for providing the rule action.
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions  []PolicyAccessCredentialRuleCondition  `pulumi:"conditions"`
	Credentials []PolicyAccessCredentialRuleCredential `pulumi:"credentials"`
	// This is the description of the access policy.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy.
	Name        *string `pulumi:"name"`
	PolicySetId *string `pulumi:"policySetId"`
}

type PolicyAccessCredentialRuleState struct {
	// This is for providing the rule action.
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions  PolicyAccessCredentialRuleConditionArrayInput
	Credentials PolicyAccessCredentialRuleCredentialArrayInput
	// This is the description of the access policy.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy.
	Name        pulumi.StringPtrInput
	PolicySetId pulumi.StringPtrInput
}

func (PolicyAccessCredentialRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessCredentialRuleState)(nil)).Elem()
}

type policyAccessCredentialRuleArgs struct {
	// This is for providing the rule action.
	Action *string `pulumi:"action"`
	// This is for proviidng the set of conditions for the policy.
	Conditions  []PolicyAccessCredentialRuleCondition  `pulumi:"conditions"`
	Credentials []PolicyAccessCredentialRuleCredential `pulumi:"credentials"`
	// This is the description of the access policy.
	Description   *string `pulumi:"description"`
	MicrotenantId *string `pulumi:"microtenantId"`
	// This is the name of the policy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyAccessCredentialRule resource.
type PolicyAccessCredentialRuleArgs struct {
	// This is for providing the rule action.
	Action pulumi.StringPtrInput
	// This is for proviidng the set of conditions for the policy.
	Conditions  PolicyAccessCredentialRuleConditionArrayInput
	Credentials PolicyAccessCredentialRuleCredentialArrayInput
	// This is the description of the access policy.
	Description   pulumi.StringPtrInput
	MicrotenantId pulumi.StringPtrInput
	// This is the name of the policy.
	Name pulumi.StringPtrInput
}

func (PolicyAccessCredentialRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyAccessCredentialRuleArgs)(nil)).Elem()
}

type PolicyAccessCredentialRuleInput interface {
	pulumi.Input

	ToPolicyAccessCredentialRuleOutput() PolicyAccessCredentialRuleOutput
	ToPolicyAccessCredentialRuleOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleOutput
}

func (*PolicyAccessCredentialRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessCredentialRule)(nil)).Elem()
}

func (i *PolicyAccessCredentialRule) ToPolicyAccessCredentialRuleOutput() PolicyAccessCredentialRuleOutput {
	return i.ToPolicyAccessCredentialRuleOutputWithContext(context.Background())
}

func (i *PolicyAccessCredentialRule) ToPolicyAccessCredentialRuleOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessCredentialRuleOutput)
}

// PolicyAccessCredentialRuleArrayInput is an input type that accepts PolicyAccessCredentialRuleArray and PolicyAccessCredentialRuleArrayOutput values.
// You can construct a concrete instance of `PolicyAccessCredentialRuleArrayInput` via:
//
//	PolicyAccessCredentialRuleArray{ PolicyAccessCredentialRuleArgs{...} }
type PolicyAccessCredentialRuleArrayInput interface {
	pulumi.Input

	ToPolicyAccessCredentialRuleArrayOutput() PolicyAccessCredentialRuleArrayOutput
	ToPolicyAccessCredentialRuleArrayOutputWithContext(context.Context) PolicyAccessCredentialRuleArrayOutput
}

type PolicyAccessCredentialRuleArray []PolicyAccessCredentialRuleInput

func (PolicyAccessCredentialRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessCredentialRule)(nil)).Elem()
}

func (i PolicyAccessCredentialRuleArray) ToPolicyAccessCredentialRuleArrayOutput() PolicyAccessCredentialRuleArrayOutput {
	return i.ToPolicyAccessCredentialRuleArrayOutputWithContext(context.Background())
}

func (i PolicyAccessCredentialRuleArray) ToPolicyAccessCredentialRuleArrayOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessCredentialRuleArrayOutput)
}

// PolicyAccessCredentialRuleMapInput is an input type that accepts PolicyAccessCredentialRuleMap and PolicyAccessCredentialRuleMapOutput values.
// You can construct a concrete instance of `PolicyAccessCredentialRuleMapInput` via:
//
//	PolicyAccessCredentialRuleMap{ "key": PolicyAccessCredentialRuleArgs{...} }
type PolicyAccessCredentialRuleMapInput interface {
	pulumi.Input

	ToPolicyAccessCredentialRuleMapOutput() PolicyAccessCredentialRuleMapOutput
	ToPolicyAccessCredentialRuleMapOutputWithContext(context.Context) PolicyAccessCredentialRuleMapOutput
}

type PolicyAccessCredentialRuleMap map[string]PolicyAccessCredentialRuleInput

func (PolicyAccessCredentialRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessCredentialRule)(nil)).Elem()
}

func (i PolicyAccessCredentialRuleMap) ToPolicyAccessCredentialRuleMapOutput() PolicyAccessCredentialRuleMapOutput {
	return i.ToPolicyAccessCredentialRuleMapOutputWithContext(context.Background())
}

func (i PolicyAccessCredentialRuleMap) ToPolicyAccessCredentialRuleMapOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyAccessCredentialRuleMapOutput)
}

type PolicyAccessCredentialRuleOutput struct{ *pulumi.OutputState }

func (PolicyAccessCredentialRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAccessCredentialRule)(nil)).Elem()
}

func (o PolicyAccessCredentialRuleOutput) ToPolicyAccessCredentialRuleOutput() PolicyAccessCredentialRuleOutput {
	return o
}

func (o PolicyAccessCredentialRuleOutput) ToPolicyAccessCredentialRuleOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleOutput {
	return o
}

// This is for providing the rule action.
func (o PolicyAccessCredentialRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// This is for proviidng the set of conditions for the policy.
func (o PolicyAccessCredentialRuleOutput) Conditions() PolicyAccessCredentialRuleConditionArrayOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) PolicyAccessCredentialRuleConditionArrayOutput {
		return v.Conditions
	}).(PolicyAccessCredentialRuleConditionArrayOutput)
}

func (o PolicyAccessCredentialRuleOutput) Credentials() PolicyAccessCredentialRuleCredentialArrayOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) PolicyAccessCredentialRuleCredentialArrayOutput {
		return v.Credentials
	}).(PolicyAccessCredentialRuleCredentialArrayOutput)
}

// This is the description of the access policy.
func (o PolicyAccessCredentialRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PolicyAccessCredentialRuleOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// This is the name of the policy.
func (o PolicyAccessCredentialRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyAccessCredentialRuleOutput) PolicySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyAccessCredentialRule) pulumi.StringOutput { return v.PolicySetId }).(pulumi.StringOutput)
}

type PolicyAccessCredentialRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyAccessCredentialRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyAccessCredentialRule)(nil)).Elem()
}

func (o PolicyAccessCredentialRuleArrayOutput) ToPolicyAccessCredentialRuleArrayOutput() PolicyAccessCredentialRuleArrayOutput {
	return o
}

func (o PolicyAccessCredentialRuleArrayOutput) ToPolicyAccessCredentialRuleArrayOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleArrayOutput {
	return o
}

func (o PolicyAccessCredentialRuleArrayOutput) Index(i pulumi.IntInput) PolicyAccessCredentialRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyAccessCredentialRule {
		return vs[0].([]*PolicyAccessCredentialRule)[vs[1].(int)]
	}).(PolicyAccessCredentialRuleOutput)
}

type PolicyAccessCredentialRuleMapOutput struct{ *pulumi.OutputState }

func (PolicyAccessCredentialRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyAccessCredentialRule)(nil)).Elem()
}

func (o PolicyAccessCredentialRuleMapOutput) ToPolicyAccessCredentialRuleMapOutput() PolicyAccessCredentialRuleMapOutput {
	return o
}

func (o PolicyAccessCredentialRuleMapOutput) ToPolicyAccessCredentialRuleMapOutputWithContext(ctx context.Context) PolicyAccessCredentialRuleMapOutput {
	return o
}

func (o PolicyAccessCredentialRuleMapOutput) MapIndex(k pulumi.StringInput) PolicyAccessCredentialRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyAccessCredentialRule {
		return vs[0].(map[string]*PolicyAccessCredentialRule)[vs[1].(string)]
	}).(PolicyAccessCredentialRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessCredentialRuleInput)(nil)).Elem(), &PolicyAccessCredentialRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessCredentialRuleArrayInput)(nil)).Elem(), PolicyAccessCredentialRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyAccessCredentialRuleMapInput)(nil)).Elem(), PolicyAccessCredentialRuleMap{})
	pulumi.RegisterOutputType(PolicyAccessCredentialRuleOutput{})
	pulumi.RegisterOutputType(PolicyAccessCredentialRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyAccessCredentialRuleMapOutput{})
}
