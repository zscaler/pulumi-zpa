// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// ## Example Usage
//
// ### Zscaler Managed Certificate
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve Browser Access Certificate
//			_, err := zpa.GetBaCertificate(ctx, &zpa.GetBaCertificateArgs{
//				Name: pulumi.StringRef("sales.acme.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ZPA Segment Group resource
//			exampleSegmentGroup, err := zpa.NewSegmentGroup(ctx, "example", &zpa.SegmentGroupArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("Example"),
//				Enabled:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := zpa.GetAppConnectorGroup(ctx, &zpa.GetAppConnectorGroupArgs{
//				Name: pulumi.StringRef("AWS-Connector"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ZPA Server Group resource
//			exampleServerGroup, err := zpa.NewServerGroup(ctx, "example", &zpa.ServerGroupArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("Example"),
//				Enabled:          pulumi.Bool(true),
//				DynamicDiscovery: pulumi.Bool(true),
//				AppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{
//					&zpa.ServerGroupAppConnectorGroupArgs{
//						Ids: pulumi.StringArray{
//							pulumi.String(example.Id),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Create Browser Access Application
//			_, err = zpa.NewApplicationSegmentBrowserAccess(ctx, "browser_access_apps", &zpa.ApplicationSegmentBrowserAccessArgs{
//				Name:            pulumi.String("Browser Access Apps"),
//				Description:     pulumi.String("Browser Access Apps"),
//				Enabled:         pulumi.Bool(true),
//				HealthReporting: pulumi.String("ON_ACCESS"),
//				BypassType:      pulumi.String("NEVER"),
//				TcpPortRanges: pulumi.StringArray{
//					pulumi.String("443"),
//					pulumi.String("443"),
//				},
//				DomainNames: pulumi.StringArray{
//					pulumi.String("sales.acme.com"),
//				},
//				SegmentGroupId: exampleSegmentGroup.ID(),
//				ClientlessApps: zpa.ApplicationSegmentBrowserAccessClientlessAppArray{
//					&zpa.ApplicationSegmentBrowserAccessClientlessAppArgs{
//						Name:                pulumi.String("app-ba01.acme.com"),
//						ApplicationProtocol: pulumi.String("HTTPS"),
//						ApplicationPort:     pulumi.String("443"),
//						TrustUntrustedCert:  pulumi.Bool(true),
//						Enabled:             pulumi.Bool(true),
//						Domain:              pulumi.String("app-ba01.acme.com"),
//						ExtLabel:            pulumi.String("app-ba01"),
//						ExtDomain:           pulumi.String("acme.com"),
//					},
//				},
//				ServerGroups: zpa.ApplicationSegmentBrowserAccessServerGroupArray{
//					&zpa.ApplicationSegmentBrowserAccessServerGroupArgs{
//						Ids: pulumi.StringArray{
//							exampleServerGroup.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zpa_application_segment_browser_access** Application Segment Browser Access can be imported by using <`BROWSER ACCESS ID`> or `<<BROWSER ACCESS NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example <browser_access_id>.
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example <browser_access_name>
// ```
type ApplicationSegmentBrowserAccess struct {
	pulumi.CustomResourceState

	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrOutput                                  `pulumi:"bypassType"`
	ClientlessApps ApplicationSegmentBrowserAccessClientlessAppArrayOutput `pulumi:"clientlessApps"`
	ConfigSpace    pulumi.StringPtrOutput                                  `pulumi:"configSpace"`
	// Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domains and IPs.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrOutput   `pulumi:"doubleEncrypt"`
	Enabled         pulumi.BoolOutput      `pulumi:"enabled"`
	FqdnDnsCheck    pulumi.BoolPtrOutput   `pulumi:"fqdnDnsCheck"`
	HealthCheckType pulumi.StringPtrOutput `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrOutput `pulumi:"healthReporting"`
	IcmpAccessType  pulumi.StringPtrOutput `pulumi:"icmpAccessType"`
	IpAnchored      pulumi.BoolPtrOutput   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrOutput `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig pulumi.BoolPtrOutput `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        pulumi.StringOutput  `pulumi:"microtenantId"`
	// Name of the application.
	Name                      pulumi.StringOutput                                   `pulumi:"name"`
	PassiveHealthEnabled      pulumi.BoolOutput                                     `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            pulumi.StringOutput                                   `pulumi:"segmentGroupId"`
	SegmentGroupName          pulumi.StringOutput                                   `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp pulumi.BoolPtrOutput                                  `pulumi:"selectConnectorCloseToApp"`
	ServerGroups              ApplicationSegmentBrowserAccessServerGroupArrayOutput `pulumi:"serverGroups"`
	TcpKeepAlive              pulumi.StringOutput                                   `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange ApplicationSegmentBrowserAccessTcpPortRangeArrayOutput `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayOutput `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange ApplicationSegmentBrowserAccessUdpPortRangeArrayOutput `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayOutput `pulumi:"udpPortRanges"`
	UseInDrMode   pulumi.BoolPtrOutput     `pulumi:"useInDrMode"`
}

// NewApplicationSegmentBrowserAccess registers a new resource with the given unique name, arguments, and options.
func NewApplicationSegmentBrowserAccess(ctx *pulumi.Context,
	name string, args *ApplicationSegmentBrowserAccessArgs, opts ...pulumi.ResourceOption) (*ApplicationSegmentBrowserAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientlessApps == nil {
		return nil, errors.New("invalid value for required argument 'ClientlessApps'")
	}
	if args.DomainNames == nil {
		return nil, errors.New("invalid value for required argument 'DomainNames'")
	}
	if args.SegmentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSegmentBrowserAccess
	err := ctx.RegisterResource("zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSegmentBrowserAccess gets an existing ApplicationSegmentBrowserAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSegmentBrowserAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSegmentBrowserAccessState, opts ...pulumi.ResourceOption) (*ApplicationSegmentBrowserAccess, error) {
	var resource ApplicationSegmentBrowserAccess
	err := ctx.ReadResource("zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSegmentBrowserAccess resources.
type applicationSegmentBrowserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                                        `pulumi:"bypassType"`
	ClientlessApps []ApplicationSegmentBrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                                        `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	FqdnDnsCheck    *bool   `pulumi:"fqdnDnsCheck"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IcmpAccessType  *string `pulumi:"icmpAccessType"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       *bool   `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig *bool   `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        *string `pulumi:"microtenantId"`
	// Name of the application.
	Name                      *string                                      `pulumi:"name"`
	PassiveHealthEnabled      *bool                                        `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            *string                                      `pulumi:"segmentGroupId"`
	SegmentGroupName          *string                                      `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp *bool                                        `pulumi:"selectConnectorCloseToApp"`
	ServerGroups              []ApplicationSegmentBrowserAccessServerGroup `pulumi:"serverGroups"`
	TcpKeepAlive              *string                                      `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange []ApplicationSegmentBrowserAccessTcpPortRange `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange []ApplicationSegmentBrowserAccessUdpPortRange `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
	UseInDrMode   *bool    `pulumi:"useInDrMode"`
}

type ApplicationSegmentBrowserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps ApplicationSegmentBrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	FqdnDnsCheck    pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IcmpAccessType  pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrInput
	IsIncompleteDrConfig pulumi.BoolPtrInput
	MicrotenantId        pulumi.StringPtrInput
	// Name of the application.
	Name                      pulumi.StringPtrInput
	PassiveHealthEnabled      pulumi.BoolPtrInput
	SegmentGroupId            pulumi.StringPtrInput
	SegmentGroupName          pulumi.StringPtrInput
	SelectConnectorCloseToApp pulumi.BoolPtrInput
	ServerGroups              ApplicationSegmentBrowserAccessServerGroupArrayInput
	TcpKeepAlive              pulumi.StringPtrInput
	// tcp port range
	TcpPortRange ApplicationSegmentBrowserAccessTcpPortRangeArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// udp port range
	UdpPortRange ApplicationSegmentBrowserAccessUdpPortRangeArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
	UseInDrMode   pulumi.BoolPtrInput
}

func (ApplicationSegmentBrowserAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSegmentBrowserAccessState)(nil)).Elem()
}

type applicationSegmentBrowserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                                        `pulumi:"bypassType"`
	ClientlessApps []ApplicationSegmentBrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                                        `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	FqdnDnsCheck    *bool   `pulumi:"fqdnDnsCheck"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IcmpAccessType  *string `pulumi:"icmpAccessType"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       *bool   `pulumi:"isCnameEnabled"`
	IsIncompleteDrConfig *bool   `pulumi:"isIncompleteDrConfig"`
	MicrotenantId        *string `pulumi:"microtenantId"`
	// Name of the application.
	Name                      *string                                      `pulumi:"name"`
	PassiveHealthEnabled      *bool                                        `pulumi:"passiveHealthEnabled"`
	SegmentGroupId            string                                       `pulumi:"segmentGroupId"`
	SegmentGroupName          *string                                      `pulumi:"segmentGroupName"`
	SelectConnectorCloseToApp *bool                                        `pulumi:"selectConnectorCloseToApp"`
	ServerGroups              []ApplicationSegmentBrowserAccessServerGroup `pulumi:"serverGroups"`
	TcpKeepAlive              *string                                      `pulumi:"tcpKeepAlive"`
	// tcp port range
	TcpPortRange []ApplicationSegmentBrowserAccessTcpPortRange `pulumi:"tcpPortRange"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// udp port range
	UdpPortRange []ApplicationSegmentBrowserAccessUdpPortRange `pulumi:"udpPortRange"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
	UseInDrMode   *bool    `pulumi:"useInDrMode"`
}

// The set of arguments for constructing a ApplicationSegmentBrowserAccess resource.
type ApplicationSegmentBrowserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps ApplicationSegmentBrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	FqdnDnsCheck    pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IcmpAccessType  pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled       pulumi.BoolPtrInput
	IsIncompleteDrConfig pulumi.BoolPtrInput
	MicrotenantId        pulumi.StringPtrInput
	// Name of the application.
	Name                      pulumi.StringPtrInput
	PassiveHealthEnabled      pulumi.BoolPtrInput
	SegmentGroupId            pulumi.StringInput
	SegmentGroupName          pulumi.StringPtrInput
	SelectConnectorCloseToApp pulumi.BoolPtrInput
	ServerGroups              ApplicationSegmentBrowserAccessServerGroupArrayInput
	TcpKeepAlive              pulumi.StringPtrInput
	// tcp port range
	TcpPortRange ApplicationSegmentBrowserAccessTcpPortRangeArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// udp port range
	UdpPortRange ApplicationSegmentBrowserAccessUdpPortRangeArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
	UseInDrMode   pulumi.BoolPtrInput
}

func (ApplicationSegmentBrowserAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSegmentBrowserAccessArgs)(nil)).Elem()
}

type ApplicationSegmentBrowserAccessInput interface {
	pulumi.Input

	ToApplicationSegmentBrowserAccessOutput() ApplicationSegmentBrowserAccessOutput
	ToApplicationSegmentBrowserAccessOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessOutput
}

func (*ApplicationSegmentBrowserAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (i *ApplicationSegmentBrowserAccess) ToApplicationSegmentBrowserAccessOutput() ApplicationSegmentBrowserAccessOutput {
	return i.ToApplicationSegmentBrowserAccessOutputWithContext(context.Background())
}

func (i *ApplicationSegmentBrowserAccess) ToApplicationSegmentBrowserAccessOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSegmentBrowserAccessOutput)
}

// ApplicationSegmentBrowserAccessArrayInput is an input type that accepts ApplicationSegmentBrowserAccessArray and ApplicationSegmentBrowserAccessArrayOutput values.
// You can construct a concrete instance of `ApplicationSegmentBrowserAccessArrayInput` via:
//
//	ApplicationSegmentBrowserAccessArray{ ApplicationSegmentBrowserAccessArgs{...} }
type ApplicationSegmentBrowserAccessArrayInput interface {
	pulumi.Input

	ToApplicationSegmentBrowserAccessArrayOutput() ApplicationSegmentBrowserAccessArrayOutput
	ToApplicationSegmentBrowserAccessArrayOutputWithContext(context.Context) ApplicationSegmentBrowserAccessArrayOutput
}

type ApplicationSegmentBrowserAccessArray []ApplicationSegmentBrowserAccessInput

func (ApplicationSegmentBrowserAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (i ApplicationSegmentBrowserAccessArray) ToApplicationSegmentBrowserAccessArrayOutput() ApplicationSegmentBrowserAccessArrayOutput {
	return i.ToApplicationSegmentBrowserAccessArrayOutputWithContext(context.Background())
}

func (i ApplicationSegmentBrowserAccessArray) ToApplicationSegmentBrowserAccessArrayOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSegmentBrowserAccessArrayOutput)
}

// ApplicationSegmentBrowserAccessMapInput is an input type that accepts ApplicationSegmentBrowserAccessMap and ApplicationSegmentBrowserAccessMapOutput values.
// You can construct a concrete instance of `ApplicationSegmentBrowserAccessMapInput` via:
//
//	ApplicationSegmentBrowserAccessMap{ "key": ApplicationSegmentBrowserAccessArgs{...} }
type ApplicationSegmentBrowserAccessMapInput interface {
	pulumi.Input

	ToApplicationSegmentBrowserAccessMapOutput() ApplicationSegmentBrowserAccessMapOutput
	ToApplicationSegmentBrowserAccessMapOutputWithContext(context.Context) ApplicationSegmentBrowserAccessMapOutput
}

type ApplicationSegmentBrowserAccessMap map[string]ApplicationSegmentBrowserAccessInput

func (ApplicationSegmentBrowserAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (i ApplicationSegmentBrowserAccessMap) ToApplicationSegmentBrowserAccessMapOutput() ApplicationSegmentBrowserAccessMapOutput {
	return i.ToApplicationSegmentBrowserAccessMapOutputWithContext(context.Background())
}

func (i ApplicationSegmentBrowserAccessMap) ToApplicationSegmentBrowserAccessMapOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSegmentBrowserAccessMapOutput)
}

type ApplicationSegmentBrowserAccessOutput struct{ *pulumi.OutputState }

func (ApplicationSegmentBrowserAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (o ApplicationSegmentBrowserAccessOutput) ToApplicationSegmentBrowserAccessOutput() ApplicationSegmentBrowserAccessOutput {
	return o
}

func (o ApplicationSegmentBrowserAccessOutput) ToApplicationSegmentBrowserAccessOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessOutput {
	return o
}

// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
// The value NEVER indicates the use of the client forwarding policy.
func (o ApplicationSegmentBrowserAccessOutput) BypassType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.BypassType }).(pulumi.StringPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) ClientlessApps() ApplicationSegmentBrowserAccessClientlessAppArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) ApplicationSegmentBrowserAccessClientlessAppArrayOutput {
		return v.ClientlessApps
	}).(ApplicationSegmentBrowserAccessClientlessAppArrayOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// Description of the application.
func (o ApplicationSegmentBrowserAccessOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domains and IPs.
func (o ApplicationSegmentBrowserAccessOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// Whether Double Encryption is enabled or disabled for the app.
func (o ApplicationSegmentBrowserAccessOutput) DoubleEncrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.DoubleEncrypt }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) FqdnDnsCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.FqdnDnsCheck }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) HealthCheckType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.HealthCheckType }).(pulumi.StringPtrOutput)
}

// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
func (o ApplicationSegmentBrowserAccessOutput) HealthReporting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.HealthReporting }).(pulumi.StringPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) IcmpAccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringPtrOutput { return v.IcmpAccessType }).(pulumi.StringPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) IpAnchored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.IpAnchored }).(pulumi.BoolPtrOutput)
}

// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
// connectors.
func (o ApplicationSegmentBrowserAccessOutput) IsCnameEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.IsCnameEnabled }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) IsIncompleteDrConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.IsIncompleteDrConfig }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// Name of the application.
func (o ApplicationSegmentBrowserAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolOutput { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringOutput { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringOutput { return v.SegmentGroupName }).(pulumi.StringOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) SelectConnectorCloseToApp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.SelectConnectorCloseToApp }).(pulumi.BoolPtrOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) ServerGroups() ApplicationSegmentBrowserAccessServerGroupArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) ApplicationSegmentBrowserAccessServerGroupArrayOutput {
		return v.ServerGroups
	}).(ApplicationSegmentBrowserAccessServerGroupArrayOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) TcpKeepAlive() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringOutput { return v.TcpKeepAlive }).(pulumi.StringOutput)
}

// tcp port range
func (o ApplicationSegmentBrowserAccessOutput) TcpPortRange() ApplicationSegmentBrowserAccessTcpPortRangeArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) ApplicationSegmentBrowserAccessTcpPortRangeArrayOutput {
		return v.TcpPortRange
	}).(ApplicationSegmentBrowserAccessTcpPortRangeArrayOutput)
}

// TCP port ranges used to access the app.
func (o ApplicationSegmentBrowserAccessOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringArrayOutput { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// udp port range
func (o ApplicationSegmentBrowserAccessOutput) UdpPortRange() ApplicationSegmentBrowserAccessUdpPortRangeArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) ApplicationSegmentBrowserAccessUdpPortRangeArrayOutput {
		return v.UdpPortRange
	}).(ApplicationSegmentBrowserAccessUdpPortRangeArrayOutput)
}

// UDP port ranges used to access the app.
func (o ApplicationSegmentBrowserAccessOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.StringArrayOutput { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

func (o ApplicationSegmentBrowserAccessOutput) UseInDrMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApplicationSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.UseInDrMode }).(pulumi.BoolPtrOutput)
}

type ApplicationSegmentBrowserAccessArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSegmentBrowserAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (o ApplicationSegmentBrowserAccessArrayOutput) ToApplicationSegmentBrowserAccessArrayOutput() ApplicationSegmentBrowserAccessArrayOutput {
	return o
}

func (o ApplicationSegmentBrowserAccessArrayOutput) ToApplicationSegmentBrowserAccessArrayOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessArrayOutput {
	return o
}

func (o ApplicationSegmentBrowserAccessArrayOutput) Index(i pulumi.IntInput) ApplicationSegmentBrowserAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSegmentBrowserAccess {
		return vs[0].([]*ApplicationSegmentBrowserAccess)[vs[1].(int)]
	}).(ApplicationSegmentBrowserAccessOutput)
}

type ApplicationSegmentBrowserAccessMapOutput struct{ *pulumi.OutputState }

func (ApplicationSegmentBrowserAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSegmentBrowserAccess)(nil)).Elem()
}

func (o ApplicationSegmentBrowserAccessMapOutput) ToApplicationSegmentBrowserAccessMapOutput() ApplicationSegmentBrowserAccessMapOutput {
	return o
}

func (o ApplicationSegmentBrowserAccessMapOutput) ToApplicationSegmentBrowserAccessMapOutputWithContext(ctx context.Context) ApplicationSegmentBrowserAccessMapOutput {
	return o
}

func (o ApplicationSegmentBrowserAccessMapOutput) MapIndex(k pulumi.StringInput) ApplicationSegmentBrowserAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSegmentBrowserAccess {
		return vs[0].(map[string]*ApplicationSegmentBrowserAccess)[vs[1].(string)]
	}).(ApplicationSegmentBrowserAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSegmentBrowserAccessInput)(nil)).Elem(), &ApplicationSegmentBrowserAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSegmentBrowserAccessArrayInput)(nil)).Elem(), ApplicationSegmentBrowserAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSegmentBrowserAccessMapInput)(nil)).Elem(), ApplicationSegmentBrowserAccessMap{})
	pulumi.RegisterOutputType(ApplicationSegmentBrowserAccessOutput{})
	pulumi.RegisterOutputType(ApplicationSegmentBrowserAccessArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSegmentBrowserAccessMapOutput{})
}
