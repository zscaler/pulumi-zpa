// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-web-server-certificates)
// * [API documentation](https://help.zscaler.com/zpa/configuring-certificates-using-api)
//
// Use the **zpa_ba_certificate** creates a browser access certificate with a private key in the Zscaler Private Access cloud. This resource is required when creating a browser access application segment resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.GetBaCertificate(ctx, &zpa.GetBaCertificateArgs{
//				Name: pulumi.StringRef("example.acme.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ######### PASSWORDS OR RELATED CREDENTIALS ATTRIBUTES IN THIS FILE #########\
// ######### ARE FOR EXAMPLE ONLY AND NOT USED IN PRODUCTION SYSTEMS ##########
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// ZPA Browser Access resource
//			_, err := zpa.NewBrowserCertificate(ctx, "this", &zpa.BrowserCertificateArgs{
//				CertBlob: pulumi.String(`-----BEGIN PRIVATE KEY-----
//
// MIIDyzCCArOgA
// -----END PRIVATE KEY-----
// -----BEGIN CERTIFICATE-----
// MIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL
// -----END CERTIFICATE-----
//
// `),
//
//				Description: pulumi.String("server.example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Let's Encrypt Certbot
//
// This example demonstrates generatoring a domain certificate with letsencrypt
// certbot https://letsencrypt.org/getting-started/
//
// Use letsencrypt's certbot to generate domain certificates in RSA output mode.
// The generator's output corresponds to `BrowserCertificate` fields in the
// following manner.
//
// Zscaler Field          | Certbot file
// --------------------|--------------
// `certblob`          | `cert.pem`
// `certblob`          | `privkey.pem`
//
// ## Import
//
// This resource does not support importing.
type BrowserCertificate struct {
	pulumi.CustomResourceState

	// The description of the certificate
	CertBlob pulumi.StringPtrOutput `pulumi:"certBlob"`
	// The certificate text in PEM format
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The description of the certificate
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the Microtenant
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the certificate.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewBrowserCertificate registers a new resource with the given unique name, arguments, and options.
func NewBrowserCertificate(ctx *pulumi.Context,
	name string, args *BrowserCertificateArgs, opts ...pulumi.ResourceOption) (*BrowserCertificate, error) {
	if args == nil {
		args = &BrowserCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserCertificate
	err := ctx.RegisterResource("zpa:index/browserCertificate:BrowserCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserCertificate gets an existing BrowserCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserCertificateState, opts ...pulumi.ResourceOption) (*BrowserCertificate, error) {
	var resource BrowserCertificate
	err := ctx.ReadResource("zpa:index/browserCertificate:BrowserCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserCertificate resources.
type browserCertificateState struct {
	// The description of the certificate
	CertBlob *string `pulumi:"certBlob"`
	// The certificate text in PEM format
	Certificate *string `pulumi:"certificate"`
	// The description of the certificate
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the certificate.
	Name *string `pulumi:"name"`
}

type BrowserCertificateState struct {
	// The description of the certificate
	CertBlob pulumi.StringPtrInput
	// The certificate text in PEM format
	Certificate pulumi.StringPtrInput
	// The description of the certificate
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant
	MicrotenantId pulumi.StringPtrInput
	// The name of the certificate.
	Name pulumi.StringPtrInput
}

func (BrowserCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserCertificateState)(nil)).Elem()
}

type browserCertificateArgs struct {
	// The description of the certificate
	CertBlob *string `pulumi:"certBlob"`
	// The description of the certificate
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the certificate.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a BrowserCertificate resource.
type BrowserCertificateArgs struct {
	// The description of the certificate
	CertBlob pulumi.StringPtrInput
	// The description of the certificate
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant
	MicrotenantId pulumi.StringPtrInput
	// The name of the certificate.
	Name pulumi.StringPtrInput
}

func (BrowserCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserCertificateArgs)(nil)).Elem()
}

type BrowserCertificateInput interface {
	pulumi.Input

	ToBrowserCertificateOutput() BrowserCertificateOutput
	ToBrowserCertificateOutputWithContext(ctx context.Context) BrowserCertificateOutput
}

func (*BrowserCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserCertificate)(nil)).Elem()
}

func (i *BrowserCertificate) ToBrowserCertificateOutput() BrowserCertificateOutput {
	return i.ToBrowserCertificateOutputWithContext(context.Background())
}

func (i *BrowserCertificate) ToBrowserCertificateOutputWithContext(ctx context.Context) BrowserCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserCertificateOutput)
}

// BrowserCertificateArrayInput is an input type that accepts BrowserCertificateArray and BrowserCertificateArrayOutput values.
// You can construct a concrete instance of `BrowserCertificateArrayInput` via:
//
//	BrowserCertificateArray{ BrowserCertificateArgs{...} }
type BrowserCertificateArrayInput interface {
	pulumi.Input

	ToBrowserCertificateArrayOutput() BrowserCertificateArrayOutput
	ToBrowserCertificateArrayOutputWithContext(context.Context) BrowserCertificateArrayOutput
}

type BrowserCertificateArray []BrowserCertificateInput

func (BrowserCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserCertificate)(nil)).Elem()
}

func (i BrowserCertificateArray) ToBrowserCertificateArrayOutput() BrowserCertificateArrayOutput {
	return i.ToBrowserCertificateArrayOutputWithContext(context.Background())
}

func (i BrowserCertificateArray) ToBrowserCertificateArrayOutputWithContext(ctx context.Context) BrowserCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserCertificateArrayOutput)
}

// BrowserCertificateMapInput is an input type that accepts BrowserCertificateMap and BrowserCertificateMapOutput values.
// You can construct a concrete instance of `BrowserCertificateMapInput` via:
//
//	BrowserCertificateMap{ "key": BrowserCertificateArgs{...} }
type BrowserCertificateMapInput interface {
	pulumi.Input

	ToBrowserCertificateMapOutput() BrowserCertificateMapOutput
	ToBrowserCertificateMapOutputWithContext(context.Context) BrowserCertificateMapOutput
}

type BrowserCertificateMap map[string]BrowserCertificateInput

func (BrowserCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserCertificate)(nil)).Elem()
}

func (i BrowserCertificateMap) ToBrowserCertificateMapOutput() BrowserCertificateMapOutput {
	return i.ToBrowserCertificateMapOutputWithContext(context.Background())
}

func (i BrowserCertificateMap) ToBrowserCertificateMapOutputWithContext(ctx context.Context) BrowserCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserCertificateMapOutput)
}

type BrowserCertificateOutput struct{ *pulumi.OutputState }

func (BrowserCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserCertificate)(nil)).Elem()
}

func (o BrowserCertificateOutput) ToBrowserCertificateOutput() BrowserCertificateOutput {
	return o
}

func (o BrowserCertificateOutput) ToBrowserCertificateOutputWithContext(ctx context.Context) BrowserCertificateOutput {
	return o
}

// The description of the certificate
func (o BrowserCertificateOutput) CertBlob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserCertificate) pulumi.StringPtrOutput { return v.CertBlob }).(pulumi.StringPtrOutput)
}

// The certificate text in PEM format
func (o BrowserCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The description of the certificate
func (o BrowserCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the Microtenant
func (o BrowserCertificateOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserCertificate) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the certificate.
func (o BrowserCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BrowserCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type BrowserCertificateArrayOutput struct{ *pulumi.OutputState }

func (BrowserCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserCertificate)(nil)).Elem()
}

func (o BrowserCertificateArrayOutput) ToBrowserCertificateArrayOutput() BrowserCertificateArrayOutput {
	return o
}

func (o BrowserCertificateArrayOutput) ToBrowserCertificateArrayOutputWithContext(ctx context.Context) BrowserCertificateArrayOutput {
	return o
}

func (o BrowserCertificateArrayOutput) Index(i pulumi.IntInput) BrowserCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserCertificate {
		return vs[0].([]*BrowserCertificate)[vs[1].(int)]
	}).(BrowserCertificateOutput)
}

type BrowserCertificateMapOutput struct{ *pulumi.OutputState }

func (BrowserCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserCertificate)(nil)).Elem()
}

func (o BrowserCertificateMapOutput) ToBrowserCertificateMapOutput() BrowserCertificateMapOutput {
	return o
}

func (o BrowserCertificateMapOutput) ToBrowserCertificateMapOutputWithContext(ctx context.Context) BrowserCertificateMapOutput {
	return o
}

func (o BrowserCertificateMapOutput) MapIndex(k pulumi.StringInput) BrowserCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserCertificate {
		return vs[0].(map[string]*BrowserCertificate)[vs[1].(string)]
	}).(BrowserCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserCertificateInput)(nil)).Elem(), &BrowserCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserCertificateArrayInput)(nil)).Elem(), BrowserCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserCertificateMapInput)(nil)).Elem(), BrowserCertificateMap{})
	pulumi.RegisterOutputType(BrowserCertificateOutput{})
	pulumi.RegisterOutputType(BrowserCertificateArrayOutput{})
	pulumi.RegisterOutputType(BrowserCertificateMapOutput{})
}
