// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credentials)
// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
//
// The **zpa_pra_credential_controller** resource creates a privileged remote access credential in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Creates Credential of Type "USERNAME_PASSWORD"
//			_, err := zpa.NewPRACredential(ctx, "this", &zpa.PRACredentialArgs{
//				CredentialType: pulumi.String("USERNAME_PASSWORD"),
//				Description:    pulumi.String("Created with Terraform"),
//				Password:       pulumi.String(""),
//				UserDomain:     pulumi.String("acme.com"),
//				Username:       pulumi.String("jdoe"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
// ######### PASSWORDS OR RELATED CREDENTIALS ATTRIBUTES IN THIS FILE ARE FOR EXAMPLE ONLY AND NOT USED IN PRODUCTION SYSTEMS #########
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Creates Credential of Type "SSH_KEY"
//			_, err := zpa.NewPRACredential(ctx, "this", &zpa.PRACredentialArgs{
//				CredentialType: pulumi.String("SSH_KEY"),
//				Description:    pulumi.String("Created with Terraform"),
//				PrivateKey: pulumi.String(`-----BEGIN PRIVATE KEY-----
//
// MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDEjc8pPoobS0l6
// KjldVtViVwqCTXZZOjHnmEIMn+XKU3sEYlqDKLp6TByIsBlITKd3Ju8qMBNwXcfi
// -----END PRIVATE KEY-----
//
// `),
//
//				UserDomain: pulumi.String("acme.com"),
//				Username:   pulumi.String("jdoe"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **pra_credential_controller** can be imported by using `<CREDENTIAL ID>` or `<CREDENTIAL NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/pRACredential:PRACredential this <credential_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/pRACredential:PRACredential this <credential_name>
// ```
type PRACredential struct {
	pulumi.CustomResourceState

	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrOutput `pulumi:"credentialType"`
	// The description of the privileged credential
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name pulumi.StringOutput `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrOutput `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewPRACredential registers a new resource with the given unique name, arguments, and options.
func NewPRACredential(ctx *pulumi.Context,
	name string, args *PRACredentialArgs, opts ...pulumi.ResourceOption) (*PRACredential, error) {
	if args == nil {
		args = &PRACredentialArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("zpa:index/praCredentialController:PraCredentialController"),
		},
	})
	opts = append(opts, aliases)
	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
		"password",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PRACredential
	err := ctx.RegisterResource("zpa:index/pRACredential:PRACredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPRACredential gets an existing PRACredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPRACredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PRACredentialState, opts ...pulumi.ResourceOption) (*PRACredential, error) {
	var resource PRACredential
	err := ctx.ReadResource("zpa:index/pRACredential:PRACredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PRACredential resources.
type pracredentialState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// The description of the privileged credential
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase *string `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password *string `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey *string `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain *string `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username *string `pulumi:"username"`
}

type PRACredentialState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// The description of the privileged credential
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrInput
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrInput
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrInput
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrInput
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrInput
}

func (PRACredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*pracredentialState)(nil)).Elem()
}

type pracredentialArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// The description of the privileged credential
	Description *string `pulumi:"description"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase *string `pulumi:"passphrase"`
	// The password associated with the username for the login you want to use for the privileged credential
	Password *string `pulumi:"password"`
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey *string `pulumi:"privateKey"`
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain *string `pulumi:"userDomain"`
	// The username for the login you want to use for the privileged credential
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a PRACredential resource.
type PRACredentialArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// The description of the privileged credential
	Description pulumi.StringPtrInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
	// The password that is used to protect the SSH private key. This field is optional
	Passphrase pulumi.StringPtrInput
	// The password associated with the username for the login you want to use for the privileged credential
	Password pulumi.StringPtrInput
	// The SSH private key associated with the username for the login you want to use for the privileged credential
	PrivateKey pulumi.StringPtrInput
	// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
	// console that is connected to an Active Directory Domain
	UserDomain pulumi.StringPtrInput
	// The username for the login you want to use for the privileged credential
	Username pulumi.StringPtrInput
}

func (PRACredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pracredentialArgs)(nil)).Elem()
}

type PRACredentialInput interface {
	pulumi.Input

	ToPRACredentialOutput() PRACredentialOutput
	ToPRACredentialOutputWithContext(ctx context.Context) PRACredentialOutput
}

func (*PRACredential) ElementType() reflect.Type {
	return reflect.TypeOf((**PRACredential)(nil)).Elem()
}

func (i *PRACredential) ToPRACredentialOutput() PRACredentialOutput {
	return i.ToPRACredentialOutputWithContext(context.Background())
}

func (i *PRACredential) ToPRACredentialOutputWithContext(ctx context.Context) PRACredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialOutput)
}

// PRACredentialArrayInput is an input type that accepts PRACredentialArray and PRACredentialArrayOutput values.
// You can construct a concrete instance of `PRACredentialArrayInput` via:
//
//	PRACredentialArray{ PRACredentialArgs{...} }
type PRACredentialArrayInput interface {
	pulumi.Input

	ToPRACredentialArrayOutput() PRACredentialArrayOutput
	ToPRACredentialArrayOutputWithContext(context.Context) PRACredentialArrayOutput
}

type PRACredentialArray []PRACredentialInput

func (PRACredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRACredential)(nil)).Elem()
}

func (i PRACredentialArray) ToPRACredentialArrayOutput() PRACredentialArrayOutput {
	return i.ToPRACredentialArrayOutputWithContext(context.Background())
}

func (i PRACredentialArray) ToPRACredentialArrayOutputWithContext(ctx context.Context) PRACredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialArrayOutput)
}

// PRACredentialMapInput is an input type that accepts PRACredentialMap and PRACredentialMapOutput values.
// You can construct a concrete instance of `PRACredentialMapInput` via:
//
//	PRACredentialMap{ "key": PRACredentialArgs{...} }
type PRACredentialMapInput interface {
	pulumi.Input

	ToPRACredentialMapOutput() PRACredentialMapOutput
	ToPRACredentialMapOutputWithContext(context.Context) PRACredentialMapOutput
}

type PRACredentialMap map[string]PRACredentialInput

func (PRACredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRACredential)(nil)).Elem()
}

func (i PRACredentialMap) ToPRACredentialMapOutput() PRACredentialMapOutput {
	return i.ToPRACredentialMapOutputWithContext(context.Background())
}

func (i PRACredentialMap) ToPRACredentialMapOutputWithContext(ctx context.Context) PRACredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialMapOutput)
}

type PRACredentialOutput struct{ *pulumi.OutputState }

func (PRACredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PRACredential)(nil)).Elem()
}

func (o PRACredentialOutput) ToPRACredentialOutput() PRACredentialOutput {
	return o
}

func (o PRACredentialOutput) ToPRACredentialOutputWithContext(ctx context.Context) PRACredentialOutput {
	return o
}

// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
// and VNC. Each protocol type has its own credential requirements.
func (o PRACredentialOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The description of the privileged credential
func (o PRACredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PRACredentialOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the privileged credential
func (o PRACredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password that is used to protect the SSH private key. This field is optional
func (o PRACredentialOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// The password associated with the username for the login you want to use for the privileged credential
func (o PRACredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH private key associated with the username for the login you want to use for the privileged credential
func (o PRACredentialOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
// console that is connected to an Active Directory Domain
func (o PRACredentialOutput) UserDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.UserDomain }).(pulumi.StringPtrOutput)
}

// The username for the login you want to use for the privileged credential
func (o PRACredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredential) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type PRACredentialArrayOutput struct{ *pulumi.OutputState }

func (PRACredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRACredential)(nil)).Elem()
}

func (o PRACredentialArrayOutput) ToPRACredentialArrayOutput() PRACredentialArrayOutput {
	return o
}

func (o PRACredentialArrayOutput) ToPRACredentialArrayOutputWithContext(ctx context.Context) PRACredentialArrayOutput {
	return o
}

func (o PRACredentialArrayOutput) Index(i pulumi.IntInput) PRACredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PRACredential {
		return vs[0].([]*PRACredential)[vs[1].(int)]
	}).(PRACredentialOutput)
}

type PRACredentialMapOutput struct{ *pulumi.OutputState }

func (PRACredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRACredential)(nil)).Elem()
}

func (o PRACredentialMapOutput) ToPRACredentialMapOutput() PRACredentialMapOutput {
	return o
}

func (o PRACredentialMapOutput) ToPRACredentialMapOutputWithContext(ctx context.Context) PRACredentialMapOutput {
	return o
}

func (o PRACredentialMapOutput) MapIndex(k pulumi.StringInput) PRACredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PRACredential {
		return vs[0].(map[string]*PRACredential)[vs[1].(string)]
	}).(PRACredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialInput)(nil)).Elem(), &PRACredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialArrayInput)(nil)).Elem(), PRACredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialMapInput)(nil)).Elem(), PRACredentialMap{})
	pulumi.RegisterOutputType(PRACredentialOutput{})
	pulumi.RegisterOutputType(PRACredentialArrayOutput{})
	pulumi.RegisterOutputType(PRACredentialMapOutput{})
}
