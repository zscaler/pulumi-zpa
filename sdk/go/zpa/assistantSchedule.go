// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/configuring-app-connectors-settings)
// * [API documentation](https://help.zscaler.com/zpa/configuring-auto-delete-disconnected-app-connectors-using-api)
//
// Use the **zpa_app_connector_assistant_schedule** resource sets the scheduled frequency at which the disconnected App Connectors are eligible for deletion. The supported value for frequency is days. The frequencyInterval field is the number of days after an App Connector disconnects for it to become eligible for deletion. The minimum supported value for frequencyInterval is 5.
//
// > **NOTE** - When enabling the Assistant Schedule for the first time, you must provide the `customerId` information. If you authenticated using environment variables and used `ZPA_CUSTOMER_ID` environment variable, you don't have to define the customerId attribute in the HCL configuration, and the provider will automatically use the value from the environment variable `ZPA_CUSTOMER_ID`
//
// ## Example Usage
//
// ### Defined Customer ID Value
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.NewAssistantSchedule(ctx, "this", &zpa.AssistantScheduleArgs{
//				CustomerId:        pulumi.String("123456789101112"),
//				DeleteDisabled:    pulumi.Bool(true),
//				Enabled:           pulumi.Bool(true),
//				Frequency:         pulumi.String("days"),
//				FrequencyInterval: pulumi.String("5"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Customer ID Via Environment Variable
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zpa.NewAssistantSchedule(ctx, "this", &zpa.AssistantScheduleArgs{
//				DeleteDisabled:    pulumi.Bool(true),
//				Enabled:           pulumi.Bool(true),
//				Frequency:         pulumi.String("days"),
//				FrequencyInterval: pulumi.String("5"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Import is not currently supported for this resource.
type AssistantSchedule struct {
	pulumi.CustomResourceState

	CustomerId        pulumi.StringOutput    `pulumi:"customerId"`
	DeleteDisabled    pulumi.BoolPtrOutput   `pulumi:"deleteDisabled"`
	Enabled           pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Frequency         pulumi.StringPtrOutput `pulumi:"frequency"`
	FrequencyInterval pulumi.StringPtrOutput `pulumi:"frequencyInterval"`
}

// NewAssistantSchedule registers a new resource with the given unique name, arguments, and options.
func NewAssistantSchedule(ctx *pulumi.Context,
	name string, args *AssistantScheduleArgs, opts ...pulumi.ResourceOption) (*AssistantSchedule, error) {
	if args == nil {
		args = &AssistantScheduleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssistantSchedule
	err := ctx.RegisterResource("zpa:index/assistantSchedule:AssistantSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssistantSchedule gets an existing AssistantSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssistantSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssistantScheduleState, opts ...pulumi.ResourceOption) (*AssistantSchedule, error) {
	var resource AssistantSchedule
	err := ctx.ReadResource("zpa:index/assistantSchedule:AssistantSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssistantSchedule resources.
type assistantScheduleState struct {
	CustomerId        *string `pulumi:"customerId"`
	DeleteDisabled    *bool   `pulumi:"deleteDisabled"`
	Enabled           *bool   `pulumi:"enabled"`
	Frequency         *string `pulumi:"frequency"`
	FrequencyInterval *string `pulumi:"frequencyInterval"`
}

type AssistantScheduleState struct {
	CustomerId        pulumi.StringPtrInput
	DeleteDisabled    pulumi.BoolPtrInput
	Enabled           pulumi.BoolPtrInput
	Frequency         pulumi.StringPtrInput
	FrequencyInterval pulumi.StringPtrInput
}

func (AssistantScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantScheduleState)(nil)).Elem()
}

type assistantScheduleArgs struct {
	CustomerId        *string `pulumi:"customerId"`
	DeleteDisabled    *bool   `pulumi:"deleteDisabled"`
	Enabled           *bool   `pulumi:"enabled"`
	Frequency         *string `pulumi:"frequency"`
	FrequencyInterval *string `pulumi:"frequencyInterval"`
}

// The set of arguments for constructing a AssistantSchedule resource.
type AssistantScheduleArgs struct {
	CustomerId        pulumi.StringPtrInput
	DeleteDisabled    pulumi.BoolPtrInput
	Enabled           pulumi.BoolPtrInput
	Frequency         pulumi.StringPtrInput
	FrequencyInterval pulumi.StringPtrInput
}

func (AssistantScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assistantScheduleArgs)(nil)).Elem()
}

type AssistantScheduleInput interface {
	pulumi.Input

	ToAssistantScheduleOutput() AssistantScheduleOutput
	ToAssistantScheduleOutputWithContext(ctx context.Context) AssistantScheduleOutput
}

func (*AssistantSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**AssistantSchedule)(nil)).Elem()
}

func (i *AssistantSchedule) ToAssistantScheduleOutput() AssistantScheduleOutput {
	return i.ToAssistantScheduleOutputWithContext(context.Background())
}

func (i *AssistantSchedule) ToAssistantScheduleOutputWithContext(ctx context.Context) AssistantScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantScheduleOutput)
}

// AssistantScheduleArrayInput is an input type that accepts AssistantScheduleArray and AssistantScheduleArrayOutput values.
// You can construct a concrete instance of `AssistantScheduleArrayInput` via:
//
//	AssistantScheduleArray{ AssistantScheduleArgs{...} }
type AssistantScheduleArrayInput interface {
	pulumi.Input

	ToAssistantScheduleArrayOutput() AssistantScheduleArrayOutput
	ToAssistantScheduleArrayOutputWithContext(context.Context) AssistantScheduleArrayOutput
}

type AssistantScheduleArray []AssistantScheduleInput

func (AssistantScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssistantSchedule)(nil)).Elem()
}

func (i AssistantScheduleArray) ToAssistantScheduleArrayOutput() AssistantScheduleArrayOutput {
	return i.ToAssistantScheduleArrayOutputWithContext(context.Background())
}

func (i AssistantScheduleArray) ToAssistantScheduleArrayOutputWithContext(ctx context.Context) AssistantScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantScheduleArrayOutput)
}

// AssistantScheduleMapInput is an input type that accepts AssistantScheduleMap and AssistantScheduleMapOutput values.
// You can construct a concrete instance of `AssistantScheduleMapInput` via:
//
//	AssistantScheduleMap{ "key": AssistantScheduleArgs{...} }
type AssistantScheduleMapInput interface {
	pulumi.Input

	ToAssistantScheduleMapOutput() AssistantScheduleMapOutput
	ToAssistantScheduleMapOutputWithContext(context.Context) AssistantScheduleMapOutput
}

type AssistantScheduleMap map[string]AssistantScheduleInput

func (AssistantScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssistantSchedule)(nil)).Elem()
}

func (i AssistantScheduleMap) ToAssistantScheduleMapOutput() AssistantScheduleMapOutput {
	return i.ToAssistantScheduleMapOutputWithContext(context.Background())
}

func (i AssistantScheduleMap) ToAssistantScheduleMapOutputWithContext(ctx context.Context) AssistantScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssistantScheduleMapOutput)
}

type AssistantScheduleOutput struct{ *pulumi.OutputState }

func (AssistantScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssistantSchedule)(nil)).Elem()
}

func (o AssistantScheduleOutput) ToAssistantScheduleOutput() AssistantScheduleOutput {
	return o
}

func (o AssistantScheduleOutput) ToAssistantScheduleOutputWithContext(ctx context.Context) AssistantScheduleOutput {
	return o
}

func (o AssistantScheduleOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AssistantSchedule) pulumi.StringOutput { return v.CustomerId }).(pulumi.StringOutput)
}

func (o AssistantScheduleOutput) DeleteDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AssistantSchedule) pulumi.BoolPtrOutput { return v.DeleteDisabled }).(pulumi.BoolPtrOutput)
}

func (o AssistantScheduleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AssistantSchedule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AssistantScheduleOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssistantSchedule) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

func (o AssistantScheduleOutput) FrequencyInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssistantSchedule) pulumi.StringPtrOutput { return v.FrequencyInterval }).(pulumi.StringPtrOutput)
}

type AssistantScheduleArrayOutput struct{ *pulumi.OutputState }

func (AssistantScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssistantSchedule)(nil)).Elem()
}

func (o AssistantScheduleArrayOutput) ToAssistantScheduleArrayOutput() AssistantScheduleArrayOutput {
	return o
}

func (o AssistantScheduleArrayOutput) ToAssistantScheduleArrayOutputWithContext(ctx context.Context) AssistantScheduleArrayOutput {
	return o
}

func (o AssistantScheduleArrayOutput) Index(i pulumi.IntInput) AssistantScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssistantSchedule {
		return vs[0].([]*AssistantSchedule)[vs[1].(int)]
	}).(AssistantScheduleOutput)
}

type AssistantScheduleMapOutput struct{ *pulumi.OutputState }

func (AssistantScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssistantSchedule)(nil)).Elem()
}

func (o AssistantScheduleMapOutput) ToAssistantScheduleMapOutput() AssistantScheduleMapOutput {
	return o
}

func (o AssistantScheduleMapOutput) ToAssistantScheduleMapOutputWithContext(ctx context.Context) AssistantScheduleMapOutput {
	return o
}

func (o AssistantScheduleMapOutput) MapIndex(k pulumi.StringInput) AssistantScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssistantSchedule {
		return vs[0].(map[string]*AssistantSchedule)[vs[1].(string)]
	}).(AssistantScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantScheduleInput)(nil)).Elem(), &AssistantSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantScheduleArrayInput)(nil)).Elem(), AssistantScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssistantScheduleMapInput)(nil)).Elem(), AssistantScheduleMap{})
	pulumi.RegisterOutputType(AssistantScheduleOutput{})
	pulumi.RegisterOutputType(AssistantScheduleArrayOutput{})
	pulumi.RegisterOutputType(AssistantScheduleMapOutput{})
}
