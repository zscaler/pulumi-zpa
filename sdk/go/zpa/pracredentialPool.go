// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zpa/sdk/go/zpa/internal"
)

// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credential-pools)
// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
//
// The **zpa_pra_credential_pool** resource creates a privileged remote access credential pool in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisPRACredential, err := zpa.NewPRACredential(ctx, "thisPRACredential", &zpa.PRACredentialArgs{
//				Description:    pulumi.String("Created with Terraform"),
//				CredentialType: pulumi.String("PASSWORD"),
//				UserDomain:     pulumi.String("acme.com"),
//				Password:       pulumi.String(""),
//			})
//			if err != nil {
//				return err
//			}
//			// Creates Credential Pool of Type "USERNAME_PASSWORD"
//			_, err = zpa.NewPRACredentialPool(ctx, "thisPRACredentialPool", &zpa.PRACredentialPoolArgs{
//				CredentialType: pulumi.String("USERNAME_PASSWORD"),
//				Credentials: zpa.PRACredentialPoolCredentialArray{
//					&zpa.PRACredentialPoolCredentialArgs{
//						Ids: pulumi.StringArray{
//							thisPRACredential.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zpa_pra_credential_pool** can be imported by using `<POOL ID>` or `<POOL NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zpa:index/pRACredentialPool:PRACredentialPool this <pool_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zpa:index/pRACredentialPool:PRACredentialPool this <pool_name>
// ```
type PRACredentialPool struct {
	pulumi.CustomResourceState

	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrOutput `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials PRACredentialPoolCredentialArrayOutput `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringOutput `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPRACredentialPool registers a new resource with the given unique name, arguments, and options.
func NewPRACredentialPool(ctx *pulumi.Context,
	name string, args *PRACredentialPoolArgs, opts ...pulumi.ResourceOption) (*PRACredentialPool, error) {
	if args == nil {
		args = &PRACredentialPoolArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PRACredentialPool
	err := ctx.RegisterResource("zpa:index/pRACredentialPool:PRACredentialPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPRACredentialPool gets an existing PRACredentialPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPRACredentialPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PRACredentialPoolState, opts ...pulumi.ResourceOption) (*PRACredentialPool, error) {
	var resource PRACredentialPool
	err := ctx.ReadResource("zpa:index/pRACredentialPool:PRACredentialPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PRACredentialPool resources.
type pracredentialPoolState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials []PRACredentialPoolCredential `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
}

type PRACredentialPoolState struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// List of PRA Credentials
	Credentials PRACredentialPoolCredentialArrayInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
}

func (PRACredentialPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*pracredentialPoolState)(nil)).Elem()
}

type pracredentialPoolArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType *string `pulumi:"credentialType"`
	// List of PRA Credentials
	Credentials []PRACredentialPoolCredential `pulumi:"credentials"`
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId *string `pulumi:"microtenantId"`
	// The name of the privileged credential
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PRACredentialPool resource.
type PRACredentialPoolArgs struct {
	// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
	// and VNC. Each protocol type has its own credential requirements.
	CredentialType pulumi.StringPtrInput
	// List of PRA Credentials
	Credentials PRACredentialPoolCredentialArrayInput
	// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
	// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
	MicrotenantId pulumi.StringPtrInput
	// The name of the privileged credential
	Name pulumi.StringPtrInput
}

func (PRACredentialPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pracredentialPoolArgs)(nil)).Elem()
}

type PRACredentialPoolInput interface {
	pulumi.Input

	ToPRACredentialPoolOutput() PRACredentialPoolOutput
	ToPRACredentialPoolOutputWithContext(ctx context.Context) PRACredentialPoolOutput
}

func (*PRACredentialPool) ElementType() reflect.Type {
	return reflect.TypeOf((**PRACredentialPool)(nil)).Elem()
}

func (i *PRACredentialPool) ToPRACredentialPoolOutput() PRACredentialPoolOutput {
	return i.ToPRACredentialPoolOutputWithContext(context.Background())
}

func (i *PRACredentialPool) ToPRACredentialPoolOutputWithContext(ctx context.Context) PRACredentialPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialPoolOutput)
}

// PRACredentialPoolArrayInput is an input type that accepts PRACredentialPoolArray and PRACredentialPoolArrayOutput values.
// You can construct a concrete instance of `PRACredentialPoolArrayInput` via:
//
//	PRACredentialPoolArray{ PRACredentialPoolArgs{...} }
type PRACredentialPoolArrayInput interface {
	pulumi.Input

	ToPRACredentialPoolArrayOutput() PRACredentialPoolArrayOutput
	ToPRACredentialPoolArrayOutputWithContext(context.Context) PRACredentialPoolArrayOutput
}

type PRACredentialPoolArray []PRACredentialPoolInput

func (PRACredentialPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRACredentialPool)(nil)).Elem()
}

func (i PRACredentialPoolArray) ToPRACredentialPoolArrayOutput() PRACredentialPoolArrayOutput {
	return i.ToPRACredentialPoolArrayOutputWithContext(context.Background())
}

func (i PRACredentialPoolArray) ToPRACredentialPoolArrayOutputWithContext(ctx context.Context) PRACredentialPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialPoolArrayOutput)
}

// PRACredentialPoolMapInput is an input type that accepts PRACredentialPoolMap and PRACredentialPoolMapOutput values.
// You can construct a concrete instance of `PRACredentialPoolMapInput` via:
//
//	PRACredentialPoolMap{ "key": PRACredentialPoolArgs{...} }
type PRACredentialPoolMapInput interface {
	pulumi.Input

	ToPRACredentialPoolMapOutput() PRACredentialPoolMapOutput
	ToPRACredentialPoolMapOutputWithContext(context.Context) PRACredentialPoolMapOutput
}

type PRACredentialPoolMap map[string]PRACredentialPoolInput

func (PRACredentialPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRACredentialPool)(nil)).Elem()
}

func (i PRACredentialPoolMap) ToPRACredentialPoolMapOutput() PRACredentialPoolMapOutput {
	return i.ToPRACredentialPoolMapOutputWithContext(context.Background())
}

func (i PRACredentialPoolMap) ToPRACredentialPoolMapOutputWithContext(ctx context.Context) PRACredentialPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PRACredentialPoolMapOutput)
}

type PRACredentialPoolOutput struct{ *pulumi.OutputState }

func (PRACredentialPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PRACredentialPool)(nil)).Elem()
}

func (o PRACredentialPoolOutput) ToPRACredentialPoolOutput() PRACredentialPoolOutput {
	return o
}

func (o PRACredentialPoolOutput) ToPRACredentialPoolOutputWithContext(ctx context.Context) PRACredentialPoolOutput {
	return o
}

// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
// and VNC. Each protocol type has its own credential requirements.
func (o PRACredentialPoolOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PRACredentialPool) pulumi.StringPtrOutput { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// List of PRA Credentials
func (o PRACredentialPoolOutput) Credentials() PRACredentialPoolCredentialArrayOutput {
	return o.ApplyT(func(v *PRACredentialPool) PRACredentialPoolCredentialArrayOutput { return v.Credentials }).(PRACredentialPoolCredentialArrayOutput)
}

// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
func (o PRACredentialPoolOutput) MicrotenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PRACredentialPool) pulumi.StringOutput { return v.MicrotenantId }).(pulumi.StringOutput)
}

// The name of the privileged credential
func (o PRACredentialPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PRACredentialPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PRACredentialPoolArrayOutput struct{ *pulumi.OutputState }

func (PRACredentialPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PRACredentialPool)(nil)).Elem()
}

func (o PRACredentialPoolArrayOutput) ToPRACredentialPoolArrayOutput() PRACredentialPoolArrayOutput {
	return o
}

func (o PRACredentialPoolArrayOutput) ToPRACredentialPoolArrayOutputWithContext(ctx context.Context) PRACredentialPoolArrayOutput {
	return o
}

func (o PRACredentialPoolArrayOutput) Index(i pulumi.IntInput) PRACredentialPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PRACredentialPool {
		return vs[0].([]*PRACredentialPool)[vs[1].(int)]
	}).(PRACredentialPoolOutput)
}

type PRACredentialPoolMapOutput struct{ *pulumi.OutputState }

func (PRACredentialPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PRACredentialPool)(nil)).Elem()
}

func (o PRACredentialPoolMapOutput) ToPRACredentialPoolMapOutput() PRACredentialPoolMapOutput {
	return o
}

func (o PRACredentialPoolMapOutput) ToPRACredentialPoolMapOutputWithContext(ctx context.Context) PRACredentialPoolMapOutput {
	return o
}

func (o PRACredentialPoolMapOutput) MapIndex(k pulumi.StringInput) PRACredentialPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PRACredentialPool {
		return vs[0].(map[string]*PRACredentialPool)[vs[1].(string)]
	}).(PRACredentialPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialPoolInput)(nil)).Elem(), &PRACredentialPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialPoolArrayInput)(nil)).Elem(), PRACredentialPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PRACredentialPoolMapInput)(nil)).Elem(), PRACredentialPoolMap{})
	pulumi.RegisterOutputType(PRACredentialPoolOutput{})
	pulumi.RegisterOutputType(PRACredentialPoolArrayOutput{})
	pulumi.RegisterOutputType(PRACredentialPoolMapOutput{})
}
