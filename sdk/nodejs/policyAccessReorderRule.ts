// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api)
 *
 * The **zpa_policy_access_rule_reorder** is a dedicated resource to manage and update `ruleOrders` in any of the supported ZPA Policy Access types Zscaler Private Access cloud.
 *
 * ⚠️ **WARNING:**: The attribute ``ruleOrder`` is now deprecated in favor of this resource for all ZPA policy types.
 *
 * ⚠️ **WARNING:**: Updating the rule order of an access policy configured using `Zscaler Deception` is not supported. When changing the rule order of a regular access policy and there is an access policy configured using Deception, the rule order of the regular access policy must be greater than the rule order for an access policy configured using Deception. Please refer to the [Zscaler API Documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#:~:text=Updating%20the%20rule,configured%20using%20Deception.) for further details.
 *
 * ## Example Usage
 *
 * ### 1
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * const example001 = new zpa.PolicyAccessRule("example001", {
 *     name: "example001",
 *     description: "example001",
 *     action: "ALLOW",
 *     operator: "AND",
 * });
 * const example002 = new zpa.PolicyAccessRule("example002", {
 *     name: "example002",
 *     description: "example002",
 *     action: "ALLOW",
 *     operator: "AND",
 * });
 * const ruleOrders = [
 *     {
 *         id: example001.id,
 *         order: 1,
 *     },
 *     {
 *         id: example002.id,
 *         order: 2,
 *     },
 * ];
 * const accessPolicyReorder = new zpa.PolicyAccessReorderRule("access_policy_reorder", {
 *     rules: ruleOrders.map((v, k) => ({key: k, value: v})).apply(entries => entries.map(entry => ({
 *         id: entry.value.id,
 *         order: entry.value.order,
 *     }))),
 *     policyType: "ACCESS_POLICY",
 * });
 * ```
 */
export class PolicyAccessReorderRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicyAccessReorderRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyAccessReorderRuleState, opts?: pulumi.CustomResourceOptions): PolicyAccessReorderRule {
        return new PolicyAccessReorderRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/policyAccessReorderRule:PolicyAccessReorderRule';

    /**
     * Returns true if the given object is an instance of PolicyAccessReorderRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyAccessReorderRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyAccessReorderRule.__pulumiType;
    }

    public readonly policyType!: pulumi.Output<string>;
    /**
     * List of rules and their orders
     */
    public readonly rules!: pulumi.Output<outputs.PolicyAccessReorderRuleRule[]>;

    /**
     * Create a PolicyAccessReorderRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyAccessReorderRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyAccessReorderRuleArgs | PolicyAccessReorderRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyAccessReorderRuleState | undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as PolicyAccessReorderRuleArgs | undefined;
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyAccessReorderRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyAccessReorderRule resources.
 */
export interface PolicyAccessReorderRuleState {
    policyType?: pulumi.Input<string>;
    /**
     * List of rules and their orders
     */
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyAccessReorderRuleRule>[]>;
}

/**
 * The set of arguments for constructing a PolicyAccessReorderRule resource.
 */
export interface PolicyAccessReorderRuleArgs {
    policyType: pulumi.Input<string>;
    /**
     * List of rules and their orders
     */
    rules: pulumi.Input<pulumi.Input<inputs.PolicyAccessReorderRuleRule>[]>;
}
