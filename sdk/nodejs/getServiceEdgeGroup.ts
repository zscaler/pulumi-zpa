// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
 *
 * Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
 *
 * **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
 *
 * * Create a server group
 * * Provisioning Key
 * * Access policy rule
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const foo = zpa.getServiceEdgeGroup({
 *     name: "DataCenter",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const foo = zpa.getServiceEdgeGroup({
 *     id: "123456789",
 * });
 * ```
 */
export function getServiceEdgeGroup(args?: GetServiceEdgeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceEdgeGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceEdgeGroup.
 */
export interface GetServiceEdgeGroupArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getServiceEdgeGroup.
 */
export interface GetServiceEdgeGroupResult {
    readonly altCloud: string;
    readonly cityCountry: string;
    readonly countryCode: string;
    readonly creationTime: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly geoLocationId: string;
    readonly graceDistanceEnabled: boolean;
    readonly graceDistanceValue: string;
    readonly graceDistanceValueUnit: string;
    readonly id: string;
    readonly isPublic: string;
    readonly latitude: string;
    readonly location: string;
    readonly longitude: string;
    readonly modifiedBy: string;
    readonly modifiedTime: string;
    readonly name: string;
    readonly overrideVersionProfile: boolean;
    readonly serviceEdges: outputs.GetServiceEdgeGroupServiceEdge[];
    readonly siteId: string;
    readonly siteName: string;
    readonly trustedNetworks: outputs.GetServiceEdgeGroupTrustedNetwork[];
    readonly upgradeDay: string;
    readonly upgradeTimeInSecs: string;
    readonly useInDrMode: boolean;
    readonly versionProfileId: string;
    readonly versionProfileName: string;
    readonly versionProfileVisibilityScope: string;
}
/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
 *
 * Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
 *
 * **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
 *
 * * Create a server group
 * * Provisioning Key
 * * Access policy rule
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const foo = zpa.getServiceEdgeGroup({
 *     name: "DataCenter",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const foo = zpa.getServiceEdgeGroup({
 *     id: "123456789",
 * });
 * ```
 */
export function getServiceEdgeGroupOutput(args?: GetServiceEdgeGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceEdgeGroupResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceEdgeGroup.
 */
export interface GetServiceEdgeGroupOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
