// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getServiceEdgeController({
 *     name: "On-Prem-PSE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServiceEdgeController(args?: GetServiceEdgeControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceEdgeControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getServiceEdgeController:getServiceEdgeController", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceEdgeController.
 */
export interface GetServiceEdgeControllerArgs {
    /**
     * The name of the service edge controller to be exported.
     */
    name?: string;
}

/**
 * A collection of values returned by getServiceEdgeController.
 */
export interface GetServiceEdgeControllerResult {
    /**
     * (string)
     */
    readonly applicationStartTime: string;
    /**
     * (string)
     */
    readonly controlChannelStatus: string;
    /**
     * (string)
     */
    readonly creationTime: string;
    /**
     * (string)
     */
    readonly ctrlBrokerName: string;
    /**
     * (string)
     */
    readonly currentVersion: string;
    /**
     * (string) - Description of the App Connector.
     */
    readonly description: string;
    /**
     * (bool) Whether this Service Edge Controller is enabled or not. Default value: `true`. Supported values: `true`, `false`
     */
    readonly enabled: boolean;
    /**
     * (string)
     */
    readonly enrollmentCert: {[key: string]: any};
    /**
     * (string)
     */
    readonly expectedUpgradeTime: string;
    /**
     * (string)
     */
    readonly expectedVersion: string;
    readonly fingerprint: string;
    readonly id: string;
    /**
     * (string)
     */
    readonly ipAcl: string;
    /**
     * (string)
     */
    readonly issuedCertId: string;
    /**
     * (string)
     */
    readonly lastBrokerConnectTime: string;
    /**
     * (string)
     */
    readonly lastBrokerConnectTimeDuration: string;
    /**
     * (string)
     */
    readonly lastBrokerDisconnectTime: string;
    /**
     * (string)
     */
    readonly lastBrokerDisconnectTimeDuration: string;
    /**
     * (string)
     */
    readonly lastUpgradeTime: string;
    /**
     * (string) Latitude of the Service Edge Controller. Integer or decimal. With values in the range of `-90` to `90`
     */
    readonly latitude: string;
    readonly listenIps: string;
    /**
     * (string) Location of the Service Edge Controller.
     */
    readonly location: string;
    /**
     * (string) Longitude of the Service Edge Controller. Integer or decimal. With values in the range of `-180` to `180`
     */
    readonly longitude: string;
    /**
     * (string)
     */
    readonly modifiedBy: string;
    /**
     * (string)
     */
    readonly modifiedTime: string;
    readonly name?: string;
    /**
     * (string)
     */
    readonly platform: string;
    /**
     * (string)
     */
    readonly previousVersion: string;
    /**
     * (string)
     */
    readonly privateIp: string;
    /**
     * (string)
     */
    readonly provisioningKeyId: string;
    /**
     * (string)
     */
    readonly provisioningKeyName: string;
    /**
     * (string)
     */
    readonly publicIp: string;
    readonly publishIps: string[];
    /**
     * (string)
     */
    readonly sargeVersion: string;
    readonly serviceEdgeGroupId: string;
    readonly serviceEdgeGroupName: string;
    /**
     * (string)
     */
    readonly upgradeAttempt: string;
    /**
     * (string)
     */
    readonly upgradeStatus: string;
    readonly zpnSubModuleUpgradeLists: outputs.GetServiceEdgeControllerZpnSubModuleUpgradeList[];
}
/**
 * Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getServiceEdgeController({
 *     name: "On-Prem-PSE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServiceEdgeControllerOutput(args?: GetServiceEdgeControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceEdgeControllerResult> {
    return pulumi.output(args).apply((a: any) => getServiceEdgeController(a, opts))
}

/**
 * A collection of arguments for invoking getServiceEdgeController.
 */
export interface GetServiceEdgeControllerOutputArgs {
    /**
     * The name of the service edge controller to be exported.
     */
    name?: pulumi.Input<string>;
}
