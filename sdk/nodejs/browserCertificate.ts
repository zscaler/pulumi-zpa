// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-web-server-certificates)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-certificates-using-api)
 *
 * Use the **zpa_ba_certificate** creates a browser access certificate with a private key in the Zscaler Private Access cloud. This resource is required when creating a browser access application segment resource.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const foo = zpa.getBaCertificate({
 *     name: "example.acme.com",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Browser Access resource
 * const _this = new zpa.BrowserCertificate("this", {
 *     certBlob: `-----BEGIN CERTIFICATE-----
 * MIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL
 * BQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw
 * EAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE
 * -----END CERTIFICATE-----
 *
 * `,
 *     description: "server.example.com",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Let's Encrypt Certbot
 *
 * This example demonstrates generatoring a domain certificate with letsencrypt
 * certbot https://letsencrypt.org/getting-started/
 *
 * Use letsencrypt's certbot to generate domain certificates in RSA output mode.
 * The generator's output corresponds to `zpa.BrowserCertificate` fields in the
 * following manner.
 *
 * Zscaler Field          | Certbot file
 * --------------------|--------------
 * `certblob`          | `cert.pem`
 * `certblob`          | `privkey.pem`
 *
 * ## Import
 *
 * This resource does not support importing.
 */
export class BrowserCertificate extends pulumi.CustomResource {
    /**
     * Get an existing BrowserCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrowserCertificateState, opts?: pulumi.CustomResourceOptions): BrowserCertificate {
        return new BrowserCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/browserCertificate:BrowserCertificate';

    /**
     * Returns true if the given object is an instance of BrowserCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrowserCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrowserCertificate.__pulumiType;
    }

    /**
     * The description of the certificate
     */
    public readonly certBlob!: pulumi.Output<string | undefined>;
    /**
     * The certificate text in PEM format
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * The description of the certificate
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the Microtenant
     */
    public readonly microtenantId!: pulumi.Output<string>;
    /**
     * The name of the certificate.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a BrowserCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BrowserCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrowserCertificateArgs | BrowserCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrowserCertificateState | undefined;
            resourceInputs["certBlob"] = state ? state.certBlob : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["microtenantId"] = state ? state.microtenantId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as BrowserCertificateArgs | undefined;
            resourceInputs["certBlob"] = args ? args.certBlob : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["microtenantId"] = args ? args.microtenantId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrowserCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BrowserCertificate resources.
 */
export interface BrowserCertificateState {
    /**
     * The description of the certificate
     */
    certBlob?: pulumi.Input<string>;
    /**
     * The certificate text in PEM format
     */
    certificate?: pulumi.Input<string>;
    /**
     * The description of the certificate
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BrowserCertificate resource.
 */
export interface BrowserCertificateArgs {
    /**
     * The description of the certificate
     */
    certBlob?: pulumi.Input<string>;
    /**
     * The description of the certificate
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    name?: pulumi.Input<string>;
}
