// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credentials)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
 *
 * The **zpa_pra_credential_controller** resource creates a privileged remote access credential in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // Creates Credential of Type "USERNAME_PASSWORD"
 * const _this = new zpa.PRACredential("this", {
 *     credentialType: "USERNAME_PASSWORD",
 *     description: "Created with Terraform",
 *     password: "",
 *     userDomain: "acme.com",
 *     username: "jdoe",
 * });
 * ```
 *
 * ######### PASSWORDS OR RELATED CREDENTIALS ATTRIBUTES IN THIS FILE #########\
 * ######### ARE FOR EXAMPLE ONLY AND NOT USED IN PRODUCTION SYSTEMS ##########
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // Creates Credential of Type "SSH_KEY"
 * const _this = new zpa.PRACredential("this", {
 *     credentialType: "SSH_KEY",
 *     description: "Created with Terraform",
 *     privateKey: `-----BEGIN PRIVATE KEY-----
 * MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDEjc8pPoobS0l6
 * -----END PRIVATE KEY-----
 *
 * `,
 *     userDomain: "acme.com",
 *     username: "jdoe",
 * });
 * ```
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **pra_credential_controller** can be imported by using `<CREDENTIAL ID>` or `<CREDENTIAL NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zpa:index/praCredentialController:PraCredentialController this <credential_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zpa:index/praCredentialController:PraCredentialController this <credential_name>
 * ```
 *
 * @deprecated zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential
 */
export class PraCredentialController extends pulumi.CustomResource {
    /**
     * Get an existing PraCredentialController resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PraCredentialControllerState, opts?: pulumi.CustomResourceOptions): PraCredentialController {
        pulumi.log.warn("PraCredentialController is deprecated: zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential")
        return new PraCredentialController(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/praCredentialController:PraCredentialController';

    /**
     * Returns true if the given object is an instance of PraCredentialController.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PraCredentialController {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PraCredentialController.__pulumiType;
    }

    /**
     * The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
     * and VNC. Each protocol type has its own credential requirements.
     */
    public readonly credentialType!: pulumi.Output<string | undefined>;
    /**
     * The description of the privileged credential
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    public readonly microtenantId!: pulumi.Output<string>;
    /**
     * The name of the privileged credential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password that is used to protect the SSH private key. This field is optional
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * The password associated with the username for the login you want to use for the privileged credential
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The SSH private key associated with the username for the login you want to use for the privileged credential
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
     * console that is connected to an Active Directory Domain
     */
    public readonly userDomain!: pulumi.Output<string | undefined>;
    /**
     * The username for the login you want to use for the privileged credential
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a PraCredentialController resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential */
    constructor(name: string, args?: PraCredentialControllerArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential */
    constructor(name: string, argsOrState?: PraCredentialControllerArgs | PraCredentialControllerState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("PraCredentialController is deprecated: zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PraCredentialControllerState | undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["microtenantId"] = state ? state.microtenantId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["userDomain"] = state ? state.userDomain : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as PraCredentialControllerArgs | undefined;
            resourceInputs["credentialType"] = args ? args.credentialType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["microtenantId"] = args ? args.microtenantId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["userDomain"] = args ? args.userDomain : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase", "password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PraCredentialController.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PraCredentialController resources.
 */
export interface PraCredentialControllerState {
    /**
     * The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
     * and VNC. Each protocol type has its own credential requirements.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * The description of the privileged credential
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The name of the privileged credential
     */
    name?: pulumi.Input<string>;
    /**
     * The password that is used to protect the SSH private key. This field is optional
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The password associated with the username for the login you want to use for the privileged credential
     */
    password?: pulumi.Input<string>;
    /**
     * The SSH private key associated with the username for the login you want to use for the privileged credential
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
     * console that is connected to an Active Directory Domain
     */
    userDomain?: pulumi.Input<string>;
    /**
     * The username for the login you want to use for the privileged credential
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PraCredentialController resource.
 */
export interface PraCredentialControllerArgs {
    /**
     * The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
     * and VNC. Each protocol type has its own credential requirements.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * The description of the privileged credential
     */
    description?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The name of the privileged credential
     */
    name?: pulumi.Input<string>;
    /**
     * The password that is used to protect the SSH private key. This field is optional
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The password associated with the username for the login you want to use for the privileged credential
     */
    password?: pulumi.Input<string>;
    /**
     * The SSH private key associated with the username for the login you want to use for the privileged credential
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
     * console that is connected to an Active Directory Domain
     */
    userDomain?: pulumi.Input<string>;
    /**
     * The username for the login you want to use for the privileged credential
     */
    username?: pulumi.Input<string>;
}
