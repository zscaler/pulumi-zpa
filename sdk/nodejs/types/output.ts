// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationSegmentBrowserAccessClientlessApp {
    /**
     * If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
     */
    allowOptions?: boolean;
    /**
     * Port for the BA app.
     */
    applicationPort: string;
    /**
     * Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
     */
    applicationProtocol: string;
    /**
     * ID of the BA certificate. Refer to the data source documentation for `zpa.BrowserCertificate`
     */
    certificateId: string;
    /**
     * (Optional)
     */
    cname: string;
    /**
     * (Optional) Description of the application.
     */
    description?: string;
    /**
     * Domain name or IP address of the BA app.
     */
    domain?: string;
    /**
     * (Optional) - Whether this app is enabled or not.
     */
    enabled: boolean;
    /**
     * (Optional)
     */
    hidden: boolean;
    id: string;
    /**
     * (Optional)
     */
    localDomain?: string;
    /**
     * Name of BA app.
     */
    name: string;
    /**
     * (Optional)
     */
    path?: string;
    /**
     * (Optional)
     */
    trustUntrustedCert: boolean;
}

export interface ApplicationSegmentBrowserAccessServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentBrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentBrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentInspectionCommonAppsDto {
    appsConfigs?: outputs.ApplicationSegmentInspectionCommonAppsDtoAppsConfig[];
}

export interface ApplicationSegmentInspectionCommonAppsDtoAppsConfig {
    /**
     * Indicates the type of application as inspection. Supported value: `INSPECT`
     */
    appTypes?: string[];
    /**
     * Port for the Inspection Application Segment.
     */
    applicationPort?: string;
    /**
     * Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`
     */
    applicationProtocol?: string;
    /**
     * ID of the signing certificate. This field is required if the ``applicationProtocol`` is set to `HTTPS`. The ``certificateId`` is **NOT** supported if the applicationProtocol is set to `HTTP`.
     */
    certificateId?: string;
    /**
     * (Optional) Description of the application.
     */
    description?: string;
    /**
     * Domain name of the Inspection Application Segment.
     */
    domain?: string;
    /**
     * Whether this application is enabled or not
     */
    enabled?: boolean;
    /**
     * Name of the Inspection Application Segment.
     */
    name?: string;
    trustUntrustedCert?: boolean;
}

export interface ApplicationSegmentInspectionServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentInspectionTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentInspectionUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentPRACommonAppsDto {
    appsConfigs?: outputs.ApplicationSegmentPRACommonAppsDtoAppsConfig[];
}

export interface ApplicationSegmentPRACommonAppsDtoAppsConfig {
    appId: string;
    /**
     * Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`
     */
    appTypes?: string[];
    /**
     * Port for the Privileged Remote Access
     */
    applicationPort?: string;
    /**
     * Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
     */
    applicationProtocol?: string;
    /**
     * Parameter required when `applicationProtocol` is of type `RDP`
     */
    connectionSecurity?: string;
    /**
     * (Optional) Description of the application.
     */
    description?: string;
    /**
     * Domain name of the Privileged Remote Access
     */
    domain?: string;
    /**
     * Whether this application is enabled or not
     */
    enabled?: boolean;
    /**
     * Name of the Privileged Remote Access
     */
    name?: string;
}

export interface ApplicationSegmentPRAServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentPRATcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentPRAUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentUdpPortRange {
    from?: string;
    to?: string;
}

export interface BrowserAccessClientlessApp {
    /**
     * If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`
     */
    allowOptions?: boolean;
    /**
     * Port for the BA app.
     */
    applicationPort: string;
    /**
     * Protocol for the BA app. Supported values: `HTTP` and `HTTPS`
     */
    applicationProtocol: string;
    /**
     * ID of the BA certificate. Refer to the data source documentation for `zpa.BrowserCertificate`
     */
    certificateId: string;
    /**
     * (Optional)
     */
    cname: string;
    /**
     * (Optional) Description of the application.
     */
    description?: string;
    /**
     * Domain name or IP address of the BA app.
     */
    domain?: string;
    /**
     * (Optional) - Whether this app is enabled or not.
     */
    enabled: boolean;
    /**
     * (Optional)
     */
    hidden: boolean;
    id: string;
    /**
     * (Optional)
     */
    localDomain?: string;
    /**
     * Name of BA app.
     */
    name: string;
    /**
     * (Optional)
     */
    path?: string;
    /**
     * (Optional)
     */
    trustUntrustedCert: boolean;
}

export interface BrowserAccessServerGroup {
    ids?: string[];
}

export interface BrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface BrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface CloudBrowserIsolationExternalProfileSecurityControl {
    allowPrinting: boolean;
    copyPaste?: string;
    documentViewer: boolean;
    localRender: boolean;
    restrictKeystrokes: boolean;
    uploadDownload?: string;
}

export interface CloudBrowserIsolationExternalProfileUserExperience {
    browserInBrowser?: boolean;
    sessionPersistence?: boolean;
}

export interface GetAppConnectorGroupConnector {
    appconnectorGroupId: string;
    appconnectorGroupName: string;
    applicationStartTime: string;
    controlChannelStatus: string;
    creationTime: string;
    ctrlBrokerName: string;
    currentVersion: string;
    /**
     * (String) Description of the App Connector Group.
     */
    description: string;
    /**
     * (String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
     */
    enabled: boolean;
    enrollmentCert: {[key: string]: any};
    expectedUpgradeTime: string;
    expectedVersion: string;
    fingerprint: string;
    /**
     * ID of the App Connector Group.
     */
    id: string;
    ipacl: string;
    issuedCertId: string;
    lastBrokerConnectTime: string;
    lastBrokerConnectTimeDuration: string;
    lastBrokerDisconnectTime: string;
    lastBrokerDisconnectTimeDuration: string;
    lastUpgradeTime: string;
    /**
     * (String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
     */
    latitude: string;
    /**
     * (String) Location of the App Connector Group.
     */
    location: string;
    /**
     * (String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
     */
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * Name of the App Connector Group.
     */
    name: string;
    platform: string;
    previousVersion: string;
    privateIp: string;
    provisioningKeyId: string;
    provisioningKeyName: string;
    publicIp: string;
    sargeVersion: string;
    upgradeAttempt: string;
    upgradeStatus: string;
}

export interface GetAppConnectorGroupServerGroup {
    configSpace: string;
    creationTime: string;
    /**
     * (String) Description of the App Connector Group.
     */
    description: string;
    dynamicDiscovery: boolean;
    /**
     * (String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
     */
    enabled: boolean;
    /**
     * ID of the App Connector Group.
     */
    id: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * Name of the App Connector Group.
     */
    name: string;
}

export interface GetApplicationSegmentBrowserAccessClientlessApp {
    /**
     * (bool)
     */
    allowOptions: boolean;
    appId: string;
    /**
     * (string)
     */
    applicationPort: string;
    /**
     * (string)
     */
    applicationProtocol: string;
    /**
     * (string)
     */
    certificateId: string;
    /**
     * (string)
     */
    certificateName: string;
    /**
     * (string)
     */
    cname: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (string)
     */
    domain: string;
    /**
     * (bool)
     */
    enabled: boolean;
    /**
     * (bool)
     */
    hidden: boolean;
    /**
     * This field defines the id of the application server.
     */
    id: string;
    /**
     * (string)
     */
    localDomain: string;
    /**
     * This field defines the name of the server.
     */
    name: string;
    /**
     * (string)
     */
    path: string;
    /**
     * (bool)
     */
    trustUntrustedCert: boolean;
}

export interface GetApplicationSegmentBrowserAccessServerGroup {
    /**
     * This field defines the id of the application server.
     */
    ids: string[];
}

export interface GetApplicationSegmentBrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentBrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentInspectionInspectionApp {
    appId: string;
    /**
     * (string) TCP/UDP Port for ZPA Inspection.
     */
    applicationPort: string;
    /**
     * (string) Protocol for the Inspection Application. Supported values: `HTTP` and `HTTPS`
     */
    applicationProtocol: string;
    /**
     * (string) - ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.
     */
    certificateId: string;
    /**
     * (string) - Parameter required when `applicationProtocol` is of type `HTTPS`
     */
    certificateName: string;
    /**
     * (string) Description of the application.
     */
    description: string;
    domain: string;
    /**
     * (bool) Whether this application is enabled or not
     */
    enabled: boolean;
    /**
     * The ID of the Inspection Application Segment to be exported.
     */
    id: string;
    /**
     * The name of the Inspection Application Segment to be exported.
     */
    name: string;
}

export interface GetApplicationSegmentInspectionServerGroup {
    /**
     * The ID of the Inspection Application Segment to be exported.
     */
    ids: string[];
}

export interface GetApplicationSegmentInspectionTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentInspectionUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentPRAServerGroup {
    ids: string[];
}

export interface GetApplicationSegmentPRASraApp {
    appId: string;
    /**
     * (string) Port for the Privileged Remote Accessvalues: `RDP` and `SSH`
     */
    applicationPort: string;
    /**
     * (string) Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`
     */
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    /**
     * (string) - Parameter required when `applicationProtocol` is of type `RDP`
     */
    connectionSecurity: string;
    /**
     * (string) Description of the application.
     */
    description: string;
    domain: string;
    /**
     * (bool) Whether this application is enabled or not
     */
    enabled: boolean;
    hidden: boolean;
    id: string;
    /**
     * (string) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId: string;
    /**
     * (string) The name of the microtenant the resource is to be associated with.
     */
    microtenantName: string;
    /**
     * The name of the PRA Application Segment to be exported.
     */
    name: string;
    portal: boolean;
}

export interface GetApplicationSegmentPRATcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentPRAUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentServerGroup {
    /**
     * Supported values: `DEFAULT`, `SIEM`.
     */
    configSpace: string;
    creationTime: string;
    /**
     * Description of the application.
     */
    description: string;
    dynamicDiscovery: boolean;
    /**
     * Whether this application is enabled or not. Default: false. Supported values: `true`, `false`.
     */
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * Name of the application.
     */
    name: string;
}

export interface GetApplicationSegmentTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetCloudBrowserIsolationExternalProfileRegion {
    id: string;
    /**
     * The name of the CBI banner to be exported.
     */
    name: string;
}

export interface GetCloudBrowserIsolationExternalProfileSecurityControl {
    allowPrinting: boolean;
    copyPaste: string;
    documentViewer: boolean;
    localRender: boolean;
    restrictKeystrokes: boolean;
    uploadDownload: string;
}

export interface GetCloudBrowserIsolationExternalProfileUserExperience {
    browserInBrowser: boolean;
    sessionPersistence: boolean;
}

export interface GetCloudConnectorGroupCloudConnector {
    /**
     * (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
     */
    creationTime: string;
    /**
     * (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
     */
    description: string;
    /**
     * (bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
     */
    enabled: boolean;
    fingerprint: string;
    /**
     * This field defines the id of the cloud connector group.
     */
    id: string;
    ipacls: any[];
    /**
     * (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
     */
    issuedCertId: string;
    /**
     * (string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * This field defines the name of the cloud connector group.
     */
    name: string;
    signingCert: {[key: string]: any};
}

export interface GetCustomerVersionProfileCustomScopeCustomerId {
    customerId: string;
    excludeConstellation: boolean;
    /**
     * The name of the enrollment certificate to be exported.
     */
    name: string;
}

export interface GetCustomerVersionProfileVersion {
    /**
     * (string)
     */
    creationTime: string;
    customerId: string;
    /**
     * The id of the enrollment certificate to be exported.
     */
    id: string;
    /**
     * (string)
     */
    modifiedBy: string;
    /**
     * (string)
     */
    modifiedTime: string;
    platform: string;
    restartAfterUptimeInDays: string;
    role: string;
    version: string;
    versionProfileGid: string;
}

export interface GetIdPControllerAdminMetadata {
    /**
     * (string)
     */
    certificateUrl: string;
    spBaseUrl: string;
    /**
     * (string)
     */
    spEntityId: string;
    /**
     * (string)
     */
    spMetadataUrl: string;
    /**
     * (string)
     */
    spPostUrl: string;
}

export interface GetIdPControllerUserMetadata {
    /**
     * (string)
     */
    certificateUrl: string;
    spBaseUrl: string;
    /**
     * (string)
     */
    spEntityId: string;
    /**
     * (string)
     */
    spMetadataUrl: string;
    /**
     * (string)
     */
    spPostUrl: string;
}

export interface GetInspectionAllPredefinedControlsList {
    /**
     * (string)
     */
    action: string;
    /**
     * (string)
     */
    actionValue: string;
    /**
     * (string)
     */
    associatedInspectionProfileNames: outputs.GetInspectionAllPredefinedControlsListAssociatedInspectionProfileName[];
    /**
     * (string)
     */
    attachment: string;
    /**
     * (string)
     */
    controlGroup: string;
    /**
     * (string)
     */
    controlNumber: string;
    /**
     * (string) Returned values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `ZSCALER`, `CUSTOM`, `PREDEFINED`
     */
    controlType: string;
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    defaultAction: string;
    /**
     * (string)
     */
    defaultActionValue: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (string)
     */
    id: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * (string)
     */
    name: string;
    /**
     * (string)
     */
    paranoiaLevel: string;
    /**
     * (string) Returned values: `HTTP`, `HTTPS`, `FTP`, `RDP`, `SSH`, `WEBSOCKET`
     */
    protocolType: string;
    /**
     * (string)
     */
    severity: string;
    /**
     * The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
     */
    version: string;
}

export interface GetInspectionAllPredefinedControlsListAssociatedInspectionProfileName {
    /**
     * (string)
     */
    id: string;
    /**
     * (string)
     */
    name: string;
}

export interface GetInspectionCustomControlsRule {
    conditions: outputs.GetInspectionCustomControlsRuleCondition[];
    /**
     * Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
     */
    names: string[];
    type: string;
}

export interface GetInspectionCustomControlsRuleCondition {
    lhs: string;
    op: string;
    rhs: string;
}

export interface GetInspectionPredefinedControlsAssociatedInspectionProfileName {
    /**
     * (Computed)
     */
    id: string;
    /**
     * The name of the predefined control.
     */
    name: string;
}

export interface GetInspectionProfileControlsInfo {
    /**
     * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
     */
    controlType: string;
    /**
     * (string) Control information counts `Long`
     */
    count: string;
}

export interface GetInspectionProfileCustomControl {
    /**
     * (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
     */
    action: string;
    /**
     * (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
     */
    actionValue: string;
    /**
     * (string) Name of the inspection profile
     */
    associatedInspectionProfileNames: outputs.GetInspectionProfileCustomControlAssociatedInspectionProfileName[];
    controlNumber: string;
    /**
     * (string) Custom controls string in JSON format
     */
    controlRuleJson: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    /**
     * (string) Description of the inspection profile.
     */
    description: string;
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
    /**
     * (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
     */
    paranoiaLevel: string;
    /**
     * (string) Rules of the custom controls applied as conditions `JSON`
     */
    rules: outputs.GetInspectionProfileCustomControlRule[];
    severity: string;
    /**
     * (string) Type value for the rules
     */
    type: string;
    /**
     * (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
     */
    version: string;
}

export interface GetInspectionProfileCustomControlAssociatedInspectionProfileName {
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetInspectionProfileCustomControlRule {
    /**
     * (string)
     */
    conditions: outputs.GetInspectionProfileCustomControlRuleCondition[];
    /**
     * (string) Name of the rules. If rules.type is set to `REQUEST_HEADERS`, `REQUEST_COOKIES`, or `RESPONSE_HEADERS`, the rules.name field is required.
     */
    names: string;
    /**
     * (string) Type value for the rules
     */
    type: string;
}

export interface GetInspectionProfileCustomControlRuleCondition {
    /**
     * (string) Signifies the key for the object type Supported values: `SIZE`, `VALUE`
     */
    lhs: string;
    /**
     * (string) If lhs is set to SIZE, then the user may pass one of the following: `EQ: Equals`, `LE: Less than or equal to`, `GE: Greater than or equal to`. If the lhs is set to `VALUE`, then the user may pass one of the following: `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `RX`.
     */
    op: string;
    /**
     * (string) Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: `GET`,`HEAD`, `POST`, `OPTIONS`, `PUT`, `DELETE`, `TRACE`
     */
    rhs: string;
}

export interface GetInspectionProfilePredefinedControl {
    /**
     * (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
     */
    action: string;
    /**
     * (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
     */
    actionValue: string;
    /**
     * (string) Name of the inspection profile
     */
    associatedInspectionProfileNames: outputs.GetInspectionProfilePredefinedControlAssociatedInspectionProfileName[];
    /**
     * (string) Control attachment
     */
    attachment: string;
    /**
     * (string) Control group
     */
    controlGroup: string;
    controlNumber: string;
    /**
     * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
     */
    controlType: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    /**
     * (string) Description of the inspection profile.
     */
    description: string;
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
    /**
     * (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
     */
    paranoiaLevel: string;
    severity: string;
    /**
     * (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
     */
    version: string;
}

export interface GetInspectionProfilePredefinedControlAssociatedInspectionProfileName {
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetInspectionProfileWebSocketControl {
    /**
     * (string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
     */
    action: string;
    /**
     * (string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
     */
    actionValue: string;
    /**
     * (string) Name of the inspection profile
     */
    associatedInspectionProfileNames: outputs.GetInspectionProfileWebSocketControlAssociatedInspectionProfileName[];
    /**
     * (string) Control attachment
     */
    attachment: string;
    /**
     * (string) Control group
     */
    controlGroup: string;
    controlNumber: string;
    /**
     * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
     */
    controlType: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    /**
     * (string) Description of the inspection profile.
     */
    description: string;
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
    /**
     * (string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive
     */
    paranoiaLevel: string;
    protocolType: string;
    severity: string;
    /**
     * (string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`
     */
    version: string;
}

export interface GetInspectionProfileWebSocketControlAssociatedInspectionProfileName {
    /**
     * This field defines the id of the inspection profile.
     */
    id: string;
    /**
     * This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetLSSConfigControllerConfig {
    /**
     * (string)
     */
    auditMessage: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (bool)
     */
    enabled: boolean;
    /**
     * (string)
     */
    filters: string[];
    /**
     * (string)
     */
    format: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    id: string;
    /**
     * (string)
     */
    lssHost: string;
    /**
     * (string)
     */
    lssPort: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    name: string;
    /**
     * (string)
     */
    sourceLogType: string;
    useTls: boolean;
}

export interface GetLSSConfigControllerConnectorGroup {
    /**
     * This field defines the name of the log streaming resource.
     */
    id: string;
}

export interface GetLSSConfigControllerPolicyRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetLSSConfigControllerPolicyRuleCondition[];
    /**
     * (string)
     */
    creationTime: string;
    customMsg: string;
    defaultRule: boolean;
    /**
     * (string)
     */
    description: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    id: string;
    isolationDefaultRule: boolean;
    lssDefaultRule: boolean;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    name: string;
    operator: string;
    policySetId: string;
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnInspectionProfileName: string;
}

export interface GetLSSConfigControllerPolicyRuleCondition {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    id: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    negated: boolean;
    operands: outputs.GetLSSConfigControllerPolicyRuleConditionOperand[];
    operator: string;
}

export interface GetLSSConfigControllerPolicyRuleConditionOperand {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    id: string;
    idpId: string;
    lhs: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * This field defines the name of the log streaming resource.
     */
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetMachineGroupMachine {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (string)
     */
    fingerprint: string;
    /**
     * The ID of the machine group to be exported.
     */
    id: string;
    /**
     * (string)
     */
    issuedCertId: string;
    /**
     * (string)
     */
    machineGroupId: string;
    /**
     * (string)
     */
    machineGroupName: string;
    /**
     * (string)
     */
    machineTokenId: string;
    /**
     * (string) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId?: string;
    /**
     * (string) The name of the microtenant the resource is to be associated with.
     */
    microtenantName?: string;
    /**
     * (string)
     */
    modifiedBy: string;
    /**
     * (string)
     */
    modifiedTime: string;
    /**
     * The name of the machine group to be exported.
     */
    name: string;
    /**
     * (string)
     */
    signingCert: {[key: string]: string};
}

export interface GetMicrotenantRole {
    customRole: boolean;
    id: string;
    /**
     * (Required) Name of the microtenant controller.
     */
    name: string;
}

export interface GetMicrotenantUser {
    comments: string;
    creationTime: string;
    customerId: string;
    /**
     * (string) Description of the microtenant controller.
     */
    description: string;
    displayName: string;
    email: string;
    /**
     * (bool) Whether this microtenant resource is enabled or not.
     */
    enabled: boolean;
    eula: string;
    forcePwdChange: boolean;
    groupIds: string;
    id: string;
    isEnabled: boolean;
    isLocked: boolean;
    languageCode: string;
    localLoginDisabled: boolean;
    microtenantId: string;
    microtenantName: string;
    modifiedTime: number;
    modifiedby: number;
    /**
     * (Required) Name of the microtenant controller.
     */
    name: string;
    password: string;
    phoneNumber: boolean;
    pinSession: string;
    roleId: boolean;
    timezone: string;
    tmpPassword: string;
    tokenId: string;
    twoFactorAuthEnabled: boolean;
    twoFactorAuthType: string;
    username: string;
}

export interface GetPolicyTypeRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetPolicyTypeRuleCondition[];
    creationTime: string;
    customMsg: string;
    description: string;
    id: string;
    isolationDefaultRule: boolean;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    operator: string;
    /**
     * The ID of the global policy set.
     */
    policySetId: string;
    /**
     * The value for differentiating the policy types.
     */
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
}

export interface GetPolicyTypeRuleCondition {
    creationTime: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    negated: boolean;
    operands: outputs.GetPolicyTypeRuleConditionOperand[];
    operator: string;
}

export interface GetPolicyTypeRuleConditionOperand {
    creationTime: string;
    id: string;
    idpId: string;
    lhs: string;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetSegmentGroupApplication {
    /**
     * (string)
     */
    bypassType: string;
    /**
     * (string)
     */
    configSpace: string;
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    defaultIdleTimeout: string;
    /**
     * (string)
     */
    defaultMaxAge: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (string)
     */
    domainName: string;
    /**
     * (string)
     */
    domainNames: string[];
    /**
     * (string)
     */
    doubleEncrypt: boolean;
    /**
     * (bool)
     */
    enabled: boolean;
    /**
     * (string)
     */
    healthCheckType: string;
    /**
     * The ID of the segment group to be exported.
     */
    id: string;
    /**
     * (bool)
     */
    ipAnchored: boolean;
    logFeatures: string[];
    /**
     * (string)
     */
    modifiedBy: string;
    /**
     * (string)
     */
    modifiedTime: string;
    /**
     * The name of the segment group to be exported.
     */
    name: string;
    /**
     * (bool)
     */
    passiveHealthEnabled: boolean;
    /**
     * (Computed)
     */
    serverGroups: outputs.GetSegmentGroupApplicationServerGroup[];
    /**
     * (string)
     */
    tcpPortRanges: string[];
    /**
     * (string)
     */
    tcpPortsIns: string[];
    tcpPortsOuts: string[];
    /**
     * (string)
     */
    udpPortRanges: string[];
}

export interface GetSegmentGroupApplicationServerGroup {
    /**
     * (string)
     */
    configSpace: string;
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    description: string;
    /**
     * (bool)
     */
    dynamicDiscovery: boolean;
    /**
     * (bool)
     */
    enabled: boolean;
    /**
     * The ID of the segment group to be exported.
     */
    id: string;
    /**
     * (string)
     */
    modifiedBy: string;
    /**
     * (string)
     */
    modifiedTime: string;
    /**
     * The name of the segment group to be exported.
     */
    name: string;
}

export interface GetServerGroupAppConnectorGroup {
    cityCountry: string;
    connectors: outputs.GetServerGroupAppConnectorGroupConnector[];
    countryCode: string;
    creationTime: string;
    /**
     * (string) This field is the description of the server group.
     */
    description: string;
    dnsQueryType: string;
    /**
     * (bool) This field defines if the server group is enabled or disabled.
     */
    enabled: boolean;
    geolocationId: string;
    /**
     * The ID of the server group to be exported.
     */
    id: string;
    latitude: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the server group to be exported.
     */
    name: string;
    serverGroups: outputs.GetServerGroupAppConnectorGroupServerGroup[];
    siemAppConnectorGroup: boolean;
    upgradeDay: string;
    upgradeTimeInSecs: string;
    versionProfileId: string;
}

export interface GetServerGroupAppConnectorGroupConnector {
    creationTime: string;
    /**
     * (string) This field is the description of the server group.
     */
    description: string;
    /**
     * (bool) This field defines if the server group is enabled or disabled.
     */
    enabled: boolean;
    fingerprint: string;
    /**
     * The ID of the server group to be exported.
     */
    id: string;
    issuedCertId: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the server group to be exported.
     */
    name?: string;
    upgradeAttempt: string;
}

export interface GetServerGroupAppConnectorGroupServerGroup {
    /**
     * (string)
     */
    configSpace: string;
    creationTime: string;
    /**
     * (string) This field is the description of the server group.
     */
    description: string;
    /**
     * (bool) This field controls dynamic discovery of the servers.
     */
    dynamicDiscovery: boolean;
    /**
     * (bool) This field defines if the server group is enabled or disabled.
     */
    enabled: boolean;
    /**
     * The ID of the server group to be exported.
     */
    id: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the server group to be exported.
     */
    name?: string;
}

export interface GetServerGroupApplication {
    /**
     * The ID of the server group to be exported.
     */
    id: string;
    /**
     * The name of the server group to be exported.
     */
    name: string;
}

export interface GetServerGroupServer {
    address: string;
    appServerGroupIds: string[];
    /**
     * (string)
     */
    configSpace: string;
    creationTime: string;
    /**
     * (string) This field is the description of the server group.
     */
    description: string;
    /**
     * (bool) This field defines if the server group is enabled or disabled.
     */
    enabled: boolean;
    /**
     * The ID of the server group to be exported.
     */
    id: string;
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the server group to be exported.
     */
    name: string;
}

export interface GetServiceEdgeControllerZpnSubModuleUpgradeList {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    currentVersion: string;
    entityGid: string;
    /**
     * (string)
     */
    expectedVersion: string;
    /**
     * The ID of the service edge controllerto be exported.
     */
    id: string;
    /**
     * (string)
     */
    modifiedBy: string;
    /**
     * (string)
     */
    modifiedTime: string;
    role: string;
    /**
     * (string)
     */
    upgradeStatus: string;
    upgradeTime: string;
}

export interface GetServiceEdgeGroupServiceEdge {
    /**
     * (string)
     */
    applicationStartTime: string;
    /**
     * (string)
     */
    controlChannelStatus: string;
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    ctrlBrokerName: string;
    /**
     * (string)
     */
    currentVersion: string;
    /**
     * (string) Description of the Service Edge Group.
     */
    description: string;
    /**
     * (bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
     */
    enabled: boolean;
    /**
     * (string)
     */
    enrollmentCert: {[key: string]: any};
    /**
     * (string)
     */
    expectedUpgradeTime: string;
    /**
     * (string)
     */
    expectedVersion: string;
    fingerprint: string;
    /**
     * The ID of the service edge group to be exported.
     */
    id: string;
    ipacl: string;
    /**
     * (string)
     */
    issuedCertId: string;
    /**
     * (string)
     */
    lastBrokerConnectTime: string;
    /**
     * (string)
     */
    lastBrokerConnectTimeDuration: string;
    /**
     * (string)
     */
    lastBrokerDisconnectTime: string;
    /**
     * (string)
     */
    lastBrokerDisconnectTimeDuration: string;
    /**
     * (string)
     */
    lastUpgradeTime: string;
    /**
     * (string)
     */
    latitude: string;
    /**
     * (string)
     */
    listenIps: string;
    /**
     * (string)
     */
    location: string;
    /**
     * (string)
     */
    longitude: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the service edge group to be exported.
     */
    name: string;
    /**
     * (string)
     */
    platform: string;
    /**
     * (string)
     */
    previousVersion: string;
    /**
     * (string)
     */
    privateIp: string;
    /**
     * (string)
     */
    provisioningKeyId: string;
    /**
     * (string)
     */
    provisioningKeyName: string;
    /**
     * (string)
     */
    publicIp: string;
    /**
     * (string)
     */
    publishIps: string[];
    /**
     * (string)
     */
    sargeVersion: string;
    /**
     * (string)
     */
    serviceEdgeGroupId: string;
    /**
     * (string)
     */
    serviceEdgeGroupName: string;
    /**
     * (string)
     */
    upgradeAttempt: string;
    /**
     * (string)
     */
    upgradeStatus: string;
    zpnSubModuleUpgradeLists: outputs.GetServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList[];
}

export interface GetServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    currentVersion: string;
    entityGid: string;
    /**
     * (string)
     */
    expectedVersion: string;
    /**
     * The ID of the service edge group to be exported.
     */
    id: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    role: string;
    /**
     * (string)
     */
    upgradeStatus: string;
    upgradeTime: string;
}

export interface GetServiceEdgeGroupTrustedNetwork {
    /**
     * (string)
     */
    creationTime: string;
    /**
     * (string)
     */
    domain: string;
    /**
     * The ID of the service edge group to be exported.
     */
    id: string;
    /**
     * (string)
     */
    masterCustomerId: string;
    /**
     * (string)
     */
    modifiedTime: string;
    modifiedby: string;
    /**
     * The name of the service edge group to be exported.
     */
    name: string;
    /**
     * (string)
     */
    networkId: string;
    /**
     * (string)
     */
    zscalerCloud: string;
}

export interface InspectionCustomControlsAssociatedInspectionProfileName {
    ids: string[];
}

export interface InspectionCustomControlsRule {
    conditions: outputs.InspectionCustomControlsRuleConditions;
    /**
     * Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
     */
    names: string[];
    /**
     * Type value for the rules.
     */
    type: string;
}

export interface InspectionCustomControlsRuleConditions {
    /**
     * Signifies the key for the object type
     */
    lhs: string;
    /**
     * Denotes the operation type.
     */
    op: string;
    /**
     * Denotes the value for the given object type. Its value depends on the key.
     */
    rhs: string;
}

export interface InspectionProfileControlsInfo {
    /**
     * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
     */
    controlType: string;
}

export interface InspectionProfileCustomControl {
    /**
     * The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
     */
    action?: string;
    /**
     * Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
     */
    actionValue?: string;
    /**
     * ID of the predefined control
     */
    id: string;
}

export interface InspectionProfilePredefinedControl {
    /**
     * The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`
     */
    action: string;
    /**
     * Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.
     */
    actionValue?: string;
    /**
     * (string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`
     */
    controlType?: string;
    /**
     * ID of the predefined control
     */
    id: string;
    /**
     * The protocol type of the predefined control
     */
    protocolType?: string;
}

export interface LSSConfigControllerConfig {
    auditMessage: string;
    /**
     * Description of the LSS configuration
     */
    description?: string;
    /**
     * Whether this LSS configuration is enabled or not. Supported values: true, false
     */
    enabled?: boolean;
    /**
     * Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes
     */
    filters?: string[];
    /**
     * Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats
     */
    format: string;
    id: string;
    /**
     * Host of the LSS configuration
     */
    lssHost: string;
    /**
     * Port of the LSS configuration
     */
    lssPort: string;
    /**
     * Name of the LSS configuration
     */
    name: string;
    /**
     * Log type of the LSS configuration
     */
    sourceLogType: string;
    useTls?: boolean;
}

export interface LSSConfigControllerConnectorGroup {
    ids?: string[];
}

export interface LSSConfigControllerPolicyRuleResource {
    /**
     * This is for providing the rule action.
     */
    action?: string;
    /**
     * This field defines the description of the server.
     */
    actionId?: string;
    bypassDefaultRule?: boolean;
    /**
     * This is for proviidng the set of conditions for the policy.
     */
    conditions?: outputs.LSSConfigControllerPolicyRuleResourceCondition[];
    /**
     * This is for providing a customer message for the user.
     */
    customMsg?: string;
    /**
     * This is for providing a customer message for the user.
     */
    defaultRule?: boolean;
    /**
     * This is the description of the access policy.
     */
    description?: string;
    id: string;
    lssDefaultRule?: boolean;
    microtenantId: string;
    /**
     * This is the name of the policy.
     */
    name: string;
    operator: string;
    policySetId?: string;
    policyType: string;
    priority: string;
    reauthDefaultRule?: boolean;
    reauthIdleTimeout?: string;
    reauthTimeout?: string;
    /**
     * @deprecated The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`
     */
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnIsolationProfileId: string;
}

export interface LSSConfigControllerPolicyRuleResourceCondition {
    negated?: boolean;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.LSSConfigControllerPolicyRuleResourceConditionOperand[];
    operator: string;
}

export interface LSSConfigControllerPolicyRuleResourceConditionOperand {
    entryValues?: outputs.LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface MicrotenantUser {
    displayName: string;
    microtenantId: string;
    password: string;
    username: string;
}

export interface PolicyAccessForwardingRuleCondition {
    id: string;
    microtenantId: string;
    negated: boolean;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessForwardingRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessForwardingRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessInspectionRuleCondition {
    id: string;
    microtenantId: string;
    negated: boolean;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessInspectionRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessInspectionRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessIsolationRuleCondition {
    id: string;
    microtenantId: string;
    negated: boolean;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessIsolationRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessIsolationRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessReorderRuleRule {
    /**
     * (Required) - The ID of the rule to which the order number will be applied.
     */
    id: string;
    /**
     * (Required) - The order number that should be applied to the respective rule ID.
     */
    order: string;
}

export interface PolicyAccessRuleAppConnectorGroup {
    /**
     * (Optional) The ID of a server group resource
     */
    ids?: string[];
}

export interface PolicyAccessRuleAppServerGroup {
    /**
     * (Optional) The ID of a server group resource
     */
    ids?: string[];
}

export interface PolicyAccessRuleCondition {
    /**
     * (Optional) The ID of a server group resource
     */
    id: string;
    /**
     * (Optional) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId: string;
    /**
     * (Optional) Supported values: ``true`` or ``false``
     */
    negated: boolean;
    /**
     * (Optional) - Operands block must be repeated if multiple per `objectType` conditions are to be added to the rule.
     */
    operands?: outputs.PolicyAccessRuleConditionOperand[];
    /**
     * (Optional) Supported values: ``AND``, and ``OR``
     */
    operator: string;
}

export interface PolicyAccessRuleConditionOperand {
    /**
     * (Optional) The ID of a server group resource
     */
    id: string;
    /**
     * (Optional)
     */
    idpId: string;
    /**
     * (Optional) LHS must always carry the string value ``id`` or the attribute ID of the resource being associated with the rule.
     */
    lhs: string;
    /**
     * (Optional) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId: string;
    /**
     * (Optional)
     */
    name: string;
    /**
     * (Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `SAML`, `IDP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `POSTURE`, `SCIM`, `SCIM_GROUP`, and `CLOUD_CONNECTOR_GROUP`. `TRUSTED_NETWORK`, `CLIENT_TYPE`, `PLATFORM`, `COUNTRY_CODE`.
     */
    objectType: string;
    /**
     * (Optional) RHS is either the ID attribute of a resource or fixed string value. Refer to the chart below for further details.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessTimeOutRuleCondition {
    id: string;
    microtenantId: string;
    negated: boolean;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessTimeOutRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessTimeOutRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface SegmentGroupApplication {
    id?: string;
}

export interface ServerGroupAppConnectorGroup {
    ids?: string[];
}

export interface ServerGroupApplication {
    ids?: string[];
}

export interface ServerGroupServer {
    ids?: string[];
}

export interface ServiceEdgeGroupServiceEdge {
    ids: string[];
}

export interface ServiceEdgeGroupTrustedNetwork {
    ids?: string[];
}

