// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationSegmentBrowserAccessClientlessApp {
    /**
     * If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
     */
    allowOptions?: boolean;
    /**
     * Port for the BA app.
     */
    applicationPort: string;
    /**
     * Protocol for the BA app.
     */
    applicationProtocol: string;
    /**
     * ID of the BA certificate.
     */
    certificateId?: string;
    cname: string;
    description?: string;
    /**
     * Domain name or IP address of the BA app.
     */
    domain?: string;
    enabled: boolean;
    hidden: boolean;
    id: string;
    localDomain?: string;
    name: string;
    path?: string;
    /**
     * Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
     */
    trustUntrustedCert: boolean;
}

export interface ApplicationSegmentBrowserAccessServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentBrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentBrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentInspectionCommonAppsDto {
    appsConfigs?: outputs.ApplicationSegmentInspectionCommonAppsDtoAppsConfig[];
}

export interface ApplicationSegmentInspectionCommonAppsDtoAppsConfig {
    appTypes?: string[];
    applicationPort?: string;
    applicationProtocol?: string;
    certificateId?: string;
    description?: string;
    domain?: string;
    enabled?: boolean;
    name?: string;
    trustUntrustedCert?: boolean;
}

export interface ApplicationSegmentInspectionServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentInspectionTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentInspectionUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentPRACommonAppsDto {
    appsConfigs?: outputs.ApplicationSegmentPRACommonAppsDtoAppsConfig[];
}

export interface ApplicationSegmentPRACommonAppsDtoAppsConfig {
    appId: string;
    appTypes?: string[];
    applicationPort?: string;
    applicationProtocol?: string;
    connectionSecurity?: string;
    description?: string;
    domain?: string;
    enabled?: boolean;
    id: string;
    name?: string;
}

export interface ApplicationSegmentPRAServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentPRATcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentPRAUdpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentServerGroup {
    ids?: string[];
}

export interface ApplicationSegmentTcpPortRange {
    from?: string;
    to?: string;
}

export interface ApplicationSegmentUdpPortRange {
    from?: string;
    to?: string;
}

export interface BrowserAccessClientlessApp {
    /**
     * If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
     */
    allowOptions?: boolean;
    /**
     * Port for the BA app.
     */
    applicationPort: string;
    /**
     * Protocol for the BA app.
     */
    applicationProtocol: string;
    /**
     * ID of the BA certificate.
     */
    certificateId?: string;
    cname: string;
    description?: string;
    /**
     * Domain name or IP address of the BA app.
     */
    domain?: string;
    enabled: boolean;
    hidden: boolean;
    id: string;
    localDomain?: string;
    name: string;
    path?: string;
    /**
     * Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
     */
    trustUntrustedCert: boolean;
}

export interface BrowserAccessServerGroup {
    ids?: string[];
}

export interface BrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface BrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface CloudBrowserIsolationExternalProfileSecurityControl {
    allowPrinting: boolean;
    copyPaste?: string;
    documentViewer: boolean;
    localRender: boolean;
    restrictKeystrokes: boolean;
    uploadDownload?: string;
}

export interface CloudBrowserIsolationExternalProfileUserExperience {
    browserInBrowser?: boolean;
    sessionPersistence?: boolean;
}

export interface GetAppConnectorGroupConnector {
    appconnectorGroupId: string;
    appconnectorGroupName: string;
    applicationStartTime: string;
    controlChannelStatus: string;
    creationTime: string;
    ctrlBrokerName: string;
    currentVersion: string;
    description: string;
    enabled: boolean;
    enrollmentCert: {[key: string]: any};
    expectedUpgradeTime: string;
    expectedVersion: string;
    fingerprint: string;
    id: string;
    ipacl: string;
    issuedCertId: string;
    lastBrokerConnectTime: string;
    lastBrokerConnectTimeDuration: string;
    lastBrokerDisconnectTime: string;
    lastBrokerDisconnectTimeDuration: string;
    lastUpgradeTime: string;
    latitude: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    platform: string;
    previousVersion: string;
    privateIp: string;
    provisioningKeyId: string;
    provisioningKeyName: string;
    publicIp: string;
    sargeVersion: string;
    upgradeAttempt: string;
    upgradeStatus: string;
}

export interface GetAppConnectorGroupServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetApplicationSegmentBrowserAccessClientlessApp {
    allowOptions: boolean;
    appId: string;
    applicationPort: string;
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    cname: string;
    description: string;
    domain: string;
    enabled: boolean;
    hidden: boolean;
    /**
     * - (String) This field defines the id of the application server.
     */
    id: string;
    localDomain: string;
    /**
     * - (String) This field defines the name of the server.
     */
    name: string;
    path: string;
    trustUntrustedCert: boolean;
}

export interface GetApplicationSegmentBrowserAccessServerGroup {
    /**
     * - (String) This field defines the id of the application server.
     */
    ids: string[];
}

export interface GetApplicationSegmentBrowserAccessTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentBrowserAccessUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentInspectionInspectionApp {
    appId: string;
    applicationPort: string;
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    description: string;
    domain: string;
    enabled: boolean;
    id: string;
    name: string;
}

export interface GetApplicationSegmentInspectionServerGroup {
    ids: string[];
}

export interface GetApplicationSegmentInspectionTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentInspectionUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentPRAServerGroup {
    ids: string[];
}

export interface GetApplicationSegmentPRASraApp {
    appId: string;
    applicationPort: string;
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    connectionSecurity: string;
    description: string;
    domain: string;
    enabled: boolean;
    hidden: boolean;
    id: string;
    microtenantId: string;
    microtenantName: string;
    name: string;
    portal: boolean;
}

export interface GetApplicationSegmentPRATcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentPRAUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetApplicationSegmentTcpPortRange {
    from?: string;
    to?: string;
}

export interface GetApplicationSegmentUdpPortRange {
    from?: string;
    to?: string;
}

export interface GetCloudBrowserIsolationExternalProfileRegion {
    id: string;
    name: string;
}

export interface GetCloudBrowserIsolationExternalProfileSecurityControl {
    allowPrinting: boolean;
    copyPaste: string;
    documentViewer: boolean;
    localRender: boolean;
    restrictKeystrokes: boolean;
    uploadDownload: string;
}

export interface GetCloudBrowserIsolationExternalProfileUserExperience {
    browserInBrowser: boolean;
    sessionPersistence: boolean;
}

export interface GetCloudConnectorGroupCloudConnector {
    creationTime: string;
    description: string;
    enabled: boolean;
    fingerprint: string;
    id: string;
    ipacls: any[];
    issuedCertId: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    signingCert: {[key: string]: any};
}

export interface GetCustomerVersionProfileCustomScopeCustomerId {
    customerId: string;
    excludeConstellation: boolean;
    name: string;
}

export interface GetCustomerVersionProfileVersion {
    creationTime: string;
    customerId: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    platform: string;
    restartAfterUptimeInDays: string;
    role: string;
    version: string;
    versionProfileGid: string;
}

export interface GetIdPControllerAdminMetadata {
    certificateUrl: string;
    spBaseUrl: string;
    spEntityId: string;
    spMetadataUrl: string;
    spPostUrl: string;
}

export interface GetIdPControllerUserMetadata {
    certificateUrl: string;
    spBaseUrl: string;
    spEntityId: string;
    spMetadataUrl: string;
    spPostUrl: string;
}

export interface GetInspectionAllPredefinedControlsList {
    action: string;
    actionValue: string;
    associatedInspectionProfileNames: outputs.GetInspectionAllPredefinedControlsListAssociatedInspectionProfileName[];
    attachment: string;
    controlGroup: string;
    controlNumber: string;
    controlType: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    description: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    paranoiaLevel: string;
    protocolType: string;
    severity: string;
    version: string;
}

export interface GetInspectionAllPredefinedControlsListAssociatedInspectionProfileName {
    id: string;
    name: string;
}

export interface GetInspectionCustomControlsRule {
    conditions: outputs.GetInspectionCustomControlsRuleCondition[];
    /**
     * Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
     */
    names: string[];
    type: string;
}

export interface GetInspectionCustomControlsRuleCondition {
    lhs: string;
    op: string;
    rhs: string;
}

export interface GetInspectionPredefinedControlsAssociatedInspectionProfileName {
    id: string;
    name: string;
}

export interface GetInspectionProfileControlsInfo {
    controlType: string;
    count: string;
}

export interface GetInspectionProfileCustomControl {
    action: string;
    actionValue: string;
    associatedInspectionProfileNames: outputs.GetInspectionProfileCustomControlAssociatedInspectionProfileName[];
    controlNumber: string;
    controlRuleJson: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    description: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
    paranoiaLevel: string;
    rules: outputs.GetInspectionProfileCustomControlRule[];
    severity: string;
    type: string;
    version: string;
}

export interface GetInspectionProfileCustomControlAssociatedInspectionProfileName {
    id: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetInspectionProfileCustomControlRule {
    conditions: outputs.GetInspectionProfileCustomControlRuleCondition[];
    names: string;
    type: string;
}

export interface GetInspectionProfileCustomControlRuleCondition {
    lhs: string;
    op: string;
    rhs: string;
}

export interface GetInspectionProfilePredefinedControl {
    action: string;
    actionValue: string;
    associatedInspectionProfileNames: outputs.GetInspectionProfilePredefinedControlAssociatedInspectionProfileName[];
    attachment: string;
    controlGroup: string;
    controlNumber: string;
    controlType: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    description: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
    paranoiaLevel: string;
    severity: string;
    version: string;
}

export interface GetInspectionProfilePredefinedControlAssociatedInspectionProfileName {
    id: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetInspectionProfileWebSocketControl {
    action: string;
    actionValue: string;
    associatedInspectionProfileNames: outputs.GetInspectionProfileWebSocketControlAssociatedInspectionProfileName[];
    attachment: string;
    controlGroup: string;
    controlNumber: string;
    controlType: string;
    creationTime: string;
    defaultAction: string;
    defaultActionValue: string;
    description: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
    paranoiaLevel: string;
    protocolType: string;
    severity: string;
    version: string;
}

export interface GetInspectionProfileWebSocketControlAssociatedInspectionProfileName {
    id: string;
    /**
     * - (String) This field defines the name of the inspection profile.
     */
    name: string;
}

export interface GetLSSConfigControllerConfig {
    auditMessage: string;
    description: string;
    enabled: boolean;
    filters: string[];
    format: string;
    id: string;
    lssHost: string;
    lssPort: string;
    name: string;
    sourceLogType: string;
    useTls: boolean;
}

export interface GetLSSConfigControllerConnectorGroup {
    id: string;
}

export interface GetLSSConfigControllerPolicyRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetLSSConfigControllerPolicyRuleCondition[];
    creationTime: string;
    customMsg: string;
    defaultRule: boolean;
    description: string;
    id: string;
    isolationDefaultRule: boolean;
    lssDefaultRule: boolean;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    operator: string;
    policySetId: string;
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnInspectionProfileName: string;
}

export interface GetLSSConfigControllerPolicyRuleCondition {
    creationTime: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    operands: outputs.GetLSSConfigControllerPolicyRuleConditionOperand[];
    operator: string;
}

export interface GetLSSConfigControllerPolicyRuleConditionOperand {
    creationTime: string;
    id: string;
    idpId: string;
    lhs: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetMachineGroupMachine {
    creationTime: string;
    description: string;
    fingerprint: string;
    id: string;
    issuedCertId: string;
    machineGroupId: string;
    machineGroupName: string;
    machineTokenId: string;
    microtenantId?: string;
    microtenantName?: string;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    signingCert: {[key: string]: string};
}

export interface GetMicrotenantRole {
    customRole: boolean;
    id: string;
    /**
     * - (Required) Name of the microtenant controller.
     */
    name: string;
}

export interface GetMicrotenantUser {
    comments: string;
    creationTime: string;
    customerId: string;
    description: string;
    displayName: string;
    email: string;
    enabled: boolean;
    eula: string;
    forcePwdChange: boolean;
    groupIds: string;
    id: string;
    isEnabled: boolean;
    isLocked: boolean;
    languageCode: string;
    localLoginDisabled: boolean;
    microtenantId: string;
    microtenantName: string;
    modifiedTime: number;
    modifiedby: number;
    /**
     * - (Required) Name of the microtenant controller.
     */
    name: string;
    password: string;
    phoneNumber: boolean;
    pinSession: string;
    roleId: boolean;
    timezone: string;
    tmpPassword: string;
    tokenId: string;
    twoFactorAuthEnabled: boolean;
    twoFactorAuthType: string;
    username: string;
}

export interface GetPRAApprovalApplication {
    /**
     * The unique identifier of the pra application segment
     */
    id: string;
    /**
     * The name of the pra application segment
     */
    name: string;
}

export interface GetPRAApprovalWorkingHour {
    /**
     * The days of the week that you want to enable the privileged approval
     */
    days: string[];
    /**
     * The end time that the user no longer has access to the privileged approval
     */
    endTime: string;
    /**
     * The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    endTimeCron: string;
    /**
     * The start time that the user has access to the privileged approval
     */
    startTime: string;
    /**
     * The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    startTimeCron: string;
    /**
     * The time zone for the time window of a privileged approval
     */
    timezone: string;
}

export interface GetPRAConsolePraApplication {
    /**
     * The unique identifier of the Privileged Remote Access-enabled application
     */
    id: string;
    /**
     * - (Required) The name of the privileged console.
     */
    name: string;
}

export interface GetPRAConsolePraPortal {
    /**
     * The unique identifier of the privileged portal
     */
    id: string;
    /**
     * - (Required) The name of the privileged console.
     */
    name: string;
}

export interface GetPolicyTypeRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetPolicyTypeRuleCondition[];
    creationTime: string;
    customMsg: string;
    description: string;
    id: string;
    isolationDefaultRule: boolean;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    operator: string;
    policySetId: string;
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
}

export interface GetPolicyTypeRuleCondition {
    creationTime: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    operands: outputs.GetPolicyTypeRuleConditionOperand[];
    operator: string;
}

export interface GetPolicyTypeRuleConditionOperand {
    creationTime: string;
    id: string;
    idpId: string;
    lhs: string;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetPraApprovalControllerApplication {
    /**
     * The unique identifier of the pra application segment
     */
    id: string;
    /**
     * The name of the pra application segment
     */
    name: string;
}

export interface GetPraApprovalControllerWorkingHour {
    /**
     * The days of the week that you want to enable the privileged approval
     */
    days: string[];
    /**
     * The end time that the user no longer has access to the privileged approval
     */
    endTime: string;
    /**
     * The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    endTimeCron: string;
    /**
     * The start time that the user has access to the privileged approval
     */
    startTime: string;
    /**
     * The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    startTimeCron: string;
    /**
     * The time zone for the time window of a privileged approval
     */
    timezone: string;
}

export interface GetPraConsoleControllerPraApplication {
    /**
     * The unique identifier of the Privileged Remote Access-enabled application
     */
    id: string;
    /**
     * The name of the Privileged Remote Access-enabled application
     */
    name: string;
}

export interface GetPraConsoleControllerPraPortal {
    /**
     * The unique identifier of the privileged portal
     */
    id: string;
    /**
     * The name of the privileged portal
     */
    name: string;
}

export interface GetSegmentGroupApplication {
    bypassType: string;
    configSpace: string;
    creationTime: string;
    defaultIdleTimeout: string;
    defaultMaxAge: string;
    description: string;
    domainName: string;
    domainNames: string[];
    doubleEncrypt: boolean;
    enabled: boolean;
    healthCheckType: string;
    id: string;
    ipAnchored: boolean;
    logFeatures: string[];
    modifiedBy: string;
    modifiedTime: string;
    name: string;
    passiveHealthEnabled: boolean;
    serverGroups: outputs.GetSegmentGroupApplicationServerGroup[];
    tcpPortRanges: string[];
    tcpPortsIns: string[];
    tcpPortsOuts: string[];
    udpPortRanges: string[];
}

export interface GetSegmentGroupApplicationServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    name: string;
}

export interface GetServerGroupAppConnectorGroup {
    cityCountry: string;
    connectors: outputs.GetServerGroupAppConnectorGroupConnector[];
    countryCode: string;
    creationTime: string;
    description: string;
    dnsQueryType: string;
    enabled: boolean;
    geolocationId: string;
    id: string;
    latitude: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    serverGroups: outputs.GetServerGroupAppConnectorGroupServerGroup[];
    siemAppConnectorGroup: boolean;
    upgradeDay: string;
    upgradeTimeInSecs: string;
    versionProfileId: string;
}

export interface GetServerGroupAppConnectorGroupConnector {
    creationTime: string;
    description: string;
    enabled: boolean;
    fingerprint: string;
    id: string;
    issuedCertId: string;
    modifiedTime: string;
    modifiedby: string;
    name?: string;
    upgradeAttempt: string;
}

export interface GetServerGroupAppConnectorGroupServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name?: string;
}

export interface GetServerGroupApplication {
    id: string;
    name: string;
}

export interface GetServerGroupServer {
    address: string;
    appServerGroupIds: string[];
    configSpace: string;
    creationTime: string;
    description: string;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetServiceEdgeControllerZpnSubModuleUpgradeList {
    creationTime: string;
    currentVersion: string;
    entityGid: string;
    expectedVersion: string;
    id: string;
    modifiedBy: string;
    modifiedTime: string;
    role: string;
    upgradeStatus: string;
    upgradeTime: string;
}

export interface GetServiceEdgeGroupServiceEdge {
    applicationStartTime: string;
    controlChannelStatus: string;
    creationTime: string;
    ctrlBrokerName: string;
    currentVersion: string;
    description: string;
    enabled: boolean;
    enrollmentCert: {[key: string]: any};
    expectedUpgradeTime: string;
    expectedVersion: string;
    fingerprint: string;
    id: string;
    ipacl: string;
    issuedCertId: string;
    lastBrokerConnectTime: string;
    lastBrokerConnectTimeDuration: string;
    lastBrokerDisconnectTime: string;
    lastBrokerDisconnectTimeDuration: string;
    lastUpgradeTime: string;
    latitude: string;
    listenIps: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    platform: string;
    previousVersion: string;
    privateIp: string;
    provisioningKeyId: string;
    provisioningKeyName: string;
    publicIp: string;
    publishIps: string[];
    sargeVersion: string;
    serviceEdgeGroupId: string;
    serviceEdgeGroupName: string;
    upgradeAttempt: string;
    upgradeStatus: string;
    zpnSubModuleUpgradeLists: outputs.GetServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList[];
}

export interface GetServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList {
    creationTime: string;
    currentVersion: string;
    entityGid: string;
    expectedVersion: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    role: string;
    upgradeStatus: string;
    upgradeTime: string;
}

export interface GetServiceEdgeGroupTrustedNetwork {
    creationTime: string;
    domain: string;
    id: string;
    masterCustomerId: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    networkId: string;
    zscalerCloud: string;
}

export interface InspectionCustomControlsAssociatedInspectionProfileName {
    ids: string[];
}

export interface InspectionCustomControlsRule {
    conditions: outputs.InspectionCustomControlsRuleConditions;
    /**
     * Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
     */
    names: string[];
    /**
     * Type value for the rules.
     */
    type: string;
}

export interface InspectionCustomControlsRuleConditions {
    /**
     * Signifies the key for the object type
     */
    lhs: string;
    /**
     * Denotes the operation type.
     */
    op: string;
    /**
     * Denotes the value for the given object type. Its value depends on the key.
     */
    rhs: string;
}

export interface InspectionProfileControlsInfo {
    controlType: string;
}

export interface InspectionProfileCustomControl {
    /**
     * The action of the custom control
     */
    action?: string;
    /**
     * Denotes the action. Supports any string
     */
    actionValue?: string;
    /**
     * The unique identifier of the custom control
     */
    id: string;
}

export interface InspectionProfilePredefinedControl {
    /**
     * The action of the predefined control
     */
    action: string;
    /**
     * The value for the predefined controls action. This field is only required if the action is set to REDIRECT
     */
    actionValue?: string;
    /**
     * The control type of the custom control
     */
    controlType?: string;
    /**
     * The unique identifier of the predefined control
     */
    id: string;
    /**
     * The protocol type of the predefined control
     */
    protocolType?: string;
}

export interface LSSConfigControllerConfig {
    auditMessage: string;
    /**
     * Description of the LSS configuration
     */
    description?: string;
    /**
     * Whether this LSS configuration is enabled or not. Supported values: true, false
     */
    enabled?: boolean;
    /**
     * Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes
     */
    filters?: string[];
    /**
     * Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats
     */
    format: string;
    id: string;
    /**
     * Host of the LSS configuration
     */
    lssHost: string;
    /**
     * Port of the LSS configuration
     */
    lssPort: string;
    /**
     * Name of the LSS configuration
     */
    name: string;
    /**
     * Log type of the LSS configuration
     */
    sourceLogType: string;
    useTls?: boolean;
}

export interface LSSConfigControllerConnectorGroup {
    ids?: string[];
}

export interface LSSConfigControllerPolicyRuleResource {
    /**
     * This is for providing the rule action.
     */
    action?: string;
    /**
     * This field defines the description of the server.
     */
    actionId?: string;
    bypassDefaultRule?: boolean;
    /**
     * This is for proviidng the set of conditions for the policy.
     */
    conditions?: outputs.LSSConfigControllerPolicyRuleResourceCondition[];
    /**
     * This is for providing a customer message for the user.
     */
    customMsg?: string;
    /**
     * This is for providing a customer message for the user.
     */
    defaultRule?: boolean;
    /**
     * This is the description of the access policy.
     */
    description?: string;
    id: string;
    lssDefaultRule?: boolean;
    microtenantId: string;
    /**
     * This is the name of the policy.
     */
    name: string;
    operator: string;
    policySetId?: string;
    policyType: string;
    priority: string;
    reauthDefaultRule?: boolean;
    reauthIdleTimeout?: string;
    reauthTimeout?: string;
    /**
     * @deprecated The `ruleOrder` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`
     */
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnIsolationProfileId: string;
}

export interface LSSConfigControllerPolicyRuleResourceCondition {
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.LSSConfigControllerPolicyRuleResourceConditionOperand[];
    operator: string;
}

export interface LSSConfigControllerPolicyRuleResourceConditionOperand {
    entryValues?: outputs.LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface MicrotenantUser {
    displayName: string;
    microtenantId: string;
    password: string;
    username: string;
}

export interface PRAApprovalApplication {
    /**
     * The unique identifier of the pra application segment
     */
    ids?: string[];
}

export interface PRAApprovalWorkingHour {
    /**
     * The days of the week that you want to enable the privileged approval
     */
    days: string[];
    /**
     * The end time that the user no longer has access to the privileged approval
     */
    endTime: string;
    /**
     * The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    endTimeCron: string;
    /**
     * The start time that the user has access to the privileged approval
     */
    startTime: string;
    /**
     * The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    startTimeCron: string;
    /**
     * The time zone for the time window of a privileged approval
     */
    timezone: string;
}

export interface PRAConsolePraApplication {
    /**
     * The unique identifier of the Privileged Remote Access-enabled application
     */
    id: string;
}

export interface PRAConsolePraPortal {
    /**
     * The unique identifier of the privileged portal
     */
    ids: string[];
}

export interface PolicyAccessForwardingRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessForwardingRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessForwardingRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessForwardingRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyAccessForwardingRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyAccessForwardingRuleV2ConditionOperand {
    entryValues: outputs.PolicyAccessForwardingRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyAccessForwardingRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyAccessInspectionRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessInspectionRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessInspectionRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessInspectionRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyAccessInspectionRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyAccessInspectionRuleV2ConditionOperand {
    entryValues: outputs.PolicyAccessInspectionRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyAccessInspectionRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyAccessIsolationRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessIsolationRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessIsolationRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessIsolationRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyAccessIsolationRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyAccessIsolationRuleV2ConditionOperand {
    entryValues: outputs.PolicyAccessIsolationRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyAccessIsolationRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyAccessReorderRuleRule {
    id: string;
    order: string;
}

export interface PolicyAccessRuleAppConnectorGroup {
    ids?: string[];
}

export interface PolicyAccessRuleAppServerGroup {
    ids?: string[];
}

export interface PolicyAccessRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessRuleConditionOperand[];
    /**
     * Supported values: `AND`, `OR`
     */
    operator: string;
}

export interface PolicyAccessRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    /**
     * This is the name of the policy rule.
     */
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessRuleV2AppConnectorGroup {
    ids: string[];
}

export interface PolicyAccessRuleV2AppServerGroup {
    ids?: string[];
}

export interface PolicyAccessRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyAccessRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyAccessRuleV2ConditionOperand {
    entryValues: outputs.PolicyAccessRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyAccessRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyAccessTimeOutRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyAccessTimeOutRuleConditionOperand[];
    operator: string;
}

export interface PolicyAccessTimeOutRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyAccessTimeOutRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyAccessTimeOutRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyAccessTimeOutRuleV2ConditionOperand {
    entryValues: outputs.PolicyAccessTimeOutRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyAccessTimeOutRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyCapabilitiesRuleCondition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyCapabilitiesRuleConditionOperand[];
    operator: string;
}

export interface PolicyCapabilitiesRuleConditionOperand {
    entryValues: outputs.PolicyCapabilitiesRuleConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyCapabilitiesRuleConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyCapabilitiesRulePrivilegedCapabilities {
    /**
     * Indicates the PRA Clipboard Copy function
     */
    clipboardCopy?: boolean;
    /**
     * Indicates the PRA Clipboard Paste function
     */
    clipboardPaste?: boolean;
    /**
     * Indicates the PRA File Transfer capabilities that enables the File Download function
     */
    fileDownload?: boolean;
    /**
     * Indicates the PRA File Transfer capabilities that enables the File Upload function
     */
    fileUpload?: boolean;
    /**
     * Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
     */
    inspectFileDownload?: boolean;
    /**
     * Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
     */
    inspectFileUpload?: boolean;
    /**
     * Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
     */
    monitorSession?: boolean;
    /**
     * Indicates the PRA Session Recording capabilities to enable PRA Session Recording
     */
    recordSession?: boolean;
    /**
     * Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
     */
    shareSession?: boolean;
}

export interface PolicyCredentialRuleCondition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyCredentialRuleConditionOperand[];
    operator: string;
}

export interface PolicyCredentialRuleConditionOperand {
    entryValues: outputs.PolicyCredentialRuleConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyCredentialRuleConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyCredentialRuleCredential {
    id: string;
}

export interface PolicyForwardingRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyForwardingRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyForwardingRuleV2ConditionOperand {
    entryValues: outputs.PolicyForwardingRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyForwardingRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyInspectionRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyInspectionRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyInspectionRuleV2ConditionOperand {
    entryValues: outputs.PolicyInspectionRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyInspectionRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyIsolationRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyIsolationRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyIsolationRuleV2ConditionOperand {
    entryValues: outputs.PolicyIsolationRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyIsolationRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PolicyRedirectionRuleCondition {
    id: string;
    microtenantId: string;
    /**
     * This signifies the various policy criteria.
     */
    operands?: outputs.PolicyRedirectionRuleConditionOperand[];
    operator: string;
}

export interface PolicyRedirectionRuleConditionOperand {
    id: string;
    idpId: string;
    /**
     * This signifies the key for the object type. String ID example: id
     */
    lhs: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    microtenantId: string;
    name: string;
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes the value for the given object type. Its value depends upon the key.
     */
    rhs: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    rhsLists: string[];
}

export interface PolicyRedirectionRuleServiceEdgeGroup {
    ids?: string[];
}

export interface PolicyTimeoutRuleV2Condition {
    id: string;
    /**
     * This signifies the various policy criteria.
     */
    operands: outputs.PolicyTimeoutRuleV2ConditionOperand[];
    operator: string;
}

export interface PolicyTimeoutRuleV2ConditionOperand {
    entryValues: outputs.PolicyTimeoutRuleV2ConditionOperandEntryValue[];
    /**
     * This is for specifying the policy critiera.
     */
    objectType: string;
    /**
     * This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
     */
    values?: string[];
}

export interface PolicyTimeoutRuleV2ConditionOperandEntryValue {
    lhs?: string;
    rhs?: string;
}

export interface PraApprovalControllerApplication {
    /**
     * The unique identifier of the pra application segment
     */
    ids?: string[];
}

export interface PraApprovalControllerWorkingHour {
    /**
     * The days of the week that you want to enable the privileged approval
     */
    days: string[];
    /**
     * The end time that the user no longer has access to the privileged approval
     */
    endTime: string;
    /**
     * The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    endTimeCron: string;
    /**
     * The start time that the user has access to the privileged approval
     */
    startTime: string;
    /**
     * The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
     */
    startTimeCron: string;
    /**
     * The time zone for the time window of a privileged approval
     */
    timezone: string;
}

export interface PraConsoleControllerPraApplication {
    /**
     * The unique identifier of the Privileged Remote Access-enabled application
     */
    id: string;
}

export interface PraConsoleControllerPraPortal {
    /**
     * The unique identifier of the privileged portal
     */
    ids: string[];
}

export interface SegmentGroupApplication {
    id?: string;
}

export interface ServerGroupAppConnectorGroup {
    ids?: string[];
}

export interface ServerGroupApplication {
    ids?: string[];
}

export interface ServerGroupServer {
    ids?: string[];
}

export interface ServiceEdgeGroupServiceEdge {
    ids: string[];
}

export interface ServiceEdgeGroupTrustedNetwork {
    ids?: string[];
}

