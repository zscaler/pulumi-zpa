// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-privileged-approvals)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-approvals-using-api)
 *
 * The **zpa_pra_approval_controller** resource creates a privileged remote access approval in the Zscaler Private Access cloud. This resource allows third-party users and contractors to be able to log in to a Privileged Remote Access (PRA) portal.
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zpa_pra_approval_controller** can be imported by using `<APPROVAL ID>` or `<APPROVAL NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zpa:index/pRAApproval:PRAApproval this <approval_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zpa:index/pRAApproval:PRAApproval this <approval_name>
 * ```
 */
export class PRAApproval extends pulumi.CustomResource {
    /**
     * Get an existing PRAApproval resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PRAApprovalState, opts?: pulumi.CustomResourceOptions): PRAApproval {
        return new PRAApproval(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/pRAApproval:PRAApproval';

    /**
     * Returns true if the given object is an instance of PRAApproval.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PRAApproval {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PRAApproval.__pulumiType;
    }

    public readonly applications!: pulumi.Output<outputs.PRAApprovalApplication[]>;
    /**
     * The email address of the user that you are assigning the privileged approval to
     */
    public readonly emailIds!: pulumi.Output<string>;
    /**
     * The end date that the user no longer has access to the privileged approval
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    public readonly microtenantId!: pulumi.Output<string>;
    /**
     * The start date that the user has access to the privileged approval
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * The status of the privileged approval
     */
    public readonly status!: pulumi.Output<string>;
    public readonly workingHours!: pulumi.Output<outputs.PRAApprovalWorkingHour[]>;

    /**
     * Create a PRAApproval resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PRAApprovalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PRAApprovalArgs | PRAApprovalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PRAApprovalState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["emailIds"] = state ? state.emailIds : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["microtenantId"] = state ? state.microtenantId : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["workingHours"] = state ? state.workingHours : undefined;
        } else {
            const args = argsOrState as PRAApprovalArgs | undefined;
            if ((!args || args.applications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["emailIds"] = args ? args.emailIds : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["microtenantId"] = args ? args.microtenantId : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["workingHours"] = args ? args.workingHours : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "zpa:index/praApprovalController:PraApprovalController" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(PRAApproval.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PRAApproval resources.
 */
export interface PRAApprovalState {
    applications?: pulumi.Input<pulumi.Input<inputs.PRAApprovalApplication>[]>;
    /**
     * The email address of the user that you are assigning the privileged approval to
     */
    emailIds?: pulumi.Input<string>;
    /**
     * The end date that the user no longer has access to the privileged approval
     */
    endTime?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The start date that the user has access to the privileged approval
     */
    startTime?: pulumi.Input<string>;
    /**
     * The status of the privileged approval
     */
    status?: pulumi.Input<string>;
    workingHours?: pulumi.Input<pulumi.Input<inputs.PRAApprovalWorkingHour>[]>;
}

/**
 * The set of arguments for constructing a PRAApproval resource.
 */
export interface PRAApprovalArgs {
    applications: pulumi.Input<pulumi.Input<inputs.PRAApprovalApplication>[]>;
    /**
     * The email address of the user that you are assigning the privileged approval to
     */
    emailIds?: pulumi.Input<string>;
    /**
     * The end date that the user no longer has access to the privileged approval
     */
    endTime?: pulumi.Input<string>;
    /**
     * The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
     * microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * The start date that the user has access to the privileged approval
     */
    startTime?: pulumi.Input<string>;
    /**
     * The status of the privileged approval
     */
    status?: pulumi.Input<string>;
    workingHours?: pulumi.Input<pulumi.Input<inputs.PRAApprovalWorkingHour>[]>;
}
