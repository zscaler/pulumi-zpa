// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getSegmentGroup({
 *     name: "segment_group_name",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSegmentGroup(args?: GetSegmentGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetSegmentGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getSegmentGroup:getSegmentGroup", {
        "id": args.id,
        "microtenantId": args.microtenantId,
        "microtenantName": args.microtenantName,
        "name": args.name,
        "policyMigrated": args.policyMigrated,
    }, opts);
}

/**
 * A collection of arguments for invoking getSegmentGroup.
 */
export interface GetSegmentGroupArgs {
    /**
     * The ID of the segment group to be exported.
     */
    id?: string;
    /**
     * (string) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId?: string;
    /**
     * (string) The name of the microtenant the resource is to be associated with.
     */
    microtenantName?: string;
    /**
     * The name of the segment group to be exported.
     */
    name?: string;
    /**
     * (bool)
     */
    policyMigrated?: boolean;
}

/**
 * A collection of values returned by getSegmentGroup.
 */
export interface GetSegmentGroupResult {
    /**
     * (Computed)
     */
    readonly applications: outputs.GetSegmentGroupApplication[];
    /**
     * (string)
     */
    readonly configSpace: string;
    /**
     * (string)
     */
    readonly creationTime: string;
    /**
     * (string)
     */
    readonly description: string;
    /**
     * (bool)
     */
    readonly enabled: boolean;
    /**
     * (string)
     */
    readonly id?: string;
    /**
     * (string) The ID of the microtenant the resource is to be associated with.
     */
    readonly microtenantId?: string;
    /**
     * (string) The name of the microtenant the resource is to be associated with.
     */
    readonly microtenantName?: string;
    /**
     * (string)
     */
    readonly modifiedBy: string;
    /**
     * (string)
     */
    readonly modifiedTime: string;
    /**
     * (string)
     */
    readonly name?: string;
    /**
     * (bool)
     */
    readonly policyMigrated: boolean;
    /**
     * (string)
     */
    readonly tcpKeepAliveEnabled: string;
}
/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@pulumi/zpa";
 *
 * const example = zpa.getSegmentGroup({
 *     name: "segment_group_name",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getSegmentGroupOutput(args?: GetSegmentGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSegmentGroupResult> {
    return pulumi.output(args).apply((a: any) => getSegmentGroup(a, opts))
}

/**
 * A collection of arguments for invoking getSegmentGroup.
 */
export interface GetSegmentGroupOutputArgs {
    /**
     * The ID of the segment group to be exported.
     */
    id?: pulumi.Input<string>;
    /**
     * (string) The ID of the microtenant the resource is to be associated with.
     */
    microtenantId?: pulumi.Input<string>;
    /**
     * (string) The name of the microtenant the resource is to be associated with.
     */
    microtenantName?: pulumi.Input<string>;
    /**
     * The name of the segment group to be exported.
     */
    name?: pulumi.Input<string>;
    /**
     * (bool)
     */
    policyMigrated?: pulumi.Input<boolean>;
}
