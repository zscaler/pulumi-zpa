// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zpa/about-microtenants)
 * * [API documentation](https://help.zscaler.com/zpa/configuring-microtenants-using-api)
 *
 * The **zpa_microtenant_controller** resource creates a microtenant controller in the Zscaler Private Access cloud. This resource allows organizations to delegate responsibilities of admins directly to the acquired or merged company admins so that they can manage their configurations independently
 *
 * ⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Microtenant Controller resource
 * const _this = new zpa.Microtenant("this", {
 *     name: "Microtenant_A",
 *     description: "Microtenant_A",
 *     enabled: true,
 *     criteriaAttribute: "AuthDomain",
 *     criteriaAttributeValues: ["acme.com"],
 *     privilegedApprovalsEnabled: true,
 * });
 * export const zpaMicrotenantController1 = _this.users.apply(users => users.map(u => ({
 *     microtenantId: u.microtenantId,
 *     username: u.username,
 *     password: u.password,
 * })));
 * ```
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **microtenant_controller** can be imported by using `<MICROTENANT ID>` or `<MICROTENANT NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zpa:index/microtenant:Microtenant example <microtenant_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zpa:index/microtenant:Microtenant example <microtenant_name>
 * ```
 */
export class Microtenant extends pulumi.CustomResource {
    /**
     * Get an existing Microtenant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MicrotenantState, opts?: pulumi.CustomResourceOptions): Microtenant {
        return new Microtenant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/microtenant:Microtenant';

    /**
     * Returns true if the given object is an instance of Microtenant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Microtenant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Microtenant.__pulumiType;
    }

    /**
     * - (Required) Type of authentication criteria for the microtenant
     */
    public readonly criteriaAttribute!: pulumi.Output<string | undefined>;
    /**
     * - (Required) The domain associated with the respective microtenant controller resource
     */
    public readonly criteriaAttributeValues!: pulumi.Output<string[]>;
    /**
     * The description of the Microtenant.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * - (Required) Name of the microtenant controller.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    public readonly privilegedApprovalsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly users!: pulumi.Output<outputs.MicrotenantUser[]>;

    /**
     * Create a Microtenant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MicrotenantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MicrotenantArgs | MicrotenantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MicrotenantState | undefined;
            resourceInputs["criteriaAttribute"] = state ? state.criteriaAttribute : undefined;
            resourceInputs["criteriaAttributeValues"] = state ? state.criteriaAttributeValues : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privilegedApprovalsEnabled"] = state ? state.privilegedApprovalsEnabled : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as MicrotenantArgs | undefined;
            resourceInputs["criteriaAttribute"] = args ? args.criteriaAttribute : undefined;
            resourceInputs["criteriaAttributeValues"] = args ? args.criteriaAttributeValues : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privilegedApprovalsEnabled"] = args ? args.privilegedApprovalsEnabled : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Microtenant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Microtenant resources.
 */
export interface MicrotenantState {
    /**
     * - (Required) Type of authentication criteria for the microtenant
     */
    criteriaAttribute?: pulumi.Input<string>;
    /**
     * - (Required) The domain associated with the respective microtenant controller resource
     */
    criteriaAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Microtenant.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * - (Required) Name of the microtenant controller.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    privilegedApprovalsEnabled?: pulumi.Input<boolean>;
    users?: pulumi.Input<pulumi.Input<inputs.MicrotenantUser>[]>;
}

/**
 * The set of arguments for constructing a Microtenant resource.
 */
export interface MicrotenantArgs {
    /**
     * - (Required) Type of authentication criteria for the microtenant
     */
    criteriaAttribute?: pulumi.Input<string>;
    /**
     * - (Required) The domain associated with the respective microtenant controller resource
     */
    criteriaAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Microtenant.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * - (Required) Name of the microtenant controller.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    privilegedApprovalsEnabled?: pulumi.Input<boolean>;
    users?: pulumi.Input<pulumi.Input<inputs.MicrotenantUser>[]>;
}
