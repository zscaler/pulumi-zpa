// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Provisioning Key for "CONNECTOR_GRP"
 * const example = zpa.getProvisioningKey({
 *     name: "Provisioning_Key",
 *     associationType: "CONNECTOR_GRP",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Provisioning Key for "SERVICE_EDGE_GRP"
 * const example = zpa.getProvisioningKey({
 *     name: "Provisioning_Key",
 *     associationType: "SERVICE_EDGE_GRP",
 * });
 * ```
 */
export function getProvisioningKey(args: GetProvisioningKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetProvisioningKeyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getProvisioningKey:getProvisioningKey", {
        "associationType": args.associationType,
        "id": args.id,
        "microtenantId": args.microtenantId,
        "microtenantName": args.microtenantName,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProvisioningKey.
 */
export interface GetProvisioningKeyArgs {
    associationType: string;
    id?: string;
    microtenantId?: string;
    microtenantName?: string;
    name?: string;
}

/**
 * A collection of values returned by getProvisioningKey.
 */
export interface GetProvisioningKeyResult {
    readonly appConnectorGroupId: string;
    readonly appConnectorGroupName: string;
    readonly associationType: string;
    readonly creationTime: string;
    readonly enabled: boolean;
    readonly enrollmentCertId: string;
    readonly enrollmentCertName: string;
    readonly expirationInEpochSec: string;
    readonly id?: string;
    readonly ipAcls: string[];
    readonly maxUsage: string;
    readonly microtenantId?: string;
    readonly microtenantName?: string;
    readonly modifiedTime: string;
    readonly modifiedby: string;
    readonly name?: string;
    readonly provisioningKey: string;
    readonly uiConfig: string;
    readonly usageCount: string;
    readonly zcomponentId: string;
    readonly zcomponentName: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Provisioning Key for "CONNECTOR_GRP"
 * const example = zpa.getProvisioningKey({
 *     name: "Provisioning_Key",
 *     associationType: "CONNECTOR_GRP",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zpa from "@bdzscaler/pulumi-zpa";
 *
 * // ZPA Provisioning Key for "SERVICE_EDGE_GRP"
 * const example = zpa.getProvisioningKey({
 *     name: "Provisioning_Key",
 *     associationType: "SERVICE_EDGE_GRP",
 * });
 * ```
 */
export function getProvisioningKeyOutput(args: GetProvisioningKeyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProvisioningKeyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zpa:index/getProvisioningKey:getProvisioningKey", {
        "associationType": args.associationType,
        "id": args.id,
        "microtenantId": args.microtenantId,
        "microtenantName": args.microtenantName,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProvisioningKey.
 */
export interface GetProvisioningKeyOutputArgs {
    associationType: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    microtenantId?: pulumi.Input<string>;
    microtenantName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
