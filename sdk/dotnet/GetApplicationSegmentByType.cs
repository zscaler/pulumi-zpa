// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetApplicationSegmentByType
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-applications)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-application-segments-using-api)
        /// 
        /// Use the **zpa_application_segment_by_type** data source to get all configured Application Segments by Access Type (e.g., ``BROWSER_ACCESS``, ``INSPECT``, or ``SECURE_REMOTE_ACCESS``) for the specified customer.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentByType.Invoke(new()
        ///     {
        ///         ApplicationType = "SECURE_REMOTE_ACCESS",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplicationSegmentByTypeResult> InvokeAsync(GetApplicationSegmentByTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationSegmentByTypeResult>("zpa:index/getApplicationSegmentByType:getApplicationSegmentByType", args ?? new GetApplicationSegmentByTypeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-applications)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-application-segments-using-api)
        /// 
        /// Use the **zpa_application_segment_by_type** data source to get all configured Application Segments by Access Type (e.g., ``BROWSER_ACCESS``, ``INSPECT``, or ``SECURE_REMOTE_ACCESS``) for the specified customer.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentByType.Invoke(new()
        ///     {
        ///         ApplicationType = "SECURE_REMOTE_ACCESS",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationSegmentByTypeResult> Invoke(GetApplicationSegmentByTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationSegmentByTypeResult>("zpa:index/getApplicationSegmentByType:getApplicationSegmentByType", args ?? new GetApplicationSegmentByTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-applications)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-application-segments-using-api)
        /// 
        /// Use the **zpa_application_segment_by_type** data source to get all configured Application Segments by Access Type (e.g., ``BROWSER_ACCESS``, ``INSPECT``, or ``SECURE_REMOTE_ACCESS``) for the specified customer.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentByType.Invoke(new()
        ///     {
        ///         ApplicationType = "SECURE_REMOTE_ACCESS",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationSegmentByTypeResult> Invoke(GetApplicationSegmentByTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationSegmentByTypeResult>("zpa:index/getApplicationSegmentByType:getApplicationSegmentByType", args ?? new GetApplicationSegmentByTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationSegmentByTypeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationType", required: true)]
        public string ApplicationType { get; set; } = null!;

        [Input("microtenantId")]
        public string? MicrotenantId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetApplicationSegmentByTypeArgs()
        {
        }
        public static new GetApplicationSegmentByTypeArgs Empty => new GetApplicationSegmentByTypeArgs();
    }

    public sealed class GetApplicationSegmentByTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("applicationType", required: true)]
        public Input<string> ApplicationType { get; set; } = null!;

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetApplicationSegmentByTypeInvokeArgs()
        {
        }
        public static new GetApplicationSegmentByTypeInvokeArgs Empty => new GetApplicationSegmentByTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationSegmentByTypeResult
    {
        public readonly string AppId;
        public readonly string ApplicationPort;
        public readonly string ApplicationProtocol;
        public readonly string ApplicationType;
        public readonly string CertificateId;
        public readonly string CertificateName;
        public readonly string Domain;
        public readonly bool Enabled;
        public readonly string Id;
        public readonly string? MicrotenantId;
        public readonly string MicrotenantName;
        public readonly string? Name;

        [OutputConstructor]
        private GetApplicationSegmentByTypeResult(
            string appId,

            string applicationPort,

            string applicationProtocol,

            string applicationType,

            string certificateId,

            string certificateName,

            string domain,

            bool enabled,

            string id,

            string? microtenantId,

            string microtenantName,

            string? name)
        {
            AppId = appId;
            ApplicationPort = applicationPort;
            ApplicationProtocol = applicationProtocol;
            ApplicationType = applicationType;
            CertificateId = certificateId;
            CertificateName = certificateName;
            Domain = domain;
            Enabled = enabled;
            Id = id;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            Name = name;
        }
    }
}
