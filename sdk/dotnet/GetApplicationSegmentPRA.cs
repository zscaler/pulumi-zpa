// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetApplicationSegmentPRA
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-remote-access-applications)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-application-segments-using-api)
        /// 
        /// Use the **zpa_application_segment_pra** data source to get information about an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()
        ///     {
        ///         Name = "PRA_Example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetApplicationSegmentPRAResult> InvokeAsync(GetApplicationSegmentPRAArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationSegmentPRAResult>("zpa:index/getApplicationSegmentPRA:getApplicationSegmentPRA", args ?? new GetApplicationSegmentPRAArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-remote-access-applications)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-application-segments-using-api)
        /// 
        /// Use the **zpa_application_segment_pra** data source to get information about an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()
        ///     {
        ///         Name = "PRA_Example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetApplicationSegmentPRAResult> Invoke(GetApplicationSegmentPRAInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationSegmentPRAResult>("zpa:index/getApplicationSegmentPRA:getApplicationSegmentPRA", args ?? new GetApplicationSegmentPRAInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationSegmentPRAArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("microtenantId")]
        public string? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public string? MicrotenantName { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("tcpPortRange")]
        private List<Inputs.GetApplicationSegmentPRATcpPortRangeArgs>? _tcpPortRange;
        public List<Inputs.GetApplicationSegmentPRATcpPortRangeArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new List<Inputs.GetApplicationSegmentPRATcpPortRangeArgs>());
            set => _tcpPortRange = value;
        }

        [Input("udpPortRange")]
        private List<Inputs.GetApplicationSegmentPRAUdpPortRangeArgs>? _udpPortRange;
        public List<Inputs.GetApplicationSegmentPRAUdpPortRangeArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new List<Inputs.GetApplicationSegmentPRAUdpPortRangeArgs>());
            set => _udpPortRange = value;
        }

        public GetApplicationSegmentPRAArgs()
        {
        }
        public static new GetApplicationSegmentPRAArgs Empty => new GetApplicationSegmentPRAArgs();
    }

    public sealed class GetApplicationSegmentPRAInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public Input<string>? MicrotenantName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcpPortRange")]
        private InputList<Inputs.GetApplicationSegmentPRATcpPortRangeInputArgs>? _tcpPortRange;
        public InputList<Inputs.GetApplicationSegmentPRATcpPortRangeInputArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new InputList<Inputs.GetApplicationSegmentPRATcpPortRangeInputArgs>());
            set => _tcpPortRange = value;
        }

        [Input("udpPortRange")]
        private InputList<Inputs.GetApplicationSegmentPRAUdpPortRangeInputArgs>? _udpPortRange;
        public InputList<Inputs.GetApplicationSegmentPRAUdpPortRangeInputArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new InputList<Inputs.GetApplicationSegmentPRAUdpPortRangeInputArgs>());
            set => _udpPortRange = value;
        }

        public GetApplicationSegmentPRAInvokeArgs()
        {
        }
        public static new GetApplicationSegmentPRAInvokeArgs Empty => new GetApplicationSegmentPRAInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationSegmentPRAResult
    {
        public readonly string BypassType;
        public readonly string ConfigSpace;
        public readonly string Description;
        public readonly ImmutableArray<string> DomainNames;
        public readonly bool DoubleEncrypt;
        public readonly bool Enabled;
        public readonly string HealthCheckType;
        public readonly string HealthReporting;
        public readonly string? Id;
        public readonly bool IpAnchored;
        public readonly bool IsCnameEnabled;
        public readonly string? MicrotenantId;
        public readonly string? MicrotenantName;
        public readonly string? Name;
        public readonly bool PassiveHealthEnabled;
        public readonly string SegmentGroupId;
        public readonly string SegmentGroupName;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentPRAServerGroupResult> ServerGroups;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentPRASraAppResult> SraApps;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentPRATcpPortRangeResult> TcpPortRange;
        public readonly ImmutableArray<string> TcpPortRanges;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentPRAUdpPortRangeResult> UdpPortRange;
        public readonly ImmutableArray<string> UdpPortRanges;

        [OutputConstructor]
        private GetApplicationSegmentPRAResult(
            string bypassType,

            string configSpace,

            string description,

            ImmutableArray<string> domainNames,

            bool doubleEncrypt,

            bool enabled,

            string healthCheckType,

            string healthReporting,

            string? id,

            bool ipAnchored,

            bool isCnameEnabled,

            string? microtenantId,

            string? microtenantName,

            string? name,

            bool passiveHealthEnabled,

            string segmentGroupId,

            string segmentGroupName,

            ImmutableArray<Outputs.GetApplicationSegmentPRAServerGroupResult> serverGroups,

            ImmutableArray<Outputs.GetApplicationSegmentPRASraAppResult> sraApps,

            ImmutableArray<Outputs.GetApplicationSegmentPRATcpPortRangeResult> tcpPortRange,

            ImmutableArray<string> tcpPortRanges,

            ImmutableArray<Outputs.GetApplicationSegmentPRAUdpPortRangeResult> udpPortRange,

            ImmutableArray<string> udpPortRanges)
        {
            BypassType = bypassType;
            ConfigSpace = configSpace;
            Description = description;
            DomainNames = domainNames;
            DoubleEncrypt = doubleEncrypt;
            Enabled = enabled;
            HealthCheckType = healthCheckType;
            HealthReporting = healthReporting;
            Id = id;
            IpAnchored = ipAnchored;
            IsCnameEnabled = isCnameEnabled;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            Name = name;
            PassiveHealthEnabled = passiveHealthEnabled;
            SegmentGroupId = segmentGroupId;
            SegmentGroupName = segmentGroupName;
            ServerGroups = serverGroups;
            SraApps = sraApps;
            TcpPortRange = tcpPortRange;
            TcpPortRanges = tcpPortRanges;
            UdpPortRange = udpPortRange;
            UdpPortRanges = udpPortRanges;
        }
    }
}
