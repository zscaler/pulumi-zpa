// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api)
    /// 
    /// The **zpa_policy_access_rule_reorder** is a dedicated resource to manage and update `rule_orders` in any of the supported ZPA Policy Access types Zscaler Private Access cloud.
    /// 
    /// ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of this resource for all ZPA policy types.
    /// 
    /// ⚠️ **WARNING:**: Updating the rule order of an access policy configured using `Zscaler Deception` is not supported. When changing the rule order of a regular access policy and there is an access policy configured using Deception, the rule order of the regular access policy must be greater than the rule order for an access policy configured using Deception. Please refer to the [Zscaler API Documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#:~:text=Updating%20the%20rule,configured%20using%20Deception.) for further details.
    /// 
    /// ## Example Usage
    /// </summary>
    [ZpaResourceType("zpa:index/policyAccessReorderRule:PolicyAccessReorderRule")]
    public partial class PolicyAccessReorderRule : global::Pulumi.CustomResource
    {
        [Output("policyType")]
        public Output<string> PolicyType { get; private set; } = null!;

        /// <summary>
        /// List of rules and their orders
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.PolicyAccessReorderRuleRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyAccessReorderRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyAccessReorderRule(string name, PolicyAccessReorderRuleArgs args, CustomResourceOptions? options = null)
            : base("zpa:index/policyAccessReorderRule:PolicyAccessReorderRule", name, args ?? new PolicyAccessReorderRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyAccessReorderRule(string name, Input<string> id, PolicyAccessReorderRuleState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/policyAccessReorderRule:PolicyAccessReorderRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyAccessReorderRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyAccessReorderRule Get(string name, Input<string> id, PolicyAccessReorderRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyAccessReorderRule(name, id, state, options);
        }
    }

    public sealed class PolicyAccessReorderRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("policyType", required: true)]
        public Input<string> PolicyType { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.PolicyAccessReorderRuleRuleArgs>? _rules;

        /// <summary>
        /// List of rules and their orders
        /// </summary>
        public InputList<Inputs.PolicyAccessReorderRuleRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyAccessReorderRuleRuleArgs>());
            set => _rules = value;
        }

        public PolicyAccessReorderRuleArgs()
        {
        }
        public static new PolicyAccessReorderRuleArgs Empty => new PolicyAccessReorderRuleArgs();
    }

    public sealed class PolicyAccessReorderRuleState : global::Pulumi.ResourceArgs
    {
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        [Input("rules")]
        private InputList<Inputs.PolicyAccessReorderRuleRuleGetArgs>? _rules;

        /// <summary>
        /// List of rules and their orders
        /// </summary>
        public InputList<Inputs.PolicyAccessReorderRuleRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyAccessReorderRuleRuleGetArgs>());
            set => _rules = value;
        }

        public PolicyAccessReorderRuleState()
        {
        }
        public static new PolicyAccessReorderRuleState Empty => new PolicyAccessReorderRuleState();
    }
}
