// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa.Outputs
{

    [OutputType]
    public sealed class GetServiceEdgeGroupServiceEdgeResult
    {
        public readonly string ApplicationStartTime;
        public readonly string ControlChannelStatus;
        public readonly string CreationTime;
        public readonly string CtrlBrokerName;
        public readonly string CurrentVersion;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly ImmutableDictionary<string, string> EnrollmentCert;
        public readonly string ExpectedUpgradeTime;
        public readonly string ExpectedVersion;
        public readonly string Fingerprint;
        public readonly string Id;
        public readonly string IpAcl;
        public readonly string IssuedCertId;
        public readonly string LastBrokerConnectTime;
        public readonly string LastBrokerConnectTimeDuration;
        public readonly string LastBrokerDisconnectTime;
        public readonly string LastBrokerDisconnectTimeDuration;
        public readonly string LastUpgradeTime;
        public readonly string Latitude;
        public readonly ImmutableArray<string> ListenIps;
        public readonly string Location;
        public readonly string Longitude;
        public readonly string? MicrotenantId;
        public readonly string? MicrotenantName;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        public readonly string? Name;
        public readonly string Platform;
        public readonly string PreviousVersion;
        public readonly ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgePrivateBrokerVersionResult> PrivateBrokerVersions;
        public readonly string PrivateIp;
        public readonly string ProvisioningKeyId;
        public readonly string ProvisioningKeyName;
        public readonly string PublicIp;
        public readonly ImmutableArray<string> PublishIps;
        public readonly bool PublishIpv6;
        public readonly string RuntimeOs;
        public readonly string SargeVersion;
        public readonly string ServiceEdgeGroupId;
        public readonly string ServiceEdgeGroupName;
        public readonly string UpgradeAttempt;
        public readonly string UpgradeStatus;

        [OutputConstructor]
        private GetServiceEdgeGroupServiceEdgeResult(
            string applicationStartTime,

            string controlChannelStatus,

            string creationTime,

            string ctrlBrokerName,

            string currentVersion,

            string description,

            bool enabled,

            ImmutableDictionary<string, string> enrollmentCert,

            string expectedUpgradeTime,

            string expectedVersion,

            string fingerprint,

            string id,

            string ipAcl,

            string issuedCertId,

            string lastBrokerConnectTime,

            string lastBrokerConnectTimeDuration,

            string lastBrokerDisconnectTime,

            string lastBrokerDisconnectTimeDuration,

            string lastUpgradeTime,

            string latitude,

            ImmutableArray<string> listenIps,

            string location,

            string longitude,

            string? microtenantId,

            string? microtenantName,

            string modifiedBy,

            string modifiedTime,

            string? name,

            string platform,

            string previousVersion,

            ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgePrivateBrokerVersionResult> privateBrokerVersions,

            string privateIp,

            string provisioningKeyId,

            string provisioningKeyName,

            string publicIp,

            ImmutableArray<string> publishIps,

            bool publishIpv6,

            string runtimeOs,

            string sargeVersion,

            string serviceEdgeGroupId,

            string serviceEdgeGroupName,

            string upgradeAttempt,

            string upgradeStatus)
        {
            ApplicationStartTime = applicationStartTime;
            ControlChannelStatus = controlChannelStatus;
            CreationTime = creationTime;
            CtrlBrokerName = ctrlBrokerName;
            CurrentVersion = currentVersion;
            Description = description;
            Enabled = enabled;
            EnrollmentCert = enrollmentCert;
            ExpectedUpgradeTime = expectedUpgradeTime;
            ExpectedVersion = expectedVersion;
            Fingerprint = fingerprint;
            Id = id;
            IpAcl = ipAcl;
            IssuedCertId = issuedCertId;
            LastBrokerConnectTime = lastBrokerConnectTime;
            LastBrokerConnectTimeDuration = lastBrokerConnectTimeDuration;
            LastBrokerDisconnectTime = lastBrokerDisconnectTime;
            LastBrokerDisconnectTimeDuration = lastBrokerDisconnectTimeDuration;
            LastUpgradeTime = lastUpgradeTime;
            Latitude = latitude;
            ListenIps = listenIps;
            Location = location;
            Longitude = longitude;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            Platform = platform;
            PreviousVersion = previousVersion;
            PrivateBrokerVersions = privateBrokerVersions;
            PrivateIp = privateIp;
            ProvisioningKeyId = provisioningKeyId;
            ProvisioningKeyName = provisioningKeyName;
            PublicIp = publicIp;
            PublishIps = publishIps;
            PublishIpv6 = publishIpv6;
            RuntimeOs = runtimeOs;
            SargeVersion = sargeVersion;
            ServiceEdgeGroupId = serviceEdgeGroupId;
            ServiceEdgeGroupName = serviceEdgeGroupName;
            UpgradeAttempt = upgradeAttempt;
            UpgradeStatus = upgradeStatus;
        }
    }
}
