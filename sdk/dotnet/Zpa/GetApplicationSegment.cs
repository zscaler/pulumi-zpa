// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    public static class GetApplicationSegment
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApplicationSegmentResult> InvokeAsync(GetApplicationSegmentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationSegmentResult>("zpa:index/getApplicationSegment:getApplicationSegment", args ?? new GetApplicationSegmentArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationSegmentResult> Invoke(GetApplicationSegmentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationSegmentResult>("zpa:index/getApplicationSegment:getApplicationSegment", args ?? new GetApplicationSegmentInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetApplicationSegment.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApplicationSegmentResult> Invoke(GetApplicationSegmentInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationSegmentResult>("zpa:index/getApplicationSegment:getApplicationSegment", args ?? new GetApplicationSegmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationSegmentArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("isIncompleteDrConfig")]
        public bool? IsIncompleteDrConfig { get; set; }

        [Input("microtenantId")]
        public string? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public string? MicrotenantName { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("tcpPortRange")]
        private List<Inputs.GetApplicationSegmentTcpPortRangeArgs>? _tcpPortRange;
        public List<Inputs.GetApplicationSegmentTcpPortRangeArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new List<Inputs.GetApplicationSegmentTcpPortRangeArgs>());
            set => _tcpPortRange = value;
        }

        [Input("udpPortRange")]
        private List<Inputs.GetApplicationSegmentUdpPortRangeArgs>? _udpPortRange;
        public List<Inputs.GetApplicationSegmentUdpPortRangeArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new List<Inputs.GetApplicationSegmentUdpPortRangeArgs>());
            set => _udpPortRange = value;
        }

        public GetApplicationSegmentArgs()
        {
        }
        public static new GetApplicationSegmentArgs Empty => new GetApplicationSegmentArgs();
    }

    public sealed class GetApplicationSegmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("isIncompleteDrConfig")]
        public Input<bool>? IsIncompleteDrConfig { get; set; }

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public Input<string>? MicrotenantName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcpPortRange")]
        private InputList<Inputs.GetApplicationSegmentTcpPortRangeInputArgs>? _tcpPortRange;
        public InputList<Inputs.GetApplicationSegmentTcpPortRangeInputArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new InputList<Inputs.GetApplicationSegmentTcpPortRangeInputArgs>());
            set => _tcpPortRange = value;
        }

        [Input("udpPortRange")]
        private InputList<Inputs.GetApplicationSegmentUdpPortRangeInputArgs>? _udpPortRange;
        public InputList<Inputs.GetApplicationSegmentUdpPortRangeInputArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new InputList<Inputs.GetApplicationSegmentUdpPortRangeInputArgs>());
            set => _udpPortRange = value;
        }

        public GetApplicationSegmentInvokeArgs()
        {
        }
        public static new GetApplicationSegmentInvokeArgs Empty => new GetApplicationSegmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationSegmentResult
    {
        public readonly bool ApiProtectionEnabled;
        public readonly string BypassType;
        public readonly string ConfigSpace;
        public readonly string CreationTime;
        public readonly string DefaultIdleTimeout;
        public readonly string DefaultMaxAge;
        public readonly string Description;
        public readonly ImmutableArray<string> DomainNames;
        public readonly bool DoubleEncrypt;
        public readonly bool Enabled;
        public readonly string HealthCheckType;
        public readonly string HealthReporting;
        public readonly string? Id;
        public readonly bool IpAnchored;
        public readonly bool IsCnameEnabled;
        public readonly bool IsIncompleteDrConfig;
        public readonly string? MicrotenantId;
        public readonly string? MicrotenantName;
        public readonly string ModifiedTime;
        public readonly string Modifiedby;
        public readonly string? Name;
        public readonly bool PassiveHealthEnabled;
        public readonly string SegmentGroupId;
        public readonly string SegmentGroupName;
        public readonly bool SelectConnectorCloseToApp;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentServerGroupResult> ServerGroups;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentTcpPortRangeResult> TcpPortRange;
        public readonly ImmutableArray<string> TcpPortRanges;
        public readonly ImmutableArray<Outputs.GetApplicationSegmentUdpPortRangeResult> UdpPortRange;
        public readonly ImmutableArray<string> UdpPortRanges;
        public readonly bool UseInDrMode;

        [OutputConstructor]
        private GetApplicationSegmentResult(
            bool apiProtectionEnabled,

            string bypassType,

            string configSpace,

            string creationTime,

            string defaultIdleTimeout,

            string defaultMaxAge,

            string description,

            ImmutableArray<string> domainNames,

            bool doubleEncrypt,

            bool enabled,

            string healthCheckType,

            string healthReporting,

            string? id,

            bool ipAnchored,

            bool isCnameEnabled,

            bool isIncompleteDrConfig,

            string? microtenantId,

            string? microtenantName,

            string modifiedTime,

            string modifiedby,

            string? name,

            bool passiveHealthEnabled,

            string segmentGroupId,

            string segmentGroupName,

            bool selectConnectorCloseToApp,

            ImmutableArray<Outputs.GetApplicationSegmentServerGroupResult> serverGroups,

            ImmutableArray<Outputs.GetApplicationSegmentTcpPortRangeResult> tcpPortRange,

            ImmutableArray<string> tcpPortRanges,

            ImmutableArray<Outputs.GetApplicationSegmentUdpPortRangeResult> udpPortRange,

            ImmutableArray<string> udpPortRanges,

            bool useInDrMode)
        {
            ApiProtectionEnabled = apiProtectionEnabled;
            BypassType = bypassType;
            ConfigSpace = configSpace;
            CreationTime = creationTime;
            DefaultIdleTimeout = defaultIdleTimeout;
            DefaultMaxAge = defaultMaxAge;
            Description = description;
            DomainNames = domainNames;
            DoubleEncrypt = doubleEncrypt;
            Enabled = enabled;
            HealthCheckType = healthCheckType;
            HealthReporting = healthReporting;
            Id = id;
            IpAnchored = ipAnchored;
            IsCnameEnabled = isCnameEnabled;
            IsIncompleteDrConfig = isIncompleteDrConfig;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            ModifiedTime = modifiedTime;
            Modifiedby = modifiedby;
            Name = name;
            PassiveHealthEnabled = passiveHealthEnabled;
            SegmentGroupId = segmentGroupId;
            SegmentGroupName = segmentGroupName;
            SelectConnectorCloseToApp = selectConnectorCloseToApp;
            ServerGroups = serverGroups;
            TcpPortRange = tcpPortRange;
            TcpPortRanges = tcpPortRanges;
            UdpPortRange = udpPortRange;
            UdpPortRanges = udpPortRanges;
            UseInDrMode = useInDrMode;
        }
    }
}
