// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credentials)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
    /// 
    /// The **zpa_pra_credential_controller** resource creates a privileged remote access credential in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Creates Credential of Type "USERNAME_PASSWORD"
    ///     var @this = new Zpa.PRACredential("this", new()
    ///     {
    ///         CredentialType = "USERNAME_PASSWORD",
    ///         Description = "Created with Terraform",
    ///         Password = "",
    ///         UserDomain = "acme.com",
    ///         Username = "jdoe",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ######### PASSWORDS OR RELATED CREDENTIALS ATTRIBUTES IN THIS FILE #########\
    /// ######### ARE FOR EXAMPLE ONLY AND NOT USED IN PRODUCTION SYSTEMS ##########
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Creates Credential of Type "SSH_KEY"
    ///     var @this = new Zpa.PRACredential("this", new()
    ///     {
    ///         CredentialType = "SSH_KEY",
    ///         Description = "Created with Terraform",
    ///         PrivateKey = @"-----BEGIN PRIVATE KEY-----
    /// MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDEjc8pPoobS0l6
    /// -----END PRIVATE KEY-----
    /// 
    /// ",
    ///         UserDomain = "acme.com",
    ///         Username = "jdoe",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **pra_credential_controller** can be imported by using `&lt;CREDENTIAL ID&gt;` or `&lt;CREDENTIAL NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/pRACredential:PRACredential this &lt;credential_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/pRACredential:PRACredential this &lt;credential_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/pRACredential:PRACredential")]
    public partial class PRACredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Output("credentialType")]
        public Output<string?> CredentialType { get; private set; } = null!;

        /// <summary>
        /// The description of the privileged credential
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Output("microtenantId")]
        public Output<string> MicrotenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password that is used to protect the SSH private key. This field is optional
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        /// <summary>
        /// The password associated with the username for the login you want to use for the privileged credential
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The SSH private key associated with the username for the login you want to use for the privileged credential
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        /// console that is connected to an Active Directory Domain
        /// </summary>
        [Output("userDomain")]
        public Output<string?> UserDomain { get; private set; } = null!;

        /// <summary>
        /// The username for the login you want to use for the privileged credential
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a PRACredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PRACredential(string name, PRACredentialArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:index/pRACredential:PRACredential", name, args ?? new PRACredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PRACredential(string name, Input<string> id, PRACredentialState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/pRACredential:PRACredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "zpa:index/praCredentialController:PraCredentialController" },
                },
                AdditionalSecretOutputs =
                {
                    "passphrase",
                    "password",
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PRACredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PRACredential Get(string name, Input<string> id, PRACredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new PRACredential(name, id, state, options);
        }
    }

    public sealed class PRACredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        /// <summary>
        /// The description of the privileged credential
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// The password that is used to protect the SSH private key. This field is optional
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password associated with the username for the login you want to use for the privileged credential
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The SSH private key associated with the username for the login you want to use for the privileged credential
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        /// console that is connected to an Active Directory Domain
        /// </summary>
        [Input("userDomain")]
        public Input<string>? UserDomain { get; set; }

        /// <summary>
        /// The username for the login you want to use for the privileged credential
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PRACredentialArgs()
        {
        }
        public static new PRACredentialArgs Empty => new PRACredentialArgs();
    }

    public sealed class PRACredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        /// <summary>
        /// The description of the privileged credential
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// The password that is used to protect the SSH private key. This field is optional
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password associated with the username for the login you want to use for the privileged credential
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The SSH private key associated with the username for the login you want to use for the privileged credential
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        /// console that is connected to an Active Directory Domain
        /// </summary>
        [Input("userDomain")]
        public Input<string>? UserDomain { get; set; }

        /// <summary>
        /// The username for the login you want to use for the privileged credential
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PRACredentialState()
        {
        }
        public static new PRACredentialState Empty => new PRACredentialState();
    }
}
