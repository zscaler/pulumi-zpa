// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
    /// 
    /// The **zpa_service_edge_group** resource creates a service edge group in the Zscaler Private Access cloud. This resource can then be referenced in a service edge connector.
    /// 
    /// ## Example Usage
    /// 
    /// ### Using Version Profile Name
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ZPA Service Edge Group resource - Trusted Network
    ///     var serviceEdgeGroupSjc = new Zpa.ServiceEdgeGroup("serviceEdgeGroupSjc", new()
    ///     {
    ///         Description = "Service Edge Group in San Jose",
    ///         Enabled = true,
    ///         IsPublic = true,
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         Latitude = "37.3382082",
    ///         Longitude = "-121.8863286",
    ///         Location = "San Jose, CA, USA",
    ///         VersionProfileName = "New Release",
    ///         TrustedNetworks = new[]
    ///         {
    ///             new Zpa.Inputs.ServiceEdgeGroupTrustedNetworkArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     data.Zpa_trusted_network.Example.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ZPA Service Edge Group resource - No Trusted Network
    ///     var serviceEdgeGroupNyc = new Zpa.ServiceEdgeGroup("serviceEdgeGroupNyc", new()
    ///     {
    ///         Description = "Service Edge Group in New York",
    ///         Enabled = true,
    ///         IsPublic = true,
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         Latitude = "40.7128",
    ///         Longitude = "-73.935242",
    ///         Location = "New York, NY, USA",
    ///         VersionProfileId = data.Zpa_customer_version_profile.This.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Using Version Profile ID
    /// 
    /// data "zpa.getCustomerVersionProfile" "this" {
    ///   name = "New Release"
    /// }
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ZPA Service Edge Group resource - Trusted Network
    ///     var serviceEdgeGroupSjc = new Zpa.ServiceEdgeGroup("serviceEdgeGroupSjc", new()
    ///     {
    ///         Description = "Service Edge Group in San Jose",
    ///         Enabled = true,
    ///         IsPublic = true,
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         Latitude = "37.3382082",
    ///         Longitude = "-121.8863286",
    ///         Location = "San Jose, CA, USA",
    ///         VersionProfileName = "New Release",
    ///         TrustedNetworks = new[]
    ///         {
    ///             new Zpa.Inputs.ServiceEdgeGroupTrustedNetworkArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     data.Zpa_trusted_network.Example.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = zscaler.PulumiPackage.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ZPA Service Edge Group resource - No Trusted Network
    ///     var serviceEdgeGroupNyc = new Zpa.ServiceEdgeGroup("serviceEdgeGroupNyc", new()
    ///     {
    ///         Description = "Service Edge Group in New York",
    ///         Enabled = true,
    ///         IsPublic = true,
    ///         Latitude = "40.7128",
    ///         Location = "New York, NY, USA",
    ///         Longitude = "-73.935242",
    ///         UpgradeDay = "SUNDAY",
    ///         UpgradeTimeInSecs = "66600",
    ///         VersionProfileName = "New Release",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// Service Edge Group can be imported; use `&lt;SERVER EDGE GROUP ID&gt;` or `&lt;SERVER EDGE GROUP NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/serviceEdgeGroup:ServiceEdgeGroup example &lt;service_edge_group_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/serviceEdgeGroup:ServiceEdgeGroup example &lt;service_edge_group_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/serviceEdgeGroup:ServiceEdgeGroup")]
    public partial class ServiceEdgeGroup : global::Pulumi.CustomResource
    {
        [Output("cityCountry")]
        public Output<string> CityCountry { get; private set; } = null!;

        [Output("countryCode")]
        public Output<string> CountryCode { get; private set; } = null!;

        /// <summary>
        /// Description of the Service Edge Group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this Service Edge Group is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// If enabled, allows ZPA Private Service Edge Groups within the specified distance to be prioritized over a closer ZPA
        /// Public Service Edge.
        /// </summary>
        [Output("graceDistanceEnabled")]
        public Output<bool> GraceDistanceEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates the maximum distance in miles or kilometers to ZPA Private Service Edge groups that would override a ZPA
        /// Public Service Edge
        /// </summary>
        [Output("graceDistanceValue")]
        public Output<string> GraceDistanceValue { get; private set; } = null!;

        /// <summary>
        /// Indicates the grace distance unit of measure in miles or kilometers. This value is only required if grace_distance_value
        /// is set to true
        /// </summary>
        [Output("graceDistanceValueUnit")]
        public Output<string> GraceDistanceValueUnit { get; private set; } = null!;

        /// <summary>
        /// Enable or disable public access for the Service Edge Group.
        /// </summary>
        [Output("isPublic")]
        public Output<bool?> IsPublic { get; private set; } = null!;

        /// <summary>
        /// Latitude for the Service Edge Group.
        /// </summary>
        [Output("latitude")]
        public Output<string> Latitude { get; private set; } = null!;

        /// <summary>
        /// Location for the Service Edge Group.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Longitude for the Service Edge Group.
        /// </summary>
        [Output("longitude")]
        public Output<string> Longitude { get; private set; } = null!;

        [Output("microtenantId")]
        public Output<string> MicrotenantId { get; private set; } = null!;

        /// <summary>
        /// Name of the Service Edge Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the default version profile of the App Connector Group is applied or overridden.
        /// </summary>
        [Output("overrideVersionProfile")]
        public Output<bool?> OverrideVersionProfile { get; private set; } = null!;

        /// <summary>
        /// WARNING: Service edge membership is managed externally. Specifying this field will enforce exact membership
        /// matching.This field will be deprecated in future versions
        /// </summary>
        [Output("serviceEdges")]
        public Output<Outputs.ServiceEdgeGroupServiceEdges> ServiceEdges { get; private set; } = null!;

        /// <summary>
        /// List of trusted network IDs.
        /// </summary>
        [Output("trustedNetworks")]
        public Output<ImmutableArray<Outputs.ServiceEdgeGroupTrustedNetwork>> TrustedNetworks { get; private set; } = null!;

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified day.
        /// </summary>
        [Output("upgradeDay")]
        public Output<string?> UpgradeDay { get; private set; } = null!;

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified time.
        /// </summary>
        [Output("upgradeTimeInSecs")]
        public Output<string?> UpgradeTimeInSecs { get; private set; } = null!;

        [Output("useInDrMode")]
        public Output<bool> UseInDrMode { get; private set; } = null!;

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Output("versionProfileId")]
        public Output<string> VersionProfileId { get; private set; } = null!;

        /// <summary>
        /// Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        /// overrideVersionProfile is set to true
        /// </summary>
        [Output("versionProfileName")]
        public Output<string> VersionProfileName { get; private set; } = null!;

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Output("versionProfileVisibilityScope")]
        public Output<string> VersionProfileVisibilityScope { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceEdgeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceEdgeGroup(string name, ServiceEdgeGroupArgs args, CustomResourceOptions? options = null)
            : base("zpa:index/serviceEdgeGroup:ServiceEdgeGroup", name, args ?? new ServiceEdgeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceEdgeGroup(string name, Input<string> id, ServiceEdgeGroupState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/serviceEdgeGroup:ServiceEdgeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceEdgeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceEdgeGroup Get(string name, Input<string> id, ServiceEdgeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceEdgeGroup(name, id, state, options);
        }
    }

    public sealed class ServiceEdgeGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("cityCountry")]
        public Input<string>? CityCountry { get; set; }

        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Description of the Service Edge Group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this Service Edge Group is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If enabled, allows ZPA Private Service Edge Groups within the specified distance to be prioritized over a closer ZPA
        /// Public Service Edge.
        /// </summary>
        [Input("graceDistanceEnabled")]
        public Input<bool>? GraceDistanceEnabled { get; set; }

        /// <summary>
        /// Indicates the maximum distance in miles or kilometers to ZPA Private Service Edge groups that would override a ZPA
        /// Public Service Edge
        /// </summary>
        [Input("graceDistanceValue")]
        public Input<string>? GraceDistanceValue { get; set; }

        /// <summary>
        /// Indicates the grace distance unit of measure in miles or kilometers. This value is only required if grace_distance_value
        /// is set to true
        /// </summary>
        [Input("graceDistanceValueUnit")]
        public Input<string>? GraceDistanceValueUnit { get; set; }

        /// <summary>
        /// Enable or disable public access for the Service Edge Group.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// Latitude for the Service Edge Group.
        /// </summary>
        [Input("latitude", required: true)]
        public Input<string> Latitude { get; set; } = null!;

        /// <summary>
        /// Location for the Service Edge Group.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Longitude for the Service Edge Group.
        /// </summary>
        [Input("longitude", required: true)]
        public Input<string> Longitude { get; set; } = null!;

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// Name of the Service Edge Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the default version profile of the App Connector Group is applied or overridden.
        /// </summary>
        [Input("overrideVersionProfile")]
        public Input<bool>? OverrideVersionProfile { get; set; }

        /// <summary>
        /// WARNING: Service edge membership is managed externally. Specifying this field will enforce exact membership
        /// matching.This field will be deprecated in future versions
        /// </summary>
        [Input("serviceEdges")]
        public Input<Inputs.ServiceEdgeGroupServiceEdgesArgs>? ServiceEdges { get; set; }

        [Input("trustedNetworks")]
        private InputList<Inputs.ServiceEdgeGroupTrustedNetworkArgs>? _trustedNetworks;

        /// <summary>
        /// List of trusted network IDs.
        /// </summary>
        public InputList<Inputs.ServiceEdgeGroupTrustedNetworkArgs> TrustedNetworks
        {
            get => _trustedNetworks ?? (_trustedNetworks = new InputList<Inputs.ServiceEdgeGroupTrustedNetworkArgs>());
            set => _trustedNetworks = value;
        }

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified day.
        /// </summary>
        [Input("upgradeDay")]
        public Input<string>? UpgradeDay { get; set; }

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified time.
        /// </summary>
        [Input("upgradeTimeInSecs")]
        public Input<string>? UpgradeTimeInSecs { get; set; }

        [Input("useInDrMode")]
        public Input<bool>? UseInDrMode { get; set; }

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Input("versionProfileId")]
        public Input<string>? VersionProfileId { get; set; }

        /// <summary>
        /// Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        /// overrideVersionProfile is set to true
        /// </summary>
        [Input("versionProfileName")]
        public Input<string>? VersionProfileName { get; set; }

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Input("versionProfileVisibilityScope")]
        public Input<string>? VersionProfileVisibilityScope { get; set; }

        public ServiceEdgeGroupArgs()
        {
        }
        public static new ServiceEdgeGroupArgs Empty => new ServiceEdgeGroupArgs();
    }

    public sealed class ServiceEdgeGroupState : global::Pulumi.ResourceArgs
    {
        [Input("cityCountry")]
        public Input<string>? CityCountry { get; set; }

        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Description of the Service Edge Group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this Service Edge Group is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If enabled, allows ZPA Private Service Edge Groups within the specified distance to be prioritized over a closer ZPA
        /// Public Service Edge.
        /// </summary>
        [Input("graceDistanceEnabled")]
        public Input<bool>? GraceDistanceEnabled { get; set; }

        /// <summary>
        /// Indicates the maximum distance in miles or kilometers to ZPA Private Service Edge groups that would override a ZPA
        /// Public Service Edge
        /// </summary>
        [Input("graceDistanceValue")]
        public Input<string>? GraceDistanceValue { get; set; }

        /// <summary>
        /// Indicates the grace distance unit of measure in miles or kilometers. This value is only required if grace_distance_value
        /// is set to true
        /// </summary>
        [Input("graceDistanceValueUnit")]
        public Input<string>? GraceDistanceValueUnit { get; set; }

        /// <summary>
        /// Enable or disable public access for the Service Edge Group.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// Latitude for the Service Edge Group.
        /// </summary>
        [Input("latitude")]
        public Input<string>? Latitude { get; set; }

        /// <summary>
        /// Location for the Service Edge Group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Longitude for the Service Edge Group.
        /// </summary>
        [Input("longitude")]
        public Input<string>? Longitude { get; set; }

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// Name of the Service Edge Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the default version profile of the App Connector Group is applied or overridden.
        /// </summary>
        [Input("overrideVersionProfile")]
        public Input<bool>? OverrideVersionProfile { get; set; }

        /// <summary>
        /// WARNING: Service edge membership is managed externally. Specifying this field will enforce exact membership
        /// matching.This field will be deprecated in future versions
        /// </summary>
        [Input("serviceEdges")]
        public Input<Inputs.ServiceEdgeGroupServiceEdgesGetArgs>? ServiceEdges { get; set; }

        [Input("trustedNetworks")]
        private InputList<Inputs.ServiceEdgeGroupTrustedNetworkGetArgs>? _trustedNetworks;

        /// <summary>
        /// List of trusted network IDs.
        /// </summary>
        public InputList<Inputs.ServiceEdgeGroupTrustedNetworkGetArgs> TrustedNetworks
        {
            get => _trustedNetworks ?? (_trustedNetworks = new InputList<Inputs.ServiceEdgeGroupTrustedNetworkGetArgs>());
            set => _trustedNetworks = value;
        }

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified day.
        /// </summary>
        [Input("upgradeDay")]
        public Input<string>? UpgradeDay { get; set; }

        /// <summary>
        /// Service Edges in this group will attempt to update to a newer version of the software during this specified time.
        /// </summary>
        [Input("upgradeTimeInSecs")]
        public Input<string>? UpgradeTimeInSecs { get; set; }

        [Input("useInDrMode")]
        public Input<bool>? UseInDrMode { get; set; }

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Input("versionProfileId")]
        public Input<string>? VersionProfileId { get; set; }

        /// <summary>
        /// Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        /// overrideVersionProfile is set to true
        /// </summary>
        [Input("versionProfileName")]
        public Input<string>? VersionProfileName { get; set; }

        /// <summary>
        /// ID of the version profile.
        /// </summary>
        [Input("versionProfileVisibilityScope")]
        public Input<string>? VersionProfileVisibilityScope { get; set; }

        public ServiceEdgeGroupState()
        {
        }
        public static new ServiceEdgeGroupState Empty => new ServiceEdgeGroupState();
    }
}
