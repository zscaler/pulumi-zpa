// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetServiceEdgeGroup
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
        /// 
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by name
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by ID
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceEdgeGroupResult> InvokeAsync(GetServiceEdgeGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceEdgeGroupResult>("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", args ?? new GetServiceEdgeGroupArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
        /// 
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by name
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by ID
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceEdgeGroupResult> Invoke(GetServiceEdgeGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceEdgeGroupResult>("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", args ?? new GetServiceEdgeGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
        /// 
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by name
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // ZPA Service Edge Group Data Source by ID
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceEdgeGroupResult> Invoke(GetServiceEdgeGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceEdgeGroupResult>("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", args ?? new GetServiceEdgeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceEdgeGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetServiceEdgeGroupArgs()
        {
        }
        public static new GetServiceEdgeGroupArgs Empty => new GetServiceEdgeGroupArgs();
    }

    public sealed class GetServiceEdgeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServiceEdgeGroupInvokeArgs()
        {
        }
        public static new GetServiceEdgeGroupInvokeArgs Empty => new GetServiceEdgeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceEdgeGroupResult
    {
        public readonly string AltCloud;
        public readonly string CityCountry;
        public readonly string CountryCode;
        public readonly string CreationTime;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly string GeoLocationId;
        public readonly bool GraceDistanceEnabled;
        public readonly string GraceDistanceValue;
        public readonly string GraceDistanceValueUnit;
        public readonly string Id;
        public readonly string IsPublic;
        public readonly string Latitude;
        public readonly string Location;
        public readonly string Longitude;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        public readonly string Name;
        public readonly bool OverrideVersionProfile;
        public readonly ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgeResult> ServiceEdges;
        public readonly string SiteId;
        public readonly string SiteName;
        public readonly ImmutableArray<Outputs.GetServiceEdgeGroupTrustedNetworkResult> TrustedNetworks;
        public readonly string UpgradeDay;
        public readonly string UpgradeTimeInSecs;
        public readonly bool UseInDrMode;
        public readonly string VersionProfileId;
        public readonly string VersionProfileName;
        public readonly string VersionProfileVisibilityScope;

        [OutputConstructor]
        private GetServiceEdgeGroupResult(
            string altCloud,

            string cityCountry,

            string countryCode,

            string creationTime,

            string description,

            bool enabled,

            string geoLocationId,

            bool graceDistanceEnabled,

            string graceDistanceValue,

            string graceDistanceValueUnit,

            string id,

            string isPublic,

            string latitude,

            string location,

            string longitude,

            string modifiedBy,

            string modifiedTime,

            string name,

            bool overrideVersionProfile,

            ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgeResult> serviceEdges,

            string siteId,

            string siteName,

            ImmutableArray<Outputs.GetServiceEdgeGroupTrustedNetworkResult> trustedNetworks,

            string upgradeDay,

            string upgradeTimeInSecs,

            bool useInDrMode,

            string versionProfileId,

            string versionProfileName,

            string versionProfileVisibilityScope)
        {
            AltCloud = altCloud;
            CityCountry = cityCountry;
            CountryCode = countryCode;
            CreationTime = creationTime;
            Description = description;
            Enabled = enabled;
            GeoLocationId = geoLocationId;
            GraceDistanceEnabled = graceDistanceEnabled;
            GraceDistanceValue = graceDistanceValue;
            GraceDistanceValueUnit = graceDistanceValueUnit;
            Id = id;
            IsPublic = isPublic;
            Latitude = latitude;
            Location = location;
            Longitude = longitude;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            OverrideVersionProfile = overrideVersionProfile;
            ServiceEdges = serviceEdges;
            SiteId = siteId;
            SiteName = siteName;
            TrustedNetworks = trustedNetworks;
            UpgradeDay = upgradeDay;
            UpgradeTimeInSecs = upgradeTimeInSecs;
            UseInDrMode = useInDrMode;
            VersionProfileId = versionProfileId;
            VersionProfileName = versionProfileName;
            VersionProfileVisibilityScope = versionProfileVisibilityScope;
        }
    }
}
