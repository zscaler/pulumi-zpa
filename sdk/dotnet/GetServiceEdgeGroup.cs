// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetServiceEdgeGroup
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
        /// 
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceEdgeGroupResult> InvokeAsync(GetServiceEdgeGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceEdgeGroupResult>("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", args ?? new GetServiceEdgeGroupArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edge-groups)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-zpa-private-service-edge-groups-using-api)
        /// 
        /// Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:
        /// 
        /// * Create a server group
        /// * Provisioning Key
        /// * Access policy rule
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Name = "DataCenter",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Zpa.GetServiceEdgeGroup.Invoke(new()
        ///     {
        ///         Id = "123456789",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceEdgeGroupResult> Invoke(GetServiceEdgeGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceEdgeGroupResult>("zpa:index/getServiceEdgeGroup:getServiceEdgeGroup", args ?? new GetServiceEdgeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceEdgeGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetServiceEdgeGroupArgs()
        {
        }
        public static new GetServiceEdgeGroupArgs Empty => new GetServiceEdgeGroupArgs();
    }

    public sealed class GetServiceEdgeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServiceEdgeGroupInvokeArgs()
        {
        }
        public static new GetServiceEdgeGroupInvokeArgs Empty => new GetServiceEdgeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceEdgeGroupResult
    {
        public readonly string CityCountry;
        public readonly string CountryCode;
        public readonly string CreationTime;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly string GeoLocationId;
        public readonly bool GraceDistanceEnabled;
        public readonly string GraceDistanceValue;
        public readonly string GraceDistanceValueUnit;
        public readonly string Id;
        public readonly string IsPublic;
        public readonly string Latitude;
        public readonly string Location;
        public readonly string Longitude;
        public readonly string ModifiedTime;
        public readonly string Modifiedby;
        public readonly string Name;
        public readonly bool OverrideVersionProfile;
        public readonly ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgeResult> ServiceEdges;
        public readonly ImmutableArray<Outputs.GetServiceEdgeGroupTrustedNetworkResult> TrustedNetworks;
        public readonly string UpgradeDay;
        public readonly string UpgradeTimeInSecs;
        public readonly string VersionProfileId;
        public readonly string VersionProfileName;
        public readonly string VersionProfileVisibilityScope;

        [OutputConstructor]
        private GetServiceEdgeGroupResult(
            string cityCountry,

            string countryCode,

            string creationTime,

            string description,

            bool enabled,

            string geoLocationId,

            bool graceDistanceEnabled,

            string graceDistanceValue,

            string graceDistanceValueUnit,

            string id,

            string isPublic,

            string latitude,

            string location,

            string longitude,

            string modifiedTime,

            string modifiedby,

            string name,

            bool overrideVersionProfile,

            ImmutableArray<Outputs.GetServiceEdgeGroupServiceEdgeResult> serviceEdges,

            ImmutableArray<Outputs.GetServiceEdgeGroupTrustedNetworkResult> trustedNetworks,

            string upgradeDay,

            string upgradeTimeInSecs,

            string versionProfileId,

            string versionProfileName,

            string versionProfileVisibilityScope)
        {
            CityCountry = cityCountry;
            CountryCode = countryCode;
            CreationTime = creationTime;
            Description = description;
            Enabled = enabled;
            GeoLocationId = geoLocationId;
            GraceDistanceEnabled = graceDistanceEnabled;
            GraceDistanceValue = graceDistanceValue;
            GraceDistanceValueUnit = graceDistanceValueUnit;
            Id = id;
            IsPublic = isPublic;
            Latitude = latitude;
            Location = location;
            Longitude = longitude;
            ModifiedTime = modifiedTime;
            Modifiedby = modifiedby;
            Name = name;
            OverrideVersionProfile = overrideVersionProfile;
            ServiceEdges = serviceEdges;
            TrustedNetworks = trustedNetworks;
            UpgradeDay = upgradeDay;
            UpgradeTimeInSecs = upgradeTimeInSecs;
            VersionProfileId = versionProfileId;
            VersionProfileName = versionProfileName;
            VersionProfileVisibilityScope = versionProfileVisibilityScope;
        }
    }
}
