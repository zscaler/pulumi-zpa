// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testCert = Zpa.GetBaCertificate.Invoke(new()
    ///     {
    ///         Name = "sales.acme.com",
    ///     });
    /// 
    ///     // ZPA Segment Group resource
    ///     var exampleSegmentGroup = new Zpa.SegmentGroup("exampleSegmentGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var exampleAppConnectorGroup = Zpa.GetAppConnectorGroup.Invoke(new()
    ///     {
    ///         Name = "AWS-Connector",
    ///     });
    /// 
    ///     // ZPA Server Group resource
    ///     var exampleServerGroup = new Zpa.ServerGroup("exampleServerGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         DynamicDiscovery = true,
    ///         AppConnectorGroups = new[]
    ///         {
    ///             new Zpa.Inputs.ServerGroupAppConnectorGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     exampleAppConnectorGroup.Apply(getAppConnectorGroupResult =&gt; getAppConnectorGroupResult.Id),
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create Browser Access Application
    ///     var browserAccessApps = new Zpa.ApplicationSegmentBrowserAccess("browserAccessApps", new()
    ///     {
    ///         Description = "Browser Access Apps",
    ///         Enabled = true,
    ///         HealthReporting = "ON_ACCESS",
    ///         BypassType = "NEVER",
    ///         TcpPortRanges = new[]
    ///         {
    ///             "80",
    ///             "80",
    ///         },
    ///         DomainNames = new[]
    ///         {
    ///             "sales.acme.com",
    ///         },
    ///         SegmentGroupId = exampleSegmentGroup.Id,
    ///         ClientlessApps = new[]
    ///         {
    ///             new Zpa.Inputs.ApplicationSegmentBrowserAccessClientlessAppArgs
    ///             {
    ///                 Name = "sales.acme.com",
    ///                 ApplicationProtocol = "HTTP",
    ///                 ApplicationPort = "80",
    ///                 CertificateId = testCert.Apply(getBaCertificateResult =&gt; getBaCertificateResult.Id),
    ///                 TrustUntrustedCert = true,
    ///                 Enabled = true,
    ///                 Domain = "sales.acme.com",
    ///             },
    ///         },
    ///         ServerGroups = new[]
    ///         {
    ///             new Zpa.Inputs.ApplicationSegmentBrowserAccessServerGroupArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     exampleServerGroup.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zpa_application_segment_browser_access** Application Segment Browser Access can be imported by using &lt;`BROWSER ACCESS ID`&gt; or `&lt;&lt;BROWSER ACCESS NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example &lt;browser_access_id&gt;.
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example &lt;browser_access_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess")]
    public partial class ApplicationSegmentBrowserAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        /// The value NEVER indicates the use of the client forwarding policy.
        /// </summary>
        [Output("bypassType")]
        public Output<string?> BypassType { get; private set; } = null!;

        [Output("clientlessApps")]
        public Output<ImmutableArray<Outputs.ApplicationSegmentBrowserAccessClientlessApp>> ClientlessApps { get; private set; } = null!;

        [Output("configSpace")]
        public Output<string?> ConfigSpace { get; private set; } = null!;

        /// <summary>
        /// Description of the application.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of domains and IPs.
        /// </summary>
        [Output("domainNames")]
        public Output<ImmutableArray<string>> DomainNames { get; private set; } = null!;

        /// <summary>
        /// Whether Double Encryption is enabled or disabled for the app.
        /// </summary>
        [Output("doubleEncrypt")]
        public Output<bool?> DoubleEncrypt { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("healthCheckType")]
        public Output<string?> HealthCheckType { get; private set; } = null!;

        /// <summary>
        /// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        /// </summary>
        [Output("healthReporting")]
        public Output<string?> HealthReporting { get; private set; } = null!;

        [Output("icmpAccessType")]
        public Output<string?> IcmpAccessType { get; private set; } = null!;

        [Output("ipAnchored")]
        public Output<bool?> IpAnchored { get; private set; } = null!;

        /// <summary>
        /// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        /// connectors.
        /// </summary>
        [Output("isCnameEnabled")]
        public Output<bool?> IsCnameEnabled { get; private set; } = null!;

        [Output("isIncompleteDrConfig")]
        public Output<bool?> IsIncompleteDrConfig { get; private set; } = null!;

        [Output("matchStyle")]
        public Output<string> MatchStyle { get; private set; } = null!;

        /// <summary>
        /// Name of the application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("passiveHealthEnabled")]
        public Output<bool> PassiveHealthEnabled { get; private set; } = null!;

        [Output("segmentGroupId")]
        public Output<string> SegmentGroupId { get; private set; } = null!;

        [Output("segmentGroupName")]
        public Output<string> SegmentGroupName { get; private set; } = null!;

        [Output("selectConnectorCloseToApp")]
        public Output<bool?> SelectConnectorCloseToApp { get; private set; } = null!;

        /// <summary>
        /// List of the server group IDs.
        /// </summary>
        [Output("serverGroups")]
        public Output<ImmutableArray<Outputs.ApplicationSegmentBrowserAccessServerGroup>> ServerGroups { get; private set; } = null!;

        [Output("tcpKeepAlive")]
        public Output<string> TcpKeepAlive { get; private set; } = null!;

        /// <summary>
        /// tcp port range
        /// </summary>
        [Output("tcpPortRange")]
        public Output<ImmutableArray<Outputs.ApplicationSegmentBrowserAccessTcpPortRange>> TcpPortRange { get; private set; } = null!;

        /// <summary>
        /// TCP port ranges used to access the app.
        /// </summary>
        [Output("tcpPortRanges")]
        public Output<ImmutableArray<string>> TcpPortRanges { get; private set; } = null!;

        /// <summary>
        /// udp port range
        /// </summary>
        [Output("udpPortRange")]
        public Output<ImmutableArray<Outputs.ApplicationSegmentBrowserAccessUdpPortRange>> UdpPortRange { get; private set; } = null!;

        /// <summary>
        /// UDP port ranges used to access the app.
        /// </summary>
        [Output("udpPortRanges")]
        public Output<ImmutableArray<string>> UdpPortRanges { get; private set; } = null!;

        [Output("useInDrMode")]
        public Output<bool?> UseInDrMode { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationSegmentBrowserAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationSegmentBrowserAccess(string name, ApplicationSegmentBrowserAccessArgs args, CustomResourceOptions? options = null)
            : base("zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess", name, args ?? new ApplicationSegmentBrowserAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationSegmentBrowserAccess(string name, Input<string> id, ApplicationSegmentBrowserAccessState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationSegmentBrowserAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationSegmentBrowserAccess Get(string name, Input<string> id, ApplicationSegmentBrowserAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationSegmentBrowserAccess(name, id, state, options);
        }
    }

    public sealed class ApplicationSegmentBrowserAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        /// The value NEVER indicates the use of the client forwarding policy.
        /// </summary>
        [Input("bypassType")]
        public Input<string>? BypassType { get; set; }

        [Input("clientlessApps", required: true)]
        private InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppArgs>? _clientlessApps;
        public InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppArgs> ClientlessApps
        {
            get => _clientlessApps ?? (_clientlessApps = new InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppArgs>());
            set => _clientlessApps = value;
        }

        [Input("configSpace")]
        public Input<string>? ConfigSpace { get; set; }

        /// <summary>
        /// Description of the application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainNames", required: true)]
        private InputList<string>? _domainNames;

        /// <summary>
        /// List of domains and IPs.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// Whether Double Encryption is enabled or disabled for the app.
        /// </summary>
        [Input("doubleEncrypt")]
        public Input<bool>? DoubleEncrypt { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        /// </summary>
        [Input("healthReporting")]
        public Input<string>? HealthReporting { get; set; }

        [Input("icmpAccessType")]
        public Input<string>? IcmpAccessType { get; set; }

        [Input("ipAnchored")]
        public Input<bool>? IpAnchored { get; set; }

        /// <summary>
        /// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        /// connectors.
        /// </summary>
        [Input("isCnameEnabled")]
        public Input<bool>? IsCnameEnabled { get; set; }

        [Input("isIncompleteDrConfig")]
        public Input<bool>? IsIncompleteDrConfig { get; set; }

        [Input("matchStyle")]
        public Input<string>? MatchStyle { get; set; }

        /// <summary>
        /// Name of the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("passiveHealthEnabled")]
        public Input<bool>? PassiveHealthEnabled { get; set; }

        [Input("segmentGroupId", required: true)]
        public Input<string> SegmentGroupId { get; set; } = null!;

        [Input("segmentGroupName")]
        public Input<string>? SegmentGroupName { get; set; }

        [Input("selectConnectorCloseToApp")]
        public Input<bool>? SelectConnectorCloseToApp { get; set; }

        [Input("serverGroups")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupArgs>? _serverGroups;

        /// <summary>
        /// List of the server group IDs.
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupArgs> ServerGroups
        {
            get => _serverGroups ?? (_serverGroups = new InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupArgs>());
            set => _serverGroups = value;
        }

        [Input("tcpKeepAlive")]
        public Input<string>? TcpKeepAlive { get; set; }

        [Input("tcpPortRange")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeArgs>? _tcpPortRange;

        /// <summary>
        /// tcp port range
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeArgs>());
            set => _tcpPortRange = value;
        }

        [Input("tcpPortRanges")]
        private InputList<string>? _tcpPortRanges;

        /// <summary>
        /// TCP port ranges used to access the app.
        /// </summary>
        public InputList<string> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new InputList<string>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRange")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeArgs>? _udpPortRange;

        /// <summary>
        /// udp port range
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeArgs>());
            set => _udpPortRange = value;
        }

        [Input("udpPortRanges")]
        private InputList<string>? _udpPortRanges;

        /// <summary>
        /// UDP port ranges used to access the app.
        /// </summary>
        public InputList<string> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new InputList<string>());
            set => _udpPortRanges = value;
        }

        [Input("useInDrMode")]
        public Input<bool>? UseInDrMode { get; set; }

        public ApplicationSegmentBrowserAccessArgs()
        {
        }
        public static new ApplicationSegmentBrowserAccessArgs Empty => new ApplicationSegmentBrowserAccessArgs();
    }

    public sealed class ApplicationSegmentBrowserAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        /// The value NEVER indicates the use of the client forwarding policy.
        /// </summary>
        [Input("bypassType")]
        public Input<string>? BypassType { get; set; }

        [Input("clientlessApps")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppGetArgs>? _clientlessApps;
        public InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppGetArgs> ClientlessApps
        {
            get => _clientlessApps ?? (_clientlessApps = new InputList<Inputs.ApplicationSegmentBrowserAccessClientlessAppGetArgs>());
            set => _clientlessApps = value;
        }

        [Input("configSpace")]
        public Input<string>? ConfigSpace { get; set; }

        /// <summary>
        /// Description of the application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainNames")]
        private InputList<string>? _domainNames;

        /// <summary>
        /// List of domains and IPs.
        /// </summary>
        public InputList<string> DomainNames
        {
            get => _domainNames ?? (_domainNames = new InputList<string>());
            set => _domainNames = value;
        }

        /// <summary>
        /// Whether Double Encryption is enabled or disabled for the app.
        /// </summary>
        [Input("doubleEncrypt")]
        public Input<bool>? DoubleEncrypt { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        /// </summary>
        [Input("healthReporting")]
        public Input<string>? HealthReporting { get; set; }

        [Input("icmpAccessType")]
        public Input<string>? IcmpAccessType { get; set; }

        [Input("ipAnchored")]
        public Input<bool>? IpAnchored { get; set; }

        /// <summary>
        /// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        /// connectors.
        /// </summary>
        [Input("isCnameEnabled")]
        public Input<bool>? IsCnameEnabled { get; set; }

        [Input("isIncompleteDrConfig")]
        public Input<bool>? IsIncompleteDrConfig { get; set; }

        [Input("matchStyle")]
        public Input<string>? MatchStyle { get; set; }

        /// <summary>
        /// Name of the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("passiveHealthEnabled")]
        public Input<bool>? PassiveHealthEnabled { get; set; }

        [Input("segmentGroupId")]
        public Input<string>? SegmentGroupId { get; set; }

        [Input("segmentGroupName")]
        public Input<string>? SegmentGroupName { get; set; }

        [Input("selectConnectorCloseToApp")]
        public Input<bool>? SelectConnectorCloseToApp { get; set; }

        [Input("serverGroups")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupGetArgs>? _serverGroups;

        /// <summary>
        /// List of the server group IDs.
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupGetArgs> ServerGroups
        {
            get => _serverGroups ?? (_serverGroups = new InputList<Inputs.ApplicationSegmentBrowserAccessServerGroupGetArgs>());
            set => _serverGroups = value;
        }

        [Input("tcpKeepAlive")]
        public Input<string>? TcpKeepAlive { get; set; }

        [Input("tcpPortRange")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeGetArgs>? _tcpPortRange;

        /// <summary>
        /// tcp port range
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeGetArgs> TcpPortRange
        {
            get => _tcpPortRange ?? (_tcpPortRange = new InputList<Inputs.ApplicationSegmentBrowserAccessTcpPortRangeGetArgs>());
            set => _tcpPortRange = value;
        }

        [Input("tcpPortRanges")]
        private InputList<string>? _tcpPortRanges;

        /// <summary>
        /// TCP port ranges used to access the app.
        /// </summary>
        public InputList<string> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new InputList<string>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRange")]
        private InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeGetArgs>? _udpPortRange;

        /// <summary>
        /// udp port range
        /// </summary>
        public InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeGetArgs> UdpPortRange
        {
            get => _udpPortRange ?? (_udpPortRange = new InputList<Inputs.ApplicationSegmentBrowserAccessUdpPortRangeGetArgs>());
            set => _udpPortRange = value;
        }

        [Input("udpPortRanges")]
        private InputList<string>? _udpPortRanges;

        /// <summary>
        /// UDP port ranges used to access the app.
        /// </summary>
        public InputList<string> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new InputList<string>());
            set => _udpPortRanges = value;
        }

        [Input("useInDrMode")]
        public Input<bool>? UseInDrMode { get; set; }

        public ApplicationSegmentBrowserAccessState()
        {
        }
        public static new ApplicationSegmentBrowserAccessState Empty => new ApplicationSegmentBrowserAccessState();
    }
}
