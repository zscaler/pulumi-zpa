// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)
    /// 
    /// The **zpa_policy_browser_protection_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.
    /// 
    ///   ⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.
    /// 
    ///   ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``
    /// 
    /// ## Example Usage
    /// 
    /// ### Browser Protection With MONITOR ACTION
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var thisIdPController = Zpa.GetIdPController.Invoke(new()
    ///     {
    ///         Name = "Idp_Name",
    ///     });
    /// 
    ///     var emailUserSso = Zpa.GetSAMLAttribute.Invoke(new()
    ///     {
    ///         Name = "Email_Users",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var groupUser = Zpa.GetSAMLAttribute.Invoke(new()
    ///     {
    ///         Name = "GroupName_Users",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var a000 = Zpa.GetSCIMGroups.Invoke(new()
    ///     {
    ///         Name = "A000",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var b000 = Zpa.GetSCIMGroups.Invoke(new()
    ///     {
    ///         Name = "B000",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     // Create Segment Group
    ///     var thisSegmentGroup = new Zpa.SegmentGroup("thisSegmentGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // Create Policy Access Rule V2
    ///     var thisPolicyBrowserProtectionRule = new Zpa.PolicyBrowserProtectionRule("thisPolicyBrowserProtectionRule", new()
    ///     {
    ///         Description = "Example",
    ///         Action = "MONITOR",
    ///         Conditions = new[]
    ///         {
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "APP_GROUP",
    ///                         Values = new[]
    ///                         {
    ///                             thisSegmentGroup.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "SAML",
    ///                         EntryValues = new[]
    ///                         {
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = "user1@acme.com",
    ///                                 Lhs = emailUserSso.Apply(getSAMLAttributeResult =&gt; getSAMLAttributeResult.Id),
    ///                             },
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = "A000",
    ///                                 Lhs = groupUser.Apply(getSAMLAttributeResult =&gt; getSAMLAttributeResult.Id),
    ///                             },
    ///                         },
    ///                     },
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "SCIM_GROUP",
    ///                         EntryValues = new[]
    ///                         {
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = a000.Apply(getSCIMGroupsResult =&gt; getSCIMGroupsResult.Id),
    ///                                 Lhs = thisIdPController.Apply(getIdPControllerResult =&gt; getIdPControllerResult.Id),
    ///                             },
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = b000.Apply(getSCIMGroupsResult =&gt; getSCIMGroupsResult.Id),
    ///                                 Lhs = thisIdPController.Apply(getIdPControllerResult =&gt; getIdPControllerResult.Id),
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "USER_PORTAL",
    ///                         Values = new[]
    ///                         {
    ///                             "145262059234265326",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "CLIENT_TYPE",
    ///                         Values = new[]
    ///                         {
    ///                             "zpn_client_type_exporter",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Browser Protection With DO_NOT_MONITOR ACTION
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var thisIdPController = Zpa.GetIdPController.Invoke(new()
    ///     {
    ///         Name = "Idp_Name",
    ///     });
    /// 
    ///     var emailUserSso = Zpa.GetSAMLAttribute.Invoke(new()
    ///     {
    ///         Name = "Email_Users",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var groupUser = Zpa.GetSAMLAttribute.Invoke(new()
    ///     {
    ///         Name = "GroupName_Users",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var a000 = Zpa.GetSCIMGroups.Invoke(new()
    ///     {
    ///         Name = "A000",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     var b000 = Zpa.GetSCIMGroups.Invoke(new()
    ///     {
    ///         Name = "B000",
    ///         IdpName = "Idp_Name",
    ///     });
    /// 
    ///     // Create Segment Group
    ///     var thisSegmentGroup = new Zpa.SegmentGroup("thisSegmentGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // Create Policy Access Rule V2
    ///     var thisPolicyBrowserProtectionRule = new Zpa.PolicyBrowserProtectionRule("thisPolicyBrowserProtectionRule", new()
    ///     {
    ///         Description = "Example",
    ///         Action = "DO_NOT_MONITOR",
    ///         Conditions = new[]
    ///         {
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "APP_GROUP",
    ///                         Values = new[]
    ///                         {
    ///                             thisSegmentGroup.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "SAML",
    ///                         EntryValues = new[]
    ///                         {
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = "user1@acme.com",
    ///                                 Lhs = emailUserSso.Apply(getSAMLAttributeResult =&gt; getSAMLAttributeResult.Id),
    ///                             },
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = "A000",
    ///                                 Lhs = groupUser.Apply(getSAMLAttributeResult =&gt; getSAMLAttributeResult.Id),
    ///                             },
    ///                         },
    ///                     },
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "SCIM_GROUP",
    ///                         EntryValues = new[]
    ///                         {
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = a000.Apply(getSCIMGroupsResult =&gt; getSCIMGroupsResult.Id),
    ///                                 Lhs = thisIdPController.Apply(getIdPControllerResult =&gt; getIdPControllerResult.Id),
    ///                             },
    ///                             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandEntryValueArgs
    ///                             {
    ///                                 Rhs = b000.Apply(getSCIMGroupsResult =&gt; getSCIMGroupsResult.Id),
    ///                                 Lhs = thisIdPController.Apply(getIdPControllerResult =&gt; getIdPControllerResult.Id),
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "USER_PORTAL",
    ///                         Values = new[]
    ///                         {
    ///                             "145262059234265326",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Zpa.Inputs.PolicyBrowserProtectionRuleConditionArgs
    ///             {
    ///                 Operator = "OR",
    ///                 Operands = new[]
    ///                 {
    ///                     new Zpa.Inputs.PolicyBrowserProtectionRuleConditionOperandArgs
    ///                     {
    ///                         ObjectType = "CLIENT_TYPE",
    ///                         Values = new[]
    ///                         {
    ///                             "zpn_client_type_exporter",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## LHS and RHS Values
    /// 
    /// | Object Type | LHS| RHS| VALUES
    /// |----------|-----------|----------|----------
    /// | APP  |   |  | ``application_segment_id`` |
    /// | APP_GROUP  |   |  | ``segment_group_id``|
    /// | CLIENT_TYPE  |   |  |  ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |
    /// | EDGE_CONNECTOR_GROUP  |   |  |  ``&lt;edge_connector_id&gt;`` |
    /// | BRANCH_CONNECTOR_GROUP  |   |  |  ``&lt;branch_connector_id&gt;`` |
    /// | LOCATION   |   |  | ``location_id`` |
    /// | MACHINE_GRP   |   |  | ``machine_group_id`` |
    /// | SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |
    /// | SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |
    /// | SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |
    /// | PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``"true"`` / ``"false"`` |
    /// | POSTURE | ``posture_udid``  | ``"true"`` / ``"false"`` |
    /// | TRUSTED_NETWORK | ``network_id``  | ``"true"`` |
    /// | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``"true"`` / ``"false"`` |
    /// | RISK_FACTOR_TYPE | ``ZIA``  | ``"UNKNOWN", "LOW", "MEDIUM", "HIGH", "CRITICAL"`` |
    /// | CHROME_ENTERPRISE | ``managed``  | ``"true" / "false"`` |
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// Policy access rule can be imported by using `&lt;RULE ID&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule example &lt;rule_id&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule")]
    public partial class PolicyBrowserProtectionRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        /// </summary>
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        /// <summary>
        /// This is for proviidng the set of conditions for the policy.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.PolicyBrowserProtectionRuleCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// This is the description of the access policy rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("microtenantId")]
        public Output<string> MicrotenantId { get; private set; } = null!;

        /// <summary>
        /// This is the name of the policy rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policySetId")]
        public Output<string> PolicySetId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyBrowserProtectionRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyBrowserProtectionRule(string name, PolicyBrowserProtectionRuleArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule", name, args ?? new PolicyBrowserProtectionRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyBrowserProtectionRule(string name, Input<string> id, PolicyBrowserProtectionRuleState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyBrowserProtectionRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyBrowserProtectionRule Get(string name, Input<string> id, PolicyBrowserProtectionRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyBrowserProtectionRule(name, id, state, options);
        }
    }

    public sealed class PolicyBrowserProtectionRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("conditions")]
        private InputList<Inputs.PolicyBrowserProtectionRuleConditionArgs>? _conditions;

        /// <summary>
        /// This is for proviidng the set of conditions for the policy.
        /// </summary>
        public InputList<Inputs.PolicyBrowserProtectionRuleConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.PolicyBrowserProtectionRuleConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// This is the description of the access policy rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// This is the name of the policy rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PolicyBrowserProtectionRuleArgs()
        {
        }
        public static new PolicyBrowserProtectionRuleArgs Empty => new PolicyBrowserProtectionRuleArgs();
    }

    public sealed class PolicyBrowserProtectionRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("conditions")]
        private InputList<Inputs.PolicyBrowserProtectionRuleConditionGetArgs>? _conditions;

        /// <summary>
        /// This is for proviidng the set of conditions for the policy.
        /// </summary>
        public InputList<Inputs.PolicyBrowserProtectionRuleConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.PolicyBrowserProtectionRuleConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// This is the description of the access policy rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// This is the name of the policy rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policySetId")]
        public Input<string>? PolicySetId { get; set; }

        public PolicyBrowserProtectionRuleState()
        {
        }
        public static new PolicyBrowserProtectionRuleState Empty => new PolicyBrowserProtectionRuleState();
    }
}
