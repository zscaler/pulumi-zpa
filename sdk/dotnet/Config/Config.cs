// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Zscaler.Zpa
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("zpa");

        private static readonly __Value<bool?> _backoff = new __Value<bool?>(() => __config.GetBoolean("backoff"));
        /// <summary>
        /// Use exponential back off strategy for rate limits.
        /// </summary>
        public static bool? Backoff
        {
            get => _backoff.Get();
            set => _backoff.Set(value);
        }

        private static readonly __Value<string?> _clientId = new __Value<string?>(() => __config.Get("clientId") ?? Utilities.GetEnv("ZSCALER_CLIENT_ID"));
        /// <summary>
        /// zpa client id
        /// </summary>
        public static string? ClientId
        {
            get => _clientId.Get();
            set => _clientId.Set(value);
        }

        private static readonly __Value<string?> _clientSecret = new __Value<string?>(() => __config.Get("clientSecret") ?? Utilities.GetEnv("ZSCALER_CLIENT_SECRET"));
        /// <summary>
        /// zpa client secret
        /// </summary>
        public static string? ClientSecret
        {
            get => _clientSecret.Get();
            set => _clientSecret.Set(value);
        }

        private static readonly __Value<string?> _customerId = new __Value<string?>(() => __config.Get("customerId") ?? Utilities.GetEnv("ZPA_CUSTOMER_ID"));
        /// <summary>
        /// zpa customer id
        /// </summary>
        public static string? CustomerId
        {
            get => _customerId.Get();
            set => _customerId.Set(value);
        }

        private static readonly __Value<string?> _httpProxy = new __Value<string?>(() => __config.Get("httpProxy"));
        /// <summary>
        /// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        /// </summary>
        public static string? HttpProxy
        {
            get => _httpProxy.Get();
            set => _httpProxy.Set(value);
        }

        private static readonly __Value<int?> _maxRetries = new __Value<int?>(() => __config.GetInt32("maxRetries"));
        /// <summary>
        /// maximum number of retries to attempt before erroring out.
        /// </summary>
        public static int? MaxRetries
        {
            get => _maxRetries.Get();
            set => _maxRetries.Set(value);
        }

        private static readonly __Value<int?> _maxWaitSeconds = new __Value<int?>(() => __config.GetInt32("maxWaitSeconds"));
        /// <summary>
        /// maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        public static int? MaxWaitSeconds
        {
            get => _maxWaitSeconds.Get();
            set => _maxWaitSeconds.Set(value);
        }

        private static readonly __Value<string?> _microtenantId = new __Value<string?>(() => __config.Get("microtenantId"));
        /// <summary>
        /// zpa microtenant ID
        /// </summary>
        public static string? MicrotenantId
        {
            get => _microtenantId.Get();
            set => _microtenantId.Set(value);
        }

        private static readonly __Value<int?> _minWaitSeconds = new __Value<int?>(() => __config.GetInt32("minWaitSeconds"));
        /// <summary>
        /// minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        /// </summary>
        public static int? MinWaitSeconds
        {
            get => _minWaitSeconds.Get();
            set => _minWaitSeconds.Set(value);
        }

        private static readonly __Value<int?> _parallelism = new __Value<int?>(() => __config.GetInt32("parallelism"));
        /// <summary>
        /// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
        /// https://help.zscaler.com/zpa/understanding-rate-limiting.
        /// </summary>
        public static int? Parallelism
        {
            get => _parallelism.Get();
            set => _parallelism.Set(value);
        }

        private static readonly __Value<string?> _privateKey = new __Value<string?>(() => __config.Get("privateKey") ?? Utilities.GetEnv("ZSCALER_PRIVATE_KEY"));
        /// <summary>
        /// zpa private key
        /// </summary>
        public static string? PrivateKey
        {
            get => _privateKey.Get();
            set => _privateKey.Set(value);
        }

        private static readonly __Value<int?> _requestTimeout = new __Value<int?>(() => __config.GetInt32("requestTimeout"));
        /// <summary>
        /// Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
        /// maximum value can be `300`.
        /// </summary>
        public static int? RequestTimeout
        {
            get => _requestTimeout.Get();
            set => _requestTimeout.Set(value);
        }

        private static readonly __Value<bool?> _useLegacyClient = new __Value<bool?>(() => __config.GetBoolean("useLegacyClient") ?? Utilities.GetEnvBoolean("ZSCALER_USE_LEGACY_CLIENT"));
        /// <summary>
        /// Enables interaction with the ZPA legacy API framework
        /// </summary>
        public static bool? UseLegacyClient
        {
            get => _useLegacyClient.Get();
            set => _useLegacyClient.Set(value);
        }

        private static readonly __Value<string?> _vanityDomain = new __Value<string?>(() => __config.Get("vanityDomain") ?? Utilities.GetEnv("ZSCALER_VANITY_DOMAIN"));
        /// <summary>
        /// Zscaler Vanity Domain
        /// </summary>
        public static string? VanityDomain
        {
            get => _vanityDomain.Get();
            set => _vanityDomain.Set(value);
        }

        private static readonly __Value<string?> _zpaClientId = new __Value<string?>(() => __config.Get("zpaClientId") ?? Utilities.GetEnv("ZPA_CLIENT_ID"));
        /// <summary>
        /// zpa client id
        /// </summary>
        public static string? ZpaClientId
        {
            get => _zpaClientId.Get();
            set => _zpaClientId.Set(value);
        }

        private static readonly __Value<string?> _zpaClientSecret = new __Value<string?>(() => __config.Get("zpaClientSecret") ?? Utilities.GetEnv("ZPA_CLIENT_SECRET"));
        /// <summary>
        /// zpa client secret
        /// </summary>
        public static string? ZpaClientSecret
        {
            get => _zpaClientSecret.Get();
            set => _zpaClientSecret.Set(value);
        }

        private static readonly __Value<string?> _zpaCloud = new __Value<string?>(() => __config.Get("zpaCloud") ?? Utilities.GetEnv("ZPA_CLOUD"));
        /// <summary>
        /// Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        /// </summary>
        public static string? ZpaCloud
        {
            get => _zpaCloud.Get();
            set => _zpaCloud.Set(value);
        }

        private static readonly __Value<string?> _zpaCustomerId = new __Value<string?>(() => __config.Get("zpaCustomerId") ?? Utilities.GetEnv("ZPA_CUSTOMER_ID"));
        /// <summary>
        /// zpa customer id
        /// </summary>
        public static string? ZpaCustomerId
        {
            get => _zpaCustomerId.Get();
            set => _zpaCustomerId.Set(value);
        }

        private static readonly __Value<string?> _zscalerCloud = new __Value<string?>(() => __config.Get("zscalerCloud") ?? Utilities.GetEnv("ZSCALER_CLOUD"));
        /// <summary>
        /// Zscaler Cloud Name
        /// </summary>
        public static string? ZscalerCloud
        {
            get => _zscalerCloud.Get();
            set => _zscalerCloud.Set(value);
        }

    }
}
