// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetAppConnectorController
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-connectors)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-app-connectors-using-api)
        /// 
        /// Use the **zpa_app_connector_controller** data source to get information about a app connector created in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetAppConnectorController.Invoke(new()
        ///     {
        ///         Name = "AWS-VPC100-App-Connector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAppConnectorControllerResult> InvokeAsync(GetAppConnectorControllerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppConnectorControllerResult>("zpa:index/getAppConnectorController:getAppConnectorController", args ?? new GetAppConnectorControllerArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-connectors)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-app-connectors-using-api)
        /// 
        /// Use the **zpa_app_connector_controller** data source to get information about a app connector created in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetAppConnectorController.Invoke(new()
        ///     {
        ///         Name = "AWS-VPC100-App-Connector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAppConnectorControllerResult> Invoke(GetAppConnectorControllerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppConnectorControllerResult>("zpa:index/getAppConnectorController:getAppConnectorController", args ?? new GetAppConnectorControllerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-connectors)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-app-connectors-using-api)
        /// 
        /// Use the **zpa_app_connector_controller** data source to get information about a app connector created in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetAppConnectorController.Invoke(new()
        ///     {
        ///         Name = "AWS-VPC100-App-Connector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAppConnectorControllerResult> Invoke(GetAppConnectorControllerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppConnectorControllerResult>("zpa:index/getAppConnectorController:getAppConnectorController", args ?? new GetAppConnectorControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppConnectorControllerArgs : global::Pulumi.InvokeArgs
    {
        [Input("microtenantId")]
        public string? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public string? MicrotenantName { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetAppConnectorControllerArgs()
        {
        }
        public static new GetAppConnectorControllerArgs Empty => new GetAppConnectorControllerArgs();
    }

    public sealed class GetAppConnectorControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public Input<string>? MicrotenantName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetAppConnectorControllerInvokeArgs()
        {
        }
        public static new GetAppConnectorControllerInvokeArgs Empty => new GetAppConnectorControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppConnectorControllerResult
    {
        public readonly string AppConnectorGroupId;
        public readonly string AppConnectorGroupName;
        public readonly string ApplicationStartTime;
        public readonly ImmutableArray<Outputs.GetAppConnectorControllerAssistantVersionResult> AssistantVersions;
        public readonly string ControlChannelStatus;
        public readonly string CreationTime;
        public readonly string CtrlBrokerName;
        public readonly string CurrentVersion;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly ImmutableDictionary<string, string> EnrollmentCert;
        public readonly string ExpectedUpgradeTime;
        public readonly string ExpectedVersion;
        public readonly string Fingerprint;
        public readonly string Id;
        public readonly string IpAcl;
        public readonly string IssuedCertId;
        public readonly string LastBrokerConnectTime;
        public readonly string LastBrokerConnectTimeDuration;
        public readonly string LastBrokerDisconnectTime;
        public readonly string LastBrokerDisconnectTimeDuration;
        public readonly string LastUpgradeTime;
        public readonly string Latitude;
        public readonly string Location;
        public readonly string Longitude;
        public readonly string? MicrotenantId;
        public readonly string? MicrotenantName;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        public readonly string? Name;
        public readonly string Platform;
        public readonly string PlatformDetail;
        public readonly string PreviousVersion;
        public readonly string PrivateIp;
        public readonly string ProvisioningKeyId;
        public readonly string ProvisioningKeyName;
        public readonly string PublicIp;
        public readonly string RuntimeOs;
        public readonly string SargeVersion;
        public readonly string UpgradeAttempt;
        public readonly string UpgradeStatus;
        public readonly ImmutableArray<Outputs.GetAppConnectorControllerZpnSubModuleUpgradeListResult> ZpnSubModuleUpgradeLists;

        [OutputConstructor]
        private GetAppConnectorControllerResult(
            string appConnectorGroupId,

            string appConnectorGroupName,

            string applicationStartTime,

            ImmutableArray<Outputs.GetAppConnectorControllerAssistantVersionResult> assistantVersions,

            string controlChannelStatus,

            string creationTime,

            string ctrlBrokerName,

            string currentVersion,

            string description,

            bool enabled,

            ImmutableDictionary<string, string> enrollmentCert,

            string expectedUpgradeTime,

            string expectedVersion,

            string fingerprint,

            string id,

            string ipAcl,

            string issuedCertId,

            string lastBrokerConnectTime,

            string lastBrokerConnectTimeDuration,

            string lastBrokerDisconnectTime,

            string lastBrokerDisconnectTimeDuration,

            string lastUpgradeTime,

            string latitude,

            string location,

            string longitude,

            string? microtenantId,

            string? microtenantName,

            string modifiedBy,

            string modifiedTime,

            string? name,

            string platform,

            string platformDetail,

            string previousVersion,

            string privateIp,

            string provisioningKeyId,

            string provisioningKeyName,

            string publicIp,

            string runtimeOs,

            string sargeVersion,

            string upgradeAttempt,

            string upgradeStatus,

            ImmutableArray<Outputs.GetAppConnectorControllerZpnSubModuleUpgradeListResult> zpnSubModuleUpgradeLists)
        {
            AppConnectorGroupId = appConnectorGroupId;
            AppConnectorGroupName = appConnectorGroupName;
            ApplicationStartTime = applicationStartTime;
            AssistantVersions = assistantVersions;
            ControlChannelStatus = controlChannelStatus;
            CreationTime = creationTime;
            CtrlBrokerName = ctrlBrokerName;
            CurrentVersion = currentVersion;
            Description = description;
            Enabled = enabled;
            EnrollmentCert = enrollmentCert;
            ExpectedUpgradeTime = expectedUpgradeTime;
            ExpectedVersion = expectedVersion;
            Fingerprint = fingerprint;
            Id = id;
            IpAcl = ipAcl;
            IssuedCertId = issuedCertId;
            LastBrokerConnectTime = lastBrokerConnectTime;
            LastBrokerConnectTimeDuration = lastBrokerConnectTimeDuration;
            LastBrokerDisconnectTime = lastBrokerDisconnectTime;
            LastBrokerDisconnectTimeDuration = lastBrokerDisconnectTimeDuration;
            LastUpgradeTime = lastUpgradeTime;
            Latitude = latitude;
            Location = location;
            Longitude = longitude;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            Platform = platform;
            PlatformDetail = platformDetail;
            PreviousVersion = previousVersion;
            PrivateIp = privateIp;
            ProvisioningKeyId = provisioningKeyId;
            ProvisioningKeyName = provisioningKeyName;
            PublicIp = publicIp;
            RuntimeOs = runtimeOs;
            SargeVersion = sargeVersion;
            UpgradeAttempt = upgradeAttempt;
            UpgradeStatus = upgradeStatus;
            ZpnSubModuleUpgradeLists = zpnSubModuleUpgradeLists;
        }
    }
}
