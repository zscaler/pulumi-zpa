// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credential-pools)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)
    /// 
    /// The **zpa_pra_credential_pool** resource creates a privileged remote access credential pool in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var thisPRACredential = new Zpa.PRACredential("thisPRACredential", new()
    ///     {
    ///         Description = "Created with Terraform",
    ///         CredentialType = "PASSWORD",
    ///         UserDomain = "acme.com",
    ///         Password = "",
    ///     });
    /// 
    ///     // Creates Credential Pool of Type "USERNAME_PASSWORD"
    ///     var thisPRACredentialPool = new Zpa.PRACredentialPool("thisPRACredentialPool", new()
    ///     {
    ///         CredentialType = "USERNAME_PASSWORD",
    ///         Credentials = new[]
    ///         {
    ///             new Zpa.Inputs.PRACredentialPoolCredentialArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     thisPRACredential.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zpa_pra_credential_pool** can be imported by using `&lt;POOL ID&gt;` or `&lt;POOL NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/pRACredentialPool:PRACredentialPool this &lt;pool_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/pRACredentialPool:PRACredentialPool this &lt;pool_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/pRACredentialPool:PRACredentialPool")]
    public partial class PRACredentialPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Output("credentialType")]
        public Output<string?> CredentialType { get; private set; } = null!;

        /// <summary>
        /// List of PRA Credentials
        /// </summary>
        [Output("credentials")]
        public Output<ImmutableArray<Outputs.PRACredentialPoolCredential>> Credentials { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Output("microtenantId")]
        public Output<string> MicrotenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a PRACredentialPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PRACredentialPool(string name, PRACredentialPoolArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:index/pRACredentialPool:PRACredentialPool", name, args ?? new PRACredentialPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PRACredentialPool(string name, Input<string> id, PRACredentialPoolState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/pRACredentialPool:PRACredentialPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PRACredentialPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PRACredentialPool Get(string name, Input<string> id, PRACredentialPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new PRACredentialPool(name, id, state, options);
        }
    }

    public sealed class PRACredentialPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        [Input("credentials")]
        private InputList<Inputs.PRACredentialPoolCredentialArgs>? _credentials;

        /// <summary>
        /// List of PRA Credentials
        /// </summary>
        public InputList<Inputs.PRACredentialPoolCredentialArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.PRACredentialPoolCredentialArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PRACredentialPoolArgs()
        {
        }
        public static new PRACredentialPoolArgs Empty => new PRACredentialPoolArgs();
    }

    public sealed class PRACredentialPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        /// and VNC. Each protocol type has its own credential requirements.
        /// </summary>
        [Input("credentialType")]
        public Input<string>? CredentialType { get; set; }

        [Input("credentials")]
        private InputList<Inputs.PRACredentialPoolCredentialGetArgs>? _credentials;

        /// <summary>
        /// List of PRA Credentials
        /// </summary>
        public InputList<Inputs.PRACredentialPoolCredentialGetArgs> Credentials
        {
            get => _credentials ?? (_credentials = new InputList<Inputs.PRACredentialPoolCredentialGetArgs>());
            set => _credentials = value;
        }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged credential
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PRACredentialPoolState()
        {
        }
        public static new PRACredentialPoolState Empty => new PRACredentialPoolState();
    }
}
