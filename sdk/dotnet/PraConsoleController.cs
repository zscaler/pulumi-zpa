// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-consoles)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-consoles-using-api)
    /// 
    /// The **zpa_pra_console_controller** resource creates a privileged remote access console in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource and a privileged access portal.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Pulumi.Zpa;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Creates Segment Group for Application Segment"
    ///     var thisSegmentGroup = new Zpa.SegmentGroup("thisSegmentGroup", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///     });
    /// 
    ///     // Creates Privileged Remote Access Application Segment"
    ///     var thisApplicationSegmentPRA = new Zpa.ApplicationSegmentPRA("thisApplicationSegmentPRA", new()
    ///     {
    ///         Description = "Example",
    ///         Enabled = true,
    ///         HealthReporting = "ON_ACCESS",
    ///         BypassType = "NEVER",
    ///         IsCnameEnabled = true,
    ///         TcpPortRanges = new[]
    ///         {
    ///             "3389",
    ///             "3389",
    ///         },
    ///         DomainNames = new[]
    ///         {
    ///             "rdp_pra.example.com",
    ///         },
    ///         SegmentGroupId = thisSegmentGroup.Id,
    ///         CommonAppsDto = new Zpa.Inputs.ApplicationSegmentPRACommonAppsDtoArgs
    ///         {
    ///             AppsConfigs = new[]
    ///             {
    ///                 new Zpa.Inputs.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs
    ///                 {
    ///                     Name = "rdp_pra",
    ///                     Domain = "rdp_pra.example.com",
    ///                     ApplicationProtocol = "RDP",
    ///                     ConnectionSecurity = "ANY",
    ///                     ApplicationPort = "3389",
    ///                     Enabled = true,
    ///                     AppTypes = new[]
    ///                     {
    ///                         "SECURE_REMOTE_ACCESS",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var thisApplicationSegmentByType = Zpa.GetApplicationSegmentByType.Invoke(new()
    ///     {
    ///         ApplicationType = "SECURE_REMOTE_ACCESS",
    ///         Name = "rdp_pra",
    ///     });
    /// 
    ///     var thisBaCertificate = Zpa.GetBaCertificate.Invoke(new()
    ///     {
    ///         Name = "pra01.example.com",
    ///     });
    /// 
    ///     // Creates PRA Portal"
    ///     var this1 = new Zpa.PRAPortal("this1", new()
    ///     {
    ///         Description = "pra01.example.com",
    ///         Enabled = true,
    ///         Domain = "pra01.example.com",
    ///         CertificateId = thisBaCertificate.Apply(getBaCertificateResult =&gt; getBaCertificateResult.Id),
    ///         UserNotification = "Created with Terraform",
    ///         UserNotificationEnabled = true,
    ///     });
    /// 
    ///     var sshPra = new Zpa.PRAConsole("sshPra", new()
    ///     {
    ///         Description = "Created with Terraform",
    ///         Enabled = true,
    ///         PraApplication = new Zpa.Inputs.PRAConsolePraApplicationArgs
    ///         {
    ///             Id = thisApplicationSegmentByType.Apply(getApplicationSegmentByTypeResult =&gt; getApplicationSegmentByTypeResult.Id),
    ///         },
    ///         PraPortals = new[]
    ///         {
    ///             new Zpa.Inputs.PRAConsolePraPortalArgs
    ///             {
    ///                 Ids = new[]
    ///                 {
    ///                     zpa_pra_portal_controller.This.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **pra_credential_controller** can be imported by using `&lt;CONSOLE ID&gt;` or `&lt;CONSOLE NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/praConsoleController:PraConsoleController this &lt;console_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/praConsoleController:PraConsoleController this &lt;console_name&gt;
    /// ```
    /// </summary>
    [Obsolete(@"zpa.index/praconsolecontroller.PraConsoleController has been deprecated in favor of zpa.index/praconsole.PRAConsole")]
    [ZpaResourceType("zpa:index/praConsoleController:PraConsoleController")]
    public partial class PraConsoleController : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the privileged console
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether or not the privileged console is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The privileged console icon. The icon image is converted to base64 encoded text format
        /// </summary>
        [Output("iconText")]
        public Output<string> IconText { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Output("microtenantId")]
        public Output<string> MicrotenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the privileged console
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("praApplication")]
        public Output<Outputs.PraConsoleControllerPraApplication> PraApplication { get; private set; } = null!;

        [Output("praPortals")]
        public Output<ImmutableArray<Outputs.PraConsoleControllerPraPortal>> PraPortals { get; private set; } = null!;


        /// <summary>
        /// Create a PraConsoleController resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PraConsoleController(string name, PraConsoleControllerArgs args, CustomResourceOptions? options = null)
            : base("zpa:index/praConsoleController:PraConsoleController", name, args ?? new PraConsoleControllerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PraConsoleController(string name, Input<string> id, PraConsoleControllerState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/praConsoleController:PraConsoleController", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PraConsoleController resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PraConsoleController Get(string name, Input<string> id, PraConsoleControllerState? state = null, CustomResourceOptions? options = null)
        {
            return new PraConsoleController(name, id, state, options);
        }
    }

    public sealed class PraConsoleControllerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the privileged console
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the privileged console is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The privileged console icon. The icon image is converted to base64 encoded text format
        /// </summary>
        [Input("iconText")]
        public Input<string>? IconText { get; set; }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged console
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("praApplication", required: true)]
        public Input<Inputs.PraConsoleControllerPraApplicationArgs> PraApplication { get; set; } = null!;

        [Input("praPortals", required: true)]
        private InputList<Inputs.PraConsoleControllerPraPortalArgs>? _praPortals;
        public InputList<Inputs.PraConsoleControllerPraPortalArgs> PraPortals
        {
            get => _praPortals ?? (_praPortals = new InputList<Inputs.PraConsoleControllerPraPortalArgs>());
            set => _praPortals = value;
        }

        public PraConsoleControllerArgs()
        {
        }
        public static new PraConsoleControllerArgs Empty => new PraConsoleControllerArgs();
    }

    public sealed class PraConsoleControllerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the privileged console
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the privileged console is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The privileged console icon. The icon image is converted to base64 encoded text format
        /// </summary>
        [Input("iconText")]
        public Input<string>? IconText { get; set; }

        /// <summary>
        /// The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        /// microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        /// </summary>
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        /// <summary>
        /// The name of the privileged console
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("praApplication")]
        public Input<Inputs.PraConsoleControllerPraApplicationGetArgs>? PraApplication { get; set; }

        [Input("praPortals")]
        private InputList<Inputs.PraConsoleControllerPraPortalGetArgs>? _praPortals;
        public InputList<Inputs.PraConsoleControllerPraPortalGetArgs> PraPortals
        {
            get => _praPortals ?? (_praPortals = new InputList<Inputs.PraConsoleControllerPraPortalGetArgs>());
            set => _praPortals = value;
        }

        public PraConsoleControllerState()
        {
        }
        public static new PraConsoleControllerState Empty => new PraConsoleControllerState();
    }
}
