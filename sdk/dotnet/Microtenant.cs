// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zpa/about-microtenants)
    /// * [API documentation](https://help.zscaler.com/zpa/configuring-microtenants-using-api)
    /// 
    /// The **zpa_microtenant_controller** resource creates a microtenant controller in the Zscaler Private Access cloud. This resource allows organizations to delegate responsibilities of admins directly to the acquired or merged company admins so that they can manage their configurations independently
    /// 
    /// ⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zpa = Zscaler.Zpa;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ZPA Microtenant Controller resource
    ///     var @this = new Zpa.Microtenant("this", new()
    ///     {
    ///         Description = "Microtenant_A",
    ///         Enabled = true,
    ///         CriteriaAttribute = "AuthDomain",
    ///         CriteriaAttributeValues = new[]
    ///         {
    ///             "acme.com",
    ///         },
    ///         PrivilegedApprovalsEnabled = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["zpaMicrotenantController1"] = @this.Users.Apply(users =&gt; users.Select(u =&gt; 
    ///         {
    ///             return 
    ///             {
    ///                 { "microtenant_id", u.MicrotenantId },
    ///                 { "username", u.Username },
    ///                 { "password", u.Password },
    ///             };
    ///         }).ToList()),
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **microtenant_controller** can be imported by using `&lt;MICROTENANT ID&gt;` or `&lt;MICROTENANT NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/microtenant:Microtenant example &lt;microtenant_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zpa:index/microtenant:Microtenant example &lt;microtenant_name&gt;
    /// ```
    /// </summary>
    [ZpaResourceType("zpa:index/microtenant:Microtenant")]
    public partial class Microtenant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// - (Required) Type of authentication criteria for the microtenant
        /// </summary>
        [Output("criteriaAttribute")]
        public Output<string?> CriteriaAttribute { get; private set; } = null!;

        /// <summary>
        /// - (Required) The domain associated with the respective microtenant controller resource
        /// </summary>
        [Output("criteriaAttributeValues")]
        public Output<ImmutableArray<string>> CriteriaAttributeValues { get; private set; } = null!;

        /// <summary>
        /// The description of the Microtenant.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether or not the Microtenant is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
        /// Authentication Domain is selected.
        /// </summary>
        [Output("privilegedApprovalsEnabled")]
        public Output<bool?> PrivilegedApprovalsEnabled { get; private set; } = null!;

        [Output("users")]
        public Output<ImmutableArray<Outputs.MicrotenantUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Microtenant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Microtenant(string name, MicrotenantArgs? args = null, CustomResourceOptions? options = null)
            : base("zpa:index/microtenant:Microtenant", name, args ?? new MicrotenantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Microtenant(string name, Input<string> id, MicrotenantState? state = null, CustomResourceOptions? options = null)
            : base("zpa:index/microtenant:Microtenant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Microtenant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Microtenant Get(string name, Input<string> id, MicrotenantState? state = null, CustomResourceOptions? options = null)
        {
            return new Microtenant(name, id, state, options);
        }
    }

    public sealed class MicrotenantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) Type of authentication criteria for the microtenant
        /// </summary>
        [Input("criteriaAttribute")]
        public Input<string>? CriteriaAttribute { get; set; }

        [Input("criteriaAttributeValues")]
        private InputList<string>? _criteriaAttributeValues;

        /// <summary>
        /// - (Required) The domain associated with the respective microtenant controller resource
        /// </summary>
        public InputList<string> CriteriaAttributeValues
        {
            get => _criteriaAttributeValues ?? (_criteriaAttributeValues = new InputList<string>());
            set => _criteriaAttributeValues = value;
        }

        /// <summary>
        /// The description of the Microtenant.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the Microtenant is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
        /// Authentication Domain is selected.
        /// </summary>
        [Input("privilegedApprovalsEnabled")]
        public Input<bool>? PrivilegedApprovalsEnabled { get; set; }

        [Input("users")]
        private InputList<Inputs.MicrotenantUserArgs>? _users;
        public InputList<Inputs.MicrotenantUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MicrotenantUserArgs>());
            set => _users = value;
        }

        public MicrotenantArgs()
        {
        }
        public static new MicrotenantArgs Empty => new MicrotenantArgs();
    }

    public sealed class MicrotenantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - (Required) Type of authentication criteria for the microtenant
        /// </summary>
        [Input("criteriaAttribute")]
        public Input<string>? CriteriaAttribute { get; set; }

        [Input("criteriaAttributeValues")]
        private InputList<string>? _criteriaAttributeValues;

        /// <summary>
        /// - (Required) The domain associated with the respective microtenant controller resource
        /// </summary>
        public InputList<string> CriteriaAttributeValues
        {
            get => _criteriaAttributeValues ?? (_criteriaAttributeValues = new InputList<string>());
            set => _criteriaAttributeValues = value;
        }

        /// <summary>
        /// The description of the Microtenant.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the Microtenant is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
        /// Authentication Domain is selected.
        /// </summary>
        [Input("privilegedApprovalsEnabled")]
        public Input<bool>? PrivilegedApprovalsEnabled { get; set; }

        [Input("users")]
        private InputList<Inputs.MicrotenantUserGetArgs>? _users;
        public InputList<Inputs.MicrotenantUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.MicrotenantUserGetArgs>());
            set => _users = value;
        }

        public MicrotenantState()
        {
        }
        public static new MicrotenantState Empty => new MicrotenantState();
    }
}
