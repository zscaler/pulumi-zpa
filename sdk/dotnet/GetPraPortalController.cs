// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    [Obsolete(@"zpa.index/getpraportalcontroller.getPraPortalController has been deprecated in favor of zpa.index/getpraportal.getPRAPortal")]
    public static class GetPraPortalController
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-portals)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-portals-using-api)
        /// 
        /// Use the **zpa_pra_portal_controller** data source to get information about a privileged remote access portal created in the Zscaler Private Access cloud. This data source can then be referenced in an privileged remote access console resource.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetPRAPortal.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPraPortalControllerResult> InvokeAsync(GetPraPortalControllerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPraPortalControllerResult>("zpa:index/getPraPortalController:getPraPortalController", args ?? new GetPraPortalControllerArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-portals)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-portals-using-api)
        /// 
        /// Use the **zpa_pra_portal_controller** data source to get information about a privileged remote access portal created in the Zscaler Private Access cloud. This data source can then be referenced in an privileged remote access console resource.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetPRAPortal.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPraPortalControllerResult> Invoke(GetPraPortalControllerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPraPortalControllerResult>("zpa:index/getPraPortalController:getPraPortalController", args ?? new GetPraPortalControllerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-privileged-portals)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-portals-using-api)
        /// 
        /// Use the **zpa_pra_portal_controller** data source to get information about a privileged remote access portal created in the Zscaler Private Access cloud. This data source can then be referenced in an privileged remote access console resource.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetPRAPortal.Invoke(new()
        ///     {
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPraPortalControllerResult> Invoke(GetPraPortalControllerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPraPortalControllerResult>("zpa:index/getPraPortalController:getPraPortalController", args ?? new GetPraPortalControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPraPortalControllerArgs : global::Pulumi.InvokeArgs
    {
        [Input("extDomain")]
        public string? ExtDomain { get; set; }

        [Input("extDomainName")]
        public string? ExtDomainName { get; set; }

        [Input("extDomainTranslation")]
        public string? ExtDomainTranslation { get; set; }

        [Input("extLabel")]
        public string? ExtLabel { get; set; }

        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetPraPortalControllerArgs()
        {
        }
        public static new GetPraPortalControllerArgs Empty => new GetPraPortalControllerArgs();
    }

    public sealed class GetPraPortalControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("extDomain")]
        public Input<string>? ExtDomain { get; set; }

        [Input("extDomainName")]
        public Input<string>? ExtDomainName { get; set; }

        [Input("extDomainTranslation")]
        public Input<string>? ExtDomainTranslation { get; set; }

        [Input("extLabel")]
        public Input<string>? ExtLabel { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetPraPortalControllerInvokeArgs()
        {
        }
        public static new GetPraPortalControllerInvokeArgs Empty => new GetPraPortalControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetPraPortalControllerResult
    {
        public readonly string CertificateId;
        public readonly string CertificateName;
        public readonly string Cname;
        public readonly string CreationTime;
        public readonly string Description;
        public readonly string Domain;
        public readonly bool Enabled;
        public readonly string? ExtDomain;
        public readonly string? ExtDomainName;
        public readonly string? ExtDomainTranslation;
        public readonly string? ExtLabel;
        public readonly string GetcName;
        public readonly string? Id;
        public readonly string MicrotenantId;
        public readonly string MicrotenantName;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        public readonly string? Name;
        public readonly string UserNotification;
        public readonly bool UserNotificationEnabled;
        public readonly string UserPortalGid;
        public readonly string UserPortalName;

        [OutputConstructor]
        private GetPraPortalControllerResult(
            string certificateId,

            string certificateName,

            string cname,

            string creationTime,

            string description,

            string domain,

            bool enabled,

            string? extDomain,

            string? extDomainName,

            string? extDomainTranslation,

            string? extLabel,

            string getcName,

            string? id,

            string microtenantId,

            string microtenantName,

            string modifiedBy,

            string modifiedTime,

            string? name,

            string userNotification,

            bool userNotificationEnabled,

            string userPortalGid,

            string userPortalName)
        {
            CertificateId = certificateId;
            CertificateName = certificateName;
            Cname = cname;
            CreationTime = creationTime;
            Description = description;
            Domain = domain;
            Enabled = enabled;
            ExtDomain = extDomain;
            ExtDomainName = extDomainName;
            ExtDomainTranslation = extDomainTranslation;
            ExtLabel = extLabel;
            GetcName = getcName;
            Id = id;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            UserNotification = userNotification;
            UserNotificationEnabled = userNotificationEnabled;
            UserPortalGid = userPortalGid;
            UserPortalName = userPortalName;
        }
    }
}
