// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetServiceEdgeController
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edges)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-zpa-private-service-edges-using-api)
        /// 
        /// Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetServiceEdgeController.Invoke(new()
        ///     {
        ///         Name = "On-Prem-PSE",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceEdgeControllerResult> InvokeAsync(GetServiceEdgeControllerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceEdgeControllerResult>("zpa:index/getServiceEdgeController:getServiceEdgeController", args ?? new GetServiceEdgeControllerArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edges)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-zpa-private-service-edges-using-api)
        /// 
        /// Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetServiceEdgeController.Invoke(new()
        ///     {
        ///         Name = "On-Prem-PSE",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceEdgeControllerResult> Invoke(GetServiceEdgeControllerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceEdgeControllerResult>("zpa:index/getServiceEdgeController:getServiceEdgeController", args ?? new GetServiceEdgeControllerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-zpa-private-service-edges)
        /// * [API documentation](https://help.zscaler.com/zpa/managing-zpa-private-service-edges-using-api)
        /// 
        /// Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.
        /// 
        /// **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zpa.GetServiceEdgeController.Invoke(new()
        ///     {
        ///         Name = "On-Prem-PSE",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceEdgeControllerResult> Invoke(GetServiceEdgeControllerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceEdgeControllerResult>("zpa:index/getServiceEdgeController:getServiceEdgeController", args ?? new GetServiceEdgeControllerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceEdgeControllerArgs : global::Pulumi.InvokeArgs
    {
        [Input("microtenantId")]
        public string? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public string? MicrotenantName { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetServiceEdgeControllerArgs()
        {
        }
        public static new GetServiceEdgeControllerArgs Empty => new GetServiceEdgeControllerArgs();
    }

    public sealed class GetServiceEdgeControllerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("microtenantId")]
        public Input<string>? MicrotenantId { get; set; }

        [Input("microtenantName")]
        public Input<string>? MicrotenantName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServiceEdgeControllerInvokeArgs()
        {
        }
        public static new GetServiceEdgeControllerInvokeArgs Empty => new GetServiceEdgeControllerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceEdgeControllerResult
    {
        public readonly string ApplicationStartTime;
        public readonly string ControlChannelStatus;
        public readonly string CreationTime;
        public readonly string CtrlBrokerName;
        public readonly string CurrentVersion;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly ImmutableDictionary<string, string> EnrollmentCert;
        public readonly string ExpectedUpgradeTime;
        public readonly string ExpectedVersion;
        public readonly string Fingerprint;
        public readonly string Id;
        public readonly string IpAcl;
        public readonly string IssuedCertId;
        public readonly string LastBrokerConnectTime;
        public readonly string LastBrokerConnectTimeDuration;
        public readonly string LastBrokerDisconnectTime;
        public readonly string LastBrokerDisconnectTimeDuration;
        public readonly string LastUpgradeTime;
        public readonly string Latitude;
        public readonly ImmutableArray<string> ListenIps;
        public readonly string Location;
        public readonly string Longitude;
        public readonly string? MicrotenantId;
        public readonly string? MicrotenantName;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        public readonly string? Name;
        public readonly string Platform;
        public readonly string PreviousVersion;
        public readonly ImmutableArray<Outputs.GetServiceEdgeControllerPrivateBrokerVersionResult> PrivateBrokerVersions;
        public readonly string PrivateIp;
        public readonly string ProvisioningKeyId;
        public readonly string ProvisioningKeyName;
        public readonly string PublicIp;
        public readonly ImmutableArray<string> PublishIps;
        public readonly bool PublishIpv6;
        public readonly string RuntimeOs;
        public readonly string SargeVersion;
        public readonly string ServiceEdgeGroupId;
        public readonly string ServiceEdgeGroupName;
        public readonly string UpgradeAttempt;
        public readonly string UpgradeStatus;

        [OutputConstructor]
        private GetServiceEdgeControllerResult(
            string applicationStartTime,

            string controlChannelStatus,

            string creationTime,

            string ctrlBrokerName,

            string currentVersion,

            string description,

            bool enabled,

            ImmutableDictionary<string, string> enrollmentCert,

            string expectedUpgradeTime,

            string expectedVersion,

            string fingerprint,

            string id,

            string ipAcl,

            string issuedCertId,

            string lastBrokerConnectTime,

            string lastBrokerConnectTimeDuration,

            string lastBrokerDisconnectTime,

            string lastBrokerDisconnectTimeDuration,

            string lastUpgradeTime,

            string latitude,

            ImmutableArray<string> listenIps,

            string location,

            string longitude,

            string? microtenantId,

            string? microtenantName,

            string modifiedBy,

            string modifiedTime,

            string? name,

            string platform,

            string previousVersion,

            ImmutableArray<Outputs.GetServiceEdgeControllerPrivateBrokerVersionResult> privateBrokerVersions,

            string privateIp,

            string provisioningKeyId,

            string provisioningKeyName,

            string publicIp,

            ImmutableArray<string> publishIps,

            bool publishIpv6,

            string runtimeOs,

            string sargeVersion,

            string serviceEdgeGroupId,

            string serviceEdgeGroupName,

            string upgradeAttempt,

            string upgradeStatus)
        {
            ApplicationStartTime = applicationStartTime;
            ControlChannelStatus = controlChannelStatus;
            CreationTime = creationTime;
            CtrlBrokerName = ctrlBrokerName;
            CurrentVersion = currentVersion;
            Description = description;
            Enabled = enabled;
            EnrollmentCert = enrollmentCert;
            ExpectedUpgradeTime = expectedUpgradeTime;
            ExpectedVersion = expectedVersion;
            Fingerprint = fingerprint;
            Id = id;
            IpAcl = ipAcl;
            IssuedCertId = issuedCertId;
            LastBrokerConnectTime = lastBrokerConnectTime;
            LastBrokerConnectTimeDuration = lastBrokerConnectTimeDuration;
            LastBrokerDisconnectTime = lastBrokerDisconnectTime;
            LastBrokerDisconnectTimeDuration = lastBrokerDisconnectTimeDuration;
            LastUpgradeTime = lastUpgradeTime;
            Latitude = latitude;
            ListenIps = listenIps;
            Location = location;
            Longitude = longitude;
            MicrotenantId = microtenantId;
            MicrotenantName = microtenantName;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            Platform = platform;
            PreviousVersion = previousVersion;
            PrivateBrokerVersions = privateBrokerVersions;
            PrivateIp = privateIp;
            ProvisioningKeyId = provisioningKeyId;
            ProvisioningKeyName = provisioningKeyName;
            PublicIp = publicIp;
            PublishIps = publishIps;
            PublishIpv6 = publishIpv6;
            RuntimeOs = runtimeOs;
            SargeVersion = sargeVersion;
            ServiceEdgeGroupId = serviceEdgeGroupId;
            ServiceEdgeGroupName = serviceEdgeGroupName;
            UpgradeAttempt = upgradeAttempt;
            UpgradeStatus = upgradeStatus;
        }
    }
}
