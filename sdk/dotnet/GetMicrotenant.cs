// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetMicrotenant
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-microtenants)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-microtenants-using-api)
        /// 
        /// The **zpa_microtenant_controller** data source to get information about a machine group created in the Zscaler Private Access cloud. This data source allows administrators to retrieve a specific microtenant ID, which can be passed to other supported resources via the `microtenant_id` attribute.
        /// 
        /// ⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetMicrotenant.Invoke(new()
        ///     {
        ///         Name = "Microtenant_A",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMicrotenantResult> InvokeAsync(GetMicrotenantArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMicrotenantResult>("zpa:index/getMicrotenant:getMicrotenant", args ?? new GetMicrotenantArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zpa/about-microtenants)
        /// * [API documentation](https://help.zscaler.com/zpa/configuring-microtenants-using-api)
        /// 
        /// The **zpa_microtenant_controller** data source to get information about a machine group created in the Zscaler Private Access cloud. This data source allows administrators to retrieve a specific microtenant ID, which can be passed to other supported resources via the `microtenant_id` attribute.
        /// 
        /// ⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetMicrotenant.Invoke(new()
        ///     {
        ///         Name = "Microtenant_A",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMicrotenantResult> Invoke(GetMicrotenantInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMicrotenantResult>("zpa:index/getMicrotenant:getMicrotenant", args ?? new GetMicrotenantInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMicrotenantArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetMicrotenantArgs()
        {
        }
        public static new GetMicrotenantArgs Empty => new GetMicrotenantArgs();
    }

    public sealed class GetMicrotenantInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetMicrotenantInvokeArgs()
        {
        }
        public static new GetMicrotenantInvokeArgs Empty => new GetMicrotenantInvokeArgs();
    }


    [OutputType]
    public sealed class GetMicrotenantResult
    {
        public readonly string CreationTime;
        public readonly string CriteriaAttribute;
        public readonly ImmutableArray<string> CriteriaAttributeValues;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly string? Id;
        public readonly string ModifiedBy;
        public readonly string ModifiedTime;
        /// <summary>
        /// - (Required) Name of the microtenant controller.
        /// </summary>
        public readonly string? Name;
        public readonly string Operator;
        public readonly string Priority;
        public readonly ImmutableArray<Outputs.GetMicrotenantRoleResult> Roles;
        public readonly ImmutableArray<Outputs.GetMicrotenantUserResult> Users;

        [OutputConstructor]
        private GetMicrotenantResult(
            string creationTime,

            string criteriaAttribute,

            ImmutableArray<string> criteriaAttributeValues,

            string description,

            bool enabled,

            string? id,

            string modifiedBy,

            string modifiedTime,

            string? name,

            string @operator,

            string priority,

            ImmutableArray<Outputs.GetMicrotenantRoleResult> roles,

            ImmutableArray<Outputs.GetMicrotenantUserResult> users)
        {
            CreationTime = creationTime;
            CriteriaAttribute = criteriaAttribute;
            CriteriaAttributeValues = criteriaAttributeValues;
            Description = description;
            Enabled = enabled;
            Id = id;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            Operator = @operator;
            Priority = priority;
            Roles = roles;
            Users = users;
        }
    }
}
