// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa
{
    public static class GetCloudBrowserIsolationBanner
    {
        /// <summary>
        /// Use the **zpa_cloud_browser_isolation_banner** data source to get information about Cloud Browser Isolation banner. This data source information is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetCloudBrowserIsolationBanner.Invoke(new()
        ///     {
        ///         Name = "Default",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCloudBrowserIsolationBannerResult> InvokeAsync(GetCloudBrowserIsolationBannerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCloudBrowserIsolationBannerResult>("zpa:index/getCloudBrowserIsolationBanner:getCloudBrowserIsolationBanner", args ?? new GetCloudBrowserIsolationBannerArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zpa_cloud_browser_isolation_banner** data source to get information about Cloud Browser Isolation banner. This data source information is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zpa = Pulumi.Zpa;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zpa.GetCloudBrowserIsolationBanner.Invoke(new()
        ///     {
        ///         Name = "Default",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCloudBrowserIsolationBannerResult> Invoke(GetCloudBrowserIsolationBannerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCloudBrowserIsolationBannerResult>("zpa:index/getCloudBrowserIsolationBanner:getCloudBrowserIsolationBanner", args ?? new GetCloudBrowserIsolationBannerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCloudBrowserIsolationBannerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the CBI banner to be exported.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the CBI banner to be exported.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCloudBrowserIsolationBannerArgs()
        {
        }
        public static new GetCloudBrowserIsolationBannerArgs Empty => new GetCloudBrowserIsolationBannerArgs();
    }

    public sealed class GetCloudBrowserIsolationBannerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the CBI banner to be exported.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the CBI banner to be exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCloudBrowserIsolationBannerInvokeArgs()
        {
        }
        public static new GetCloudBrowserIsolationBannerInvokeArgs Empty => new GetCloudBrowserIsolationBannerInvokeArgs();
    }


    [OutputType]
    public sealed class GetCloudBrowserIsolationBannerResult
    {
        /// <summary>
        /// (bool) - Show Welcome Notification
        /// </summary>
        public readonly bool Banner;
        public readonly string? Id;
        /// <summary>
        /// (bool) - Use the default banner
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// (string) - The Logo Image (.jpeg or .png; Maximum file size is 100KB.)
        /// </summary>
        public readonly string Logo;
        public readonly string? Name;
        /// <summary>
        /// (string) The Banner Notification Text
        /// </summary>
        public readonly string NotificationText;
        /// <summary>
        /// (string) The Banner Notification Title
        /// </summary>
        public readonly string NotificationTitle;
        /// <summary>
        /// (string) - The Banner Primary Color code in hexadecimal way to represent the color of the banner in RGB format
        /// </summary>
        public readonly string PrimaryColor;
        /// <summary>
        /// (string) - The Banner Text Color code in hexadecimal way to represent the color of the text in RGB format
        /// </summary>
        public readonly string TextColor;

        [OutputConstructor]
        private GetCloudBrowserIsolationBannerResult(
            bool banner,

            string? id,

            bool isDefault,

            string logo,

            string? name,

            string notificationText,

            string notificationTitle,

            string primaryColor,

            string textColor)
        {
            Banner = banner;
            Id = id;
            IsDefault = isDefault;
            Logo = logo;
            Name = name;
            NotificationText = notificationText;
            NotificationTitle = notificationTitle;
            PrimaryColor = primaryColor;
            TextColor = textColor;
        }
    }
}
