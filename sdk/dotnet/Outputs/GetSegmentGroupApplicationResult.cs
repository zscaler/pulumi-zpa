// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Zscaler.Zpa.Outputs
{

    [OutputType]
    public sealed class GetSegmentGroupApplicationResult
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string BypassType;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ConfigSpace;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string DefaultIdleTimeout;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string DefaultMaxAge;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly ImmutableArray<string> DomainNames;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly bool DoubleEncrypt;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string HealthCheckType;
        /// <summary>
        /// The ID of the segment group to be exported.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool IpAnchored;
        public readonly ImmutableArray<string> LogFeatures;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ModifiedBy;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ModifiedTime;
        /// <summary>
        /// The name of the segment group to be exported.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool PassiveHealthEnabled;
        /// <summary>
        /// (Computed)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSegmentGroupApplicationServerGroupResult> ServerGroups;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly ImmutableArray<string> TcpPortRanges;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly ImmutableArray<string> TcpPortsIns;
        public readonly ImmutableArray<string> TcpPortsOuts;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly ImmutableArray<string> UdpPortRanges;

        [OutputConstructor]
        private GetSegmentGroupApplicationResult(
            string bypassType,

            string configSpace,

            string creationTime,

            string defaultIdleTimeout,

            string defaultMaxAge,

            string description,

            string domainName,

            ImmutableArray<string> domainNames,

            bool doubleEncrypt,

            bool enabled,

            string healthCheckType,

            string id,

            bool ipAnchored,

            ImmutableArray<string> logFeatures,

            string modifiedBy,

            string modifiedTime,

            string name,

            bool passiveHealthEnabled,

            ImmutableArray<Outputs.GetSegmentGroupApplicationServerGroupResult> serverGroups,

            ImmutableArray<string> tcpPortRanges,

            ImmutableArray<string> tcpPortsIns,

            ImmutableArray<string> tcpPortsOuts,

            ImmutableArray<string> udpPortRanges)
        {
            BypassType = bypassType;
            ConfigSpace = configSpace;
            CreationTime = creationTime;
            DefaultIdleTimeout = defaultIdleTimeout;
            DefaultMaxAge = defaultMaxAge;
            Description = description;
            DomainName = domainName;
            DomainNames = domainNames;
            DoubleEncrypt = doubleEncrypt;
            Enabled = enabled;
            HealthCheckType = healthCheckType;
            Id = id;
            IpAnchored = ipAnchored;
            LogFeatures = logFeatures;
            ModifiedBy = modifiedBy;
            ModifiedTime = modifiedTime;
            Name = name;
            PassiveHealthEnabled = passiveHealthEnabled;
            ServerGroups = serverGroups;
            TcpPortRanges = tcpPortRanges;
            TcpPortsIns = tcpPortsIns;
            TcpPortsOuts = tcpPortsOuts;
            UdpPortRanges = udpPortRanges;
        }
    }
}
