# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSCIMGroupsResult',
    'AwaitableGetSCIMGroupsResult',
    'get_scim_groups',
    'get_scim_groups_output',
]

@pulumi.output_type
class GetSCIMGroupsResult:
    """
    A collection of values returned by getSCIMGroups.
    """
    def __init__(__self__, creation_time=None, id=None, idp_group_id=None, idp_id=None, idp_name=None, modified_time=None, name=None):
        if creation_time and not isinstance(creation_time, int):
            raise TypeError("Expected argument 'creation_time' to be a int")
        pulumi.set(__self__, "creation_time", creation_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_group_id and not isinstance(idp_group_id, str):
            raise TypeError("Expected argument 'idp_group_id' to be a str")
        pulumi.set(__self__, "idp_group_id", idp_group_id)
        if idp_id and not isinstance(idp_id, int):
            raise TypeError("Expected argument 'idp_id' to be a int")
        pulumi.set(__self__, "idp_id", idp_id)
        if idp_name and not isinstance(idp_name, str):
            raise TypeError("Expected argument 'idp_name' to be a str")
        pulumi.set(__self__, "idp_name", idp_name)
        if modified_time and not isinstance(modified_time, int):
            raise TypeError("Expected argument 'modified_time' to be a int")
        pulumi.set(__self__, "modified_time", modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> int:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpGroupId")
    def idp_group_id(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "idp_group_id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[int]:
        """
        (string) The ID of the IdP corresponding to the SAML attribute.
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter(name="idpName")
    def idp_name(self) -> Optional[str]:
        return pulumi.get(self, "idp_name")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


class AwaitableGetSCIMGroupsResult(GetSCIMGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSCIMGroupsResult(
            creation_time=self.creation_time,
            id=self.id,
            idp_group_id=self.idp_group_id,
            idp_id=self.idp_id,
            idp_name=self.idp_name,
            modified_time=self.modified_time,
            name=self.name)


def get_scim_groups(id: Optional[str] = None,
                    idp_id: Optional[int] = None,
                    idp_name: Optional[str] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSCIMGroupsResult:
    """
    Use the **zpa_scim_groups** data source to get information about a SCIM Group from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    engineering = zpa.get_scim_groups(idp_name="idp_name",
        name="Engineering")
    ```
    <!--End PulumiCodeChooser -->


    :param int idp_id: (string) The ID of the IdP corresponding to the SAML attribute.
    :param str idp_name: Name. The name of the IdP where the scim group must be exported from.
    :param str name: Name. The name of the scim group to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['idpId'] = idp_id
    __args__['idpName'] = idp_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getSCIMGroups:getSCIMGroups', __args__, opts=opts, typ=GetSCIMGroupsResult).value

    return AwaitableGetSCIMGroupsResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        id=pulumi.get(__ret__, 'id'),
        idp_group_id=pulumi.get(__ret__, 'idp_group_id'),
        idp_id=pulumi.get(__ret__, 'idp_id'),
        idp_name=pulumi.get(__ret__, 'idp_name'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_scim_groups)
def get_scim_groups_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                           idp_id: Optional[pulumi.Input[Optional[int]]] = None,
                           idp_name: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSCIMGroupsResult]:
    """
    Use the **zpa_scim_groups** data source to get information about a SCIM Group from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    engineering = zpa.get_scim_groups(idp_name="idp_name",
        name="Engineering")
    ```
    <!--End PulumiCodeChooser -->


    :param int idp_id: (string) The ID of the IdP corresponding to the SAML attribute.
    :param str idp_name: Name. The name of the IdP where the scim group must be exported from.
    :param str name: Name. The name of the scim group to be exported.
    """
    ...
