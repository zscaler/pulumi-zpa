# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudConnectorGroupResult',
    'AwaitableGetCloudConnectorGroupResult',
    'get_cloud_connector_group',
    'get_cloud_connector_group_output',
]

@pulumi.output_type
class GetCloudConnectorGroupResult:
    """
    A collection of values returned by getCloudConnectorGroup.
    """
    def __init__(__self__, cloud_connectors=None, creation_time=None, description=None, enabled=None, geolocation_id=None, id=None, modified_time=None, modifiedby=None, name=None, zia_cloud=None, zia_org_id=None):
        if cloud_connectors and not isinstance(cloud_connectors, list):
            raise TypeError("Expected argument 'cloud_connectors' to be a list")
        pulumi.set(__self__, "cloud_connectors", cloud_connectors)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if geolocation_id and not isinstance(geolocation_id, str):
            raise TypeError("Expected argument 'geolocation_id' to be a str")
        pulumi.set(__self__, "geolocation_id", geolocation_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if zia_cloud and not isinstance(zia_cloud, str):
            raise TypeError("Expected argument 'zia_cloud' to be a str")
        pulumi.set(__self__, "zia_cloud", zia_cloud)
        if zia_org_id and not isinstance(zia_org_id, str):
            raise TypeError("Expected argument 'zia_org_id' to be a str")
        pulumi.set(__self__, "zia_org_id", zia_org_id)

    @property
    @pulumi.getter(name="cloudConnectors")
    def cloud_connectors(self) -> Sequence['outputs.GetCloudConnectorGroupCloudConnectorResult']:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "cloud_connectors")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geolocationId")
    def geolocation_id(self) -> str:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "geolocation_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (string) - This field defines the name of the cloud connector group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ziaCloud")
    def zia_cloud(self) -> str:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "zia_cloud")

    @property
    @pulumi.getter(name="ziaOrgId")
    def zia_org_id(self) -> str:
        """
        (string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.
        """
        return pulumi.get(self, "zia_org_id")


class AwaitableGetCloudConnectorGroupResult(GetCloudConnectorGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudConnectorGroupResult(
            cloud_connectors=self.cloud_connectors,
            creation_time=self.creation_time,
            description=self.description,
            enabled=self.enabled,
            geolocation_id=self.geolocation_id,
            id=self.id,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            zia_cloud=self.zia_cloud,
            zia_org_id=self.zia_org_id)


def get_cloud_connector_group(id: Optional[str] = None,
                              name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudConnectorGroupResult:
    """
    Use the **zpa_cloud_connector_group** data source to get information about a cloud connector group created from the Zscaler Private Access cloud. This data source can then be referenced within an Access Policy rule

    > **NOTE:** A Cloud Connector Group resource is created in the Zscaler Cloud Connector cloud and replicated to the ZPA cloud. This resource can then be referenced in a Access Policy Rule where the Object Type = `CLOUD_CONNECTOR_GROUP` is being used.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_cloud_connector_group(name="AWS-Cloud")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_cloud_connector_group(id="1234567890")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: This field defines the id of the cloud connector group.
    :param str name: This field defines the name of the cloud connector group.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getCloudConnectorGroup:getCloudConnectorGroup', __args__, opts=opts, typ=GetCloudConnectorGroupResult).value

    return AwaitableGetCloudConnectorGroupResult(
        cloud_connectors=pulumi.get(__ret__, 'cloud_connectors'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        geolocation_id=pulumi.get(__ret__, 'geolocation_id'),
        id=pulumi.get(__ret__, 'id'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        name=pulumi.get(__ret__, 'name'),
        zia_cloud=pulumi.get(__ret__, 'zia_cloud'),
        zia_org_id=pulumi.get(__ret__, 'zia_org_id'))


@_utilities.lift_output_func(get_cloud_connector_group)
def get_cloud_connector_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                     name: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudConnectorGroupResult]:
    """
    Use the **zpa_cloud_connector_group** data source to get information about a cloud connector group created from the Zscaler Private Access cloud. This data source can then be referenced within an Access Policy rule

    > **NOTE:** A Cloud Connector Group resource is created in the Zscaler Cloud Connector cloud and replicated to the ZPA cloud. This resource can then be referenced in a Access Policy Rule where the Object Type = `CLOUD_CONNECTOR_GROUP` is being used.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_cloud_connector_group(name="AWS-Cloud")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_cloud_connector_group(id="1234567890")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: This field defines the id of the cloud connector group.
    :param str name: This field defines the name of the cloud connector group.
    """
    ...
