# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSCIMAttributeHeaderResult',
    'AwaitableGetSCIMAttributeHeaderResult',
    'get_scim_attribute_header',
    'get_scim_attribute_header_output',
]

@pulumi.output_type
class GetSCIMAttributeHeaderResult:
    """
    A collection of values returned by getSCIMAttributeHeader.
    """
    def __init__(__self__, canonical_values=None, case_sensitive=None, creation_time=None, data_type=None, description=None, id=None, idp_id=None, idp_name=None, modified_time=None, modifiedby=None, multivalued=None, mutability=None, name=None, required=None, returned=None, schema_uri=None, uniqueness=None, values=None):
        if canonical_values and not isinstance(canonical_values, list):
            raise TypeError("Expected argument 'canonical_values' to be a list")
        pulumi.set(__self__, "canonical_values", canonical_values)
        if case_sensitive and not isinstance(case_sensitive, bool):
            raise TypeError("Expected argument 'case_sensitive' to be a bool")
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if data_type and not isinstance(data_type, str):
            raise TypeError("Expected argument 'data_type' to be a str")
        pulumi.set(__self__, "data_type", data_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_id and not isinstance(idp_id, str):
            raise TypeError("Expected argument 'idp_id' to be a str")
        pulumi.set(__self__, "idp_id", idp_id)
        if idp_name and not isinstance(idp_name, str):
            raise TypeError("Expected argument 'idp_name' to be a str")
        pulumi.set(__self__, "idp_name", idp_name)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if multivalued and not isinstance(multivalued, bool):
            raise TypeError("Expected argument 'multivalued' to be a bool")
        pulumi.set(__self__, "multivalued", multivalued)
        if mutability and not isinstance(mutability, str):
            raise TypeError("Expected argument 'mutability' to be a str")
        pulumi.set(__self__, "mutability", mutability)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if returned and not isinstance(returned, str):
            raise TypeError("Expected argument 'returned' to be a str")
        pulumi.set(__self__, "returned", returned)
        if schema_uri and not isinstance(schema_uri, str):
            raise TypeError("Expected argument 'schema_uri' to be a str")
        pulumi.set(__self__, "schema_uri", schema_uri)
        if uniqueness and not isinstance(uniqueness, bool):
            raise TypeError("Expected argument 'uniqueness' to be a bool")
        pulumi.set(__self__, "uniqueness", uniqueness)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="canonicalValues")
    def canonical_values(self) -> Sequence[str]:
        """
        (string)
        """
        return pulumi.get(self, "canonical_values")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[str]:
        """
        (string) The ID of the IdP corresponding to the SAML attribute.
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter(name="idpName")
    def idp_name(self) -> Optional[str]:
        return pulumi.get(self, "idp_name")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def multivalued(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "multivalued")

    @property
    @pulumi.getter
    def mutability(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "mutability")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def returned(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "returned")

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "schema_uri")

    @property
    @pulumi.getter
    def uniqueness(self) -> bool:
        """
        (bool)
        """
        return pulumi.get(self, "uniqueness")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


class AwaitableGetSCIMAttributeHeaderResult(GetSCIMAttributeHeaderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSCIMAttributeHeaderResult(
            canonical_values=self.canonical_values,
            case_sensitive=self.case_sensitive,
            creation_time=self.creation_time,
            data_type=self.data_type,
            description=self.description,
            id=self.id,
            idp_id=self.idp_id,
            idp_name=self.idp_name,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            multivalued=self.multivalued,
            mutability=self.mutability,
            name=self.name,
            required=self.required,
            returned=self.returned,
            schema_uri=self.schema_uri,
            uniqueness=self.uniqueness,
            values=self.values)


def get_scim_attribute_header(idp_id: Optional[str] = None,
                              idp_name: Optional[str] = None,
                              name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSCIMAttributeHeaderResult:
    """
    Use the **zpa_scim_attribute_header** data source to get information about a SCIM attribute from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Inspection Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    given_name = zpa.get_scim_attribute_header(idp_name="IdP_Name",
        name="name.givenName")
    family_name = zpa.get_scim_attribute_header(idp_name="IdP_Name",
        name="name.familyName")
    ```
    <!--End PulumiCodeChooser -->


    :param str idp_id: (string) The ID of the IdP corresponding to the SAML attribute.
    :param str idp_name: The name of the scim attribute header that must be exported.
    :param str name: The name of the scim attribute header to be exported.
    """
    __args__ = dict()
    __args__['idpId'] = idp_id
    __args__['idpName'] = idp_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getSCIMAttributeHeader:getSCIMAttributeHeader', __args__, opts=opts, typ=GetSCIMAttributeHeaderResult).value

    return AwaitableGetSCIMAttributeHeaderResult(
        canonical_values=pulumi.get(__ret__, 'canonical_values'),
        case_sensitive=pulumi.get(__ret__, 'case_sensitive'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        data_type=pulumi.get(__ret__, 'data_type'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        idp_id=pulumi.get(__ret__, 'idp_id'),
        idp_name=pulumi.get(__ret__, 'idp_name'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        multivalued=pulumi.get(__ret__, 'multivalued'),
        mutability=pulumi.get(__ret__, 'mutability'),
        name=pulumi.get(__ret__, 'name'),
        required=pulumi.get(__ret__, 'required'),
        returned=pulumi.get(__ret__, 'returned'),
        schema_uri=pulumi.get(__ret__, 'schema_uri'),
        uniqueness=pulumi.get(__ret__, 'uniqueness'),
        values=pulumi.get(__ret__, 'values'))


@_utilities.lift_output_func(get_scim_attribute_header)
def get_scim_attribute_header_output(idp_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     idp_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     name: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSCIMAttributeHeaderResult]:
    """
    Use the **zpa_scim_attribute_header** data source to get information about a SCIM attribute from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Inspection Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    given_name = zpa.get_scim_attribute_header(idp_name="IdP_Name",
        name="name.givenName")
    family_name = zpa.get_scim_attribute_header(idp_name="IdP_Name",
        name="name.familyName")
    ```
    <!--End PulumiCodeChooser -->


    :param str idp_id: (string) The ID of the IdP corresponding to the SAML attribute.
    :param str idp_name: The name of the scim attribute header that must be exported.
    :param str name: The name of the scim attribute header to be exported.
    """
    ...
