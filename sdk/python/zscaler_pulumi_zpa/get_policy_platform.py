# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPolicyPlatformResult',
    'AwaitableGetPolicyPlatformResult',
    'get_policy_platform',
    'get_policy_platform_output',
]

@pulumi.output_type
class GetPolicyPlatformResult:
    """
    A collection of values returned by getPolicyPlatform.
    """
    def __init__(__self__, android=None, id=None, ios=None, linux=None, mac=None, windows=None):
        if android and not isinstance(android, str):
            raise TypeError("Expected argument 'android' to be a str")
        pulumi.set(__self__, "android", android)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ios and not isinstance(ios, str):
            raise TypeError("Expected argument 'ios' to be a str")
        pulumi.set(__self__, "ios", ios)
        if linux and not isinstance(linux, str):
            raise TypeError("Expected argument 'linux' to be a str")
        pulumi.set(__self__, "linux", linux)
        if mac and not isinstance(mac, str):
            raise TypeError("Expected argument 'mac' to be a str")
        pulumi.set(__self__, "mac", mac)
        if windows and not isinstance(windows, str):
            raise TypeError("Expected argument 'windows' to be a str")
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def android(self) -> str:
        return pulumi.get(self, "android")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ios(self) -> str:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def linux(self) -> str:
        return pulumi.get(self, "linux")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def windows(self) -> str:
        return pulumi.get(self, "windows")


class AwaitableGetPolicyPlatformResult(GetPolicyPlatformResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyPlatformResult(
            android=self.android,
            id=self.id,
            ios=self.ios,
            linux=self.linux,
            mac=self.mac,
            windows=self.windows)


def get_policy_platform(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyPlatformResult:
    """
    Use the **zpa_access_policy_platforms** data source to get information about all platforms for the specified customer in the Zscaler Private Access cloud. This data source can be optionally used when defining the following policy types:
        - ``PolicyAccessRule``
        - ``PolicyAccessTimeOutRule``
        - ``PolicyAccessForwardingRule``
        - ``PolicyAccessIsolationRule``
        - ``PolicyAccessInspectionRule``

    The ``object_type`` attribute must be defined as "PLATFORM" in the policy operand condition. To learn more see the To learn more see the [Getting Platform Types for a Customer](https://help.zscaler.com/zpa/configuring-access-policies-using-api#getPlatformTypes)

    > **NOTE** By Default the ZPA provider will return all platform types

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_policy_platform()
    ```
    <!--End PulumiCodeChooser -->
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getPolicyPlatform:getPolicyPlatform', __args__, opts=opts, typ=GetPolicyPlatformResult).value

    return AwaitableGetPolicyPlatformResult(
        android=pulumi.get(__ret__, 'android'),
        id=pulumi.get(__ret__, 'id'),
        ios=pulumi.get(__ret__, 'ios'),
        linux=pulumi.get(__ret__, 'linux'),
        mac=pulumi.get(__ret__, 'mac'),
        windows=pulumi.get(__ret__, 'windows'))


@_utilities.lift_output_func(get_policy_platform)
def get_policy_platform_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyPlatformResult]:
    """
    Use the **zpa_access_policy_platforms** data source to get information about all platforms for the specified customer in the Zscaler Private Access cloud. This data source can be optionally used when defining the following policy types:
        - ``PolicyAccessRule``
        - ``PolicyAccessTimeOutRule``
        - ``PolicyAccessForwardingRule``
        - ``PolicyAccessIsolationRule``
        - ``PolicyAccessInspectionRule``

    The ``object_type`` attribute must be defined as "PLATFORM" in the policy operand condition. To learn more see the To learn more see the [Getting Platform Types for a Customer](https://help.zscaler.com/zpa/configuring-access-policies-using-api#getPlatformTypes)

    > **NOTE** By Default the ZPA provider will return all platform types

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_policy_platform()
    ```
    <!--End PulumiCodeChooser -->
    """
    ...
