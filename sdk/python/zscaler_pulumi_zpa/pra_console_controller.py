# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PraConsoleControllerArgs', 'PraConsoleController']

@pulumi.input_type
class PraConsoleControllerArgs:
    def __init__(__self__, *,
                 pra_application: pulumi.Input['PraConsoleControllerPraApplicationArgs'],
                 pra_portals: pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon_text: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PraConsoleController resource.
        :param pulumi.Input[str] description: The description of the privileged console
        :param pulumi.Input[bool] enabled: Whether or not the privileged console is enabled
        :param pulumi.Input[str] icon_text: The privileged console icon. The icon image is converted to base64 encoded text format
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged console
        """
        pulumi.set(__self__, "pra_application", pra_application)
        pulumi.set(__self__, "pra_portals", pra_portals)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icon_text is not None:
            pulumi.set(__self__, "icon_text", icon_text)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="praApplication")
    def pra_application(self) -> pulumi.Input['PraConsoleControllerPraApplicationArgs']:
        return pulumi.get(self, "pra_application")

    @pra_application.setter
    def pra_application(self, value: pulumi.Input['PraConsoleControllerPraApplicationArgs']):
        pulumi.set(self, "pra_application", value)

    @property
    @pulumi.getter(name="praPortals")
    def pra_portals(self) -> pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]]:
        return pulumi.get(self, "pra_portals")

    @pra_portals.setter
    def pra_portals(self, value: pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]]):
        pulumi.set(self, "pra_portals", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged console
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the privileged console is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="iconText")
    def icon_text(self) -> Optional[pulumi.Input[str]]:
        """
        The privileged console icon. The icon image is converted to base64 encoded text format
        """
        return pulumi.get(self, "icon_text")

    @icon_text.setter
    def icon_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_text", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged console
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PraConsoleControllerState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon_text: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pra_application: Optional[pulumi.Input['PraConsoleControllerPraApplicationArgs']] = None,
                 pra_portals: Optional[pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]]] = None):
        """
        Input properties used for looking up and filtering PraConsoleController resources.
        :param pulumi.Input[str] description: The description of the privileged console
        :param pulumi.Input[bool] enabled: Whether or not the privileged console is enabled
        :param pulumi.Input[str] icon_text: The privileged console icon. The icon image is converted to base64 encoded text format
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged console
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icon_text is not None:
            pulumi.set(__self__, "icon_text", icon_text)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pra_application is not None:
            pulumi.set(__self__, "pra_application", pra_application)
        if pra_portals is not None:
            pulumi.set(__self__, "pra_portals", pra_portals)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged console
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the privileged console is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="iconText")
    def icon_text(self) -> Optional[pulumi.Input[str]]:
        """
        The privileged console icon. The icon image is converted to base64 encoded text format
        """
        return pulumi.get(self, "icon_text")

    @icon_text.setter
    def icon_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_text", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged console
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="praApplication")
    def pra_application(self) -> Optional[pulumi.Input['PraConsoleControllerPraApplicationArgs']]:
        return pulumi.get(self, "pra_application")

    @pra_application.setter
    def pra_application(self, value: Optional[pulumi.Input['PraConsoleControllerPraApplicationArgs']]):
        pulumi.set(self, "pra_application", value)

    @property
    @pulumi.getter(name="praPortals")
    def pra_portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]]]:
        return pulumi.get(self, "pra_portals")

    @pra_portals.setter
    def pra_portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraConsoleControllerPraPortalArgs']]]]):
        pulumi.set(self, "pra_portals", value)


warnings.warn("""zpa.index/praconsolecontroller.PraConsoleController has been deprecated in favor of zpa.index/praconsole.PRAConsole""", DeprecationWarning)


class PraConsoleController(pulumi.CustomResource):
    warnings.warn("""zpa.index/praconsolecontroller.PraConsoleController has been deprecated in favor of zpa.index/praconsole.PRAConsole""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon_text: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pra_application: Optional[pulumi.Input[pulumi.InputType['PraConsoleControllerPraApplicationArgs']]] = None,
                 pra_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraConsoleControllerPraPortalArgs']]]]] = None,
                 __props__=None):
        """
        Create a PraConsoleController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the privileged console
        :param pulumi.Input[bool] enabled: Whether or not the privileged console is enabled
        :param pulumi.Input[str] icon_text: The privileged console icon. The icon image is converted to base64 encoded text format
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged console
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PraConsoleControllerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PraConsoleController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PraConsoleControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PraConsoleControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon_text: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pra_application: Optional[pulumi.Input[pulumi.InputType['PraConsoleControllerPraApplicationArgs']]] = None,
                 pra_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraConsoleControllerPraPortalArgs']]]]] = None,
                 __props__=None):
        pulumi.log.warn("""PraConsoleController is deprecated: zpa.index/praconsolecontroller.PraConsoleController has been deprecated in favor of zpa.index/praconsole.PRAConsole""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PraConsoleControllerArgs.__new__(PraConsoleControllerArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["icon_text"] = icon_text
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
            if pra_application is None and not opts.urn:
                raise TypeError("Missing required property 'pra_application'")
            __props__.__dict__["pra_application"] = pra_application
            if pra_portals is None and not opts.urn:
                raise TypeError("Missing required property 'pra_portals'")
            __props__.__dict__["pra_portals"] = pra_portals
        super(PraConsoleController, __self__).__init__(
            'zpa:index/praConsoleController:PraConsoleController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            icon_text: Optional[pulumi.Input[str]] = None,
            microtenant_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pra_application: Optional[pulumi.Input[pulumi.InputType['PraConsoleControllerPraApplicationArgs']]] = None,
            pra_portals: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraConsoleControllerPraPortalArgs']]]]] = None) -> 'PraConsoleController':
        """
        Get an existing PraConsoleController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the privileged console
        :param pulumi.Input[bool] enabled: Whether or not the privileged console is enabled
        :param pulumi.Input[str] icon_text: The privileged console icon. The icon image is converted to base64 encoded text format
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged console
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PraConsoleControllerState.__new__(_PraConsoleControllerState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["icon_text"] = icon_text
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["pra_application"] = pra_application
        __props__.__dict__["pra_portals"] = pra_portals
        return PraConsoleController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the privileged console
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether or not the privileged console is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="iconText")
    def icon_text(self) -> pulumi.Output[str]:
        """
        The privileged console icon. The icon image is converted to base64 encoded text format
        """
        return pulumi.get(self, "icon_text")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[str]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the privileged console
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="praApplication")
    def pra_application(self) -> pulumi.Output['outputs.PraConsoleControllerPraApplication']:
        return pulumi.get(self, "pra_application")

    @property
    @pulumi.getter(name="praPortals")
    def pra_portals(self) -> pulumi.Output[Sequence['outputs.PraConsoleControllerPraPortal']]:
        return pulumi.get(self, "pra_portals")

