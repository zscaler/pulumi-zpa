# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CloudBrowserIsolationBannerArgs', 'CloudBrowserIsolationBanner']

@pulumi.input_type
class CloudBrowserIsolationBannerArgs:
    def __init__(__self__, *,
                 banner: Optional[pulumi.Input[bool]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_text: Optional[pulumi.Input[str]] = None,
                 notification_title: Optional[pulumi.Input[str]] = None,
                 persist: Optional[pulumi.Input[bool]] = None,
                 primary_color: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudBrowserIsolationBanner resource.
        """
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_text is not None:
            pulumi.set(__self__, "notification_text", notification_text)
        if notification_title is not None:
            pulumi.set(__self__, "notification_title", notification_title)
        if persist is not None:
            pulumi.set(__self__, "persist", persist)
        if primary_color is not None:
            pulumi.set(__self__, "primary_color", primary_color)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationText")
    def notification_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_text")

    @notification_text.setter
    def notification_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_text", value)

    @property
    @pulumi.getter(name="notificationTitle")
    def notification_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_title")

    @notification_title.setter
    def notification_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_title", value)

    @property
    @pulumi.getter
    def persist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "persist")

    @persist.setter
    def persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist", value)

    @property
    @pulumi.getter(name="primaryColor")
    def primary_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_color")

    @primary_color.setter
    def primary_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class _CloudBrowserIsolationBannerState:
    def __init__(__self__, *,
                 banner: Optional[pulumi.Input[bool]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_text: Optional[pulumi.Input[str]] = None,
                 notification_title: Optional[pulumi.Input[str]] = None,
                 persist: Optional[pulumi.Input[bool]] = None,
                 primary_color: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudBrowserIsolationBanner resources.
        """
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_text is not None:
            pulumi.set(__self__, "notification_text", notification_text)
        if notification_title is not None:
            pulumi.set(__self__, "notification_title", notification_title)
        if persist is not None:
            pulumi.set(__self__, "persist", persist)
        if primary_color is not None:
            pulumi.set(__self__, "primary_color", primary_color)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationText")
    def notification_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_text")

    @notification_text.setter
    def notification_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_text", value)

    @property
    @pulumi.getter(name="notificationTitle")
    def notification_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_title")

    @notification_title.setter
    def notification_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_title", value)

    @property
    @pulumi.getter
    def persist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "persist")

    @persist.setter
    def persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist", value)

    @property
    @pulumi.getter(name="primaryColor")
    def primary_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_color")

    @primary_color.setter
    def primary_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


class CloudBrowserIsolationBanner(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 banner: Optional[pulumi.Input[bool]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_text: Optional[pulumi.Input[str]] = None,
                 notification_title: Optional[pulumi.Input[str]] = None,
                 persist: Optional[pulumi.Input[bool]] = None,
                 primary_color: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/isolation/adding-banner-theme-isolation-end-user-notification-zpa)

        The **zpa_cloud_browser_isolation_banner** resource creates a Cloud Browser Isolation banner. This resource is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``CloudBrowserIsolationExternalProfile``

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Application Segment can be imported by using `<BANNER ID>` or `<BANNER NAME>` as the import ID.

        ```sh
        $ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example <banner_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example <banner_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudBrowserIsolationBannerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/isolation/adding-banner-theme-isolation-end-user-notification-zpa)

        The **zpa_cloud_browser_isolation_banner** resource creates a Cloud Browser Isolation banner. This resource is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``CloudBrowserIsolationExternalProfile``

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Application Segment can be imported by using `<BANNER ID>` or `<BANNER NAME>` as the import ID.

        ```sh
        $ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example <banner_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example <banner_name>
        ```

        :param str resource_name: The name of the resource.
        :param CloudBrowserIsolationBannerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudBrowserIsolationBannerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 banner: Optional[pulumi.Input[bool]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_text: Optional[pulumi.Input[str]] = None,
                 notification_title: Optional[pulumi.Input[str]] = None,
                 persist: Optional[pulumi.Input[bool]] = None,
                 primary_color: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudBrowserIsolationBannerArgs.__new__(CloudBrowserIsolationBannerArgs)

            __props__.__dict__["banner"] = banner
            __props__.__dict__["logo"] = logo
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_text"] = notification_text
            __props__.__dict__["notification_title"] = notification_title
            __props__.__dict__["persist"] = persist
            __props__.__dict__["primary_color"] = primary_color
            __props__.__dict__["text_color"] = text_color
        super(CloudBrowserIsolationBanner, __self__).__init__(
            'zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            banner: Optional[pulumi.Input[bool]] = None,
            logo: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_text: Optional[pulumi.Input[str]] = None,
            notification_title: Optional[pulumi.Input[str]] = None,
            persist: Optional[pulumi.Input[bool]] = None,
            primary_color: Optional[pulumi.Input[str]] = None,
            text_color: Optional[pulumi.Input[str]] = None) -> 'CloudBrowserIsolationBanner':
        """
        Get an existing CloudBrowserIsolationBanner resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudBrowserIsolationBannerState.__new__(_CloudBrowserIsolationBannerState)

        __props__.__dict__["banner"] = banner
        __props__.__dict__["logo"] = logo
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_text"] = notification_text
        __props__.__dict__["notification_title"] = notification_title
        __props__.__dict__["persist"] = persist
        __props__.__dict__["primary_color"] = primary_color
        __props__.__dict__["text_color"] = text_color
        return CloudBrowserIsolationBanner(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def banner(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "banner")

    @property
    @pulumi.getter
    def logo(self) -> pulumi.Output[str]:
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationText")
    def notification_text(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notification_text")

    @property
    @pulumi.getter(name="notificationTitle")
    def notification_title(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notification_title")

    @property
    @pulumi.getter
    def persist(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "persist")

    @property
    @pulumi.getter(name="primaryColor")
    def primary_color(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "primary_color")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "text_color")

