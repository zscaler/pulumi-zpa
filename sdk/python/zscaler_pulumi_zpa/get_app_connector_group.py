# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConnectorGroupResult',
    'AwaitableGetAppConnectorGroupResult',
    'get_app_connector_group',
    'get_app_connector_group_output',
]

@pulumi.output_type
class GetAppConnectorGroupResult:
    """
    A collection of values returned by getAppConnectorGroup.
    """
    def __init__(__self__, city_country=None, connectors=None, country_code=None, creation_time=None, description=None, dns_query_type=None, enabled=None, geo_location_id=None, id=None, latitude=None, location=None, longitude=None, lss_app_connector_group=None, microtenant_id=None, microtenant_name=None, modified_time=None, modifiedby=None, name=None, override_version_profile=None, server_groups=None, tcp_quick_ack_app=None, tcp_quick_ack_assistant=None, tcp_quick_ack_read_assistant=None, upgrade_day=None, upgrade_time_in_secs=None, use_in_dr_mode=None, version_profile_id=None, version_profile_name=None, version_profile_visibility_scope=None):
        if city_country and not isinstance(city_country, str):
            raise TypeError("Expected argument 'city_country' to be a str")
        pulumi.set(__self__, "city_country", city_country)
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if country_code and not isinstance(country_code, str):
            raise TypeError("Expected argument 'country_code' to be a str")
        pulumi.set(__self__, "country_code", country_code)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns_query_type and not isinstance(dns_query_type, str):
            raise TypeError("Expected argument 'dns_query_type' to be a str")
        pulumi.set(__self__, "dns_query_type", dns_query_type)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if geo_location_id and not isinstance(geo_location_id, str):
            raise TypeError("Expected argument 'geo_location_id' to be a str")
        pulumi.set(__self__, "geo_location_id", geo_location_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latitude and not isinstance(latitude, str):
            raise TypeError("Expected argument 'latitude' to be a str")
        pulumi.set(__self__, "latitude", latitude)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if longitude and not isinstance(longitude, str):
            raise TypeError("Expected argument 'longitude' to be a str")
        pulumi.set(__self__, "longitude", longitude)
        if lss_app_connector_group and not isinstance(lss_app_connector_group, bool):
            raise TypeError("Expected argument 'lss_app_connector_group' to be a bool")
        pulumi.set(__self__, "lss_app_connector_group", lss_app_connector_group)
        if microtenant_id and not isinstance(microtenant_id, str):
            raise TypeError("Expected argument 'microtenant_id' to be a str")
        pulumi.set(__self__, "microtenant_id", microtenant_id)
        if microtenant_name and not isinstance(microtenant_name, str):
            raise TypeError("Expected argument 'microtenant_name' to be a str")
        pulumi.set(__self__, "microtenant_name", microtenant_name)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if override_version_profile and not isinstance(override_version_profile, bool):
            raise TypeError("Expected argument 'override_version_profile' to be a bool")
        pulumi.set(__self__, "override_version_profile", override_version_profile)
        if server_groups and not isinstance(server_groups, list):
            raise TypeError("Expected argument 'server_groups' to be a list")
        pulumi.set(__self__, "server_groups", server_groups)
        if tcp_quick_ack_app and not isinstance(tcp_quick_ack_app, bool):
            raise TypeError("Expected argument 'tcp_quick_ack_app' to be a bool")
        pulumi.set(__self__, "tcp_quick_ack_app", tcp_quick_ack_app)
        if tcp_quick_ack_assistant and not isinstance(tcp_quick_ack_assistant, bool):
            raise TypeError("Expected argument 'tcp_quick_ack_assistant' to be a bool")
        pulumi.set(__self__, "tcp_quick_ack_assistant", tcp_quick_ack_assistant)
        if tcp_quick_ack_read_assistant and not isinstance(tcp_quick_ack_read_assistant, bool):
            raise TypeError("Expected argument 'tcp_quick_ack_read_assistant' to be a bool")
        pulumi.set(__self__, "tcp_quick_ack_read_assistant", tcp_quick_ack_read_assistant)
        if upgrade_day and not isinstance(upgrade_day, str):
            raise TypeError("Expected argument 'upgrade_day' to be a str")
        pulumi.set(__self__, "upgrade_day", upgrade_day)
        if upgrade_time_in_secs and not isinstance(upgrade_time_in_secs, str):
            raise TypeError("Expected argument 'upgrade_time_in_secs' to be a str")
        pulumi.set(__self__, "upgrade_time_in_secs", upgrade_time_in_secs)
        if use_in_dr_mode and not isinstance(use_in_dr_mode, bool):
            raise TypeError("Expected argument 'use_in_dr_mode' to be a bool")
        pulumi.set(__self__, "use_in_dr_mode", use_in_dr_mode)
        if version_profile_id and not isinstance(version_profile_id, str):
            raise TypeError("Expected argument 'version_profile_id' to be a str")
        pulumi.set(__self__, "version_profile_id", version_profile_id)
        if version_profile_name and not isinstance(version_profile_name, str):
            raise TypeError("Expected argument 'version_profile_name' to be a str")
        pulumi.set(__self__, "version_profile_name", version_profile_name)
        if version_profile_visibility_scope and not isinstance(version_profile_visibility_scope, str):
            raise TypeError("Expected argument 'version_profile_visibility_scope' to be a str")
        pulumi.set(__self__, "version_profile_visibility_scope", version_profile_visibility_scope)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> str:
        """
        (String) Whether Double Encryption is enabled or disabled for the app.
        """
        return pulumi.get(self, "city_country")

    @property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetAppConnectorGroupConnectorResult']:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String) Description of the App Connector Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "dns_query_type")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        (String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geoLocationId")
    def geo_location_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "geo_location_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> str:
        """
        (String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        (String) Location of the App Connector Group.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> str:
        """
        (String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="lssAppConnectorGroup")
    def lss_app_connector_group(self) -> bool:
        return pulumi.get(self, "lss_app_connector_group")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[str]:
        """
        (string) The ID of the microtenant the resource is to be associated with.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="microtenantName")
    def microtenant_name(self) -> Optional[str]:
        """
        (string) The name of the microtenant the resource is to be associated with.
        """
        return pulumi.get(self, "microtenant_name")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideVersionProfile")
    def override_version_profile(self) -> Optional[bool]:
        """
        (bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        """
        return pulumi.get(self, "override_version_profile")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetAppConnectorGroupServerGroupResult']:
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="tcpQuickAckApp")
    def tcp_quick_ack_app(self) -> bool:
        return pulumi.get(self, "tcp_quick_ack_app")

    @property
    @pulumi.getter(name="tcpQuickAckAssistant")
    def tcp_quick_ack_assistant(self) -> bool:
        return pulumi.get(self, "tcp_quick_ack_assistant")

    @property
    @pulumi.getter(name="tcpQuickAckReadAssistant")
    def tcp_quick_ack_read_assistant(self) -> bool:
        return pulumi.get(self, "tcp_quick_ack_read_assistant")

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> str:
        """
        (String) App Connectors in this group will attempt to update to a newer version of the software during this specified day
        """
        return pulumi.get(self, "upgrade_day")

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> str:
        """
        (String) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        """
        return pulumi.get(self, "upgrade_time_in_secs")

    @property
    @pulumi.getter(name="useInDrMode")
    def use_in_dr_mode(self) -> bool:
        """
        (Optional) Supported values: `true`, `false`
        """
        return pulumi.get(self, "use_in_dr_mode")

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> str:
        """
        (String) ID of the version profile.
        Exported values are:
        """
        return pulumi.get(self, "version_profile_id")

    @property
    @pulumi.getter(name="versionProfileName")
    def version_profile_name(self) -> str:
        """
        (String)
        Exported values are:
        """
        return pulumi.get(self, "version_profile_name")

    @property
    @pulumi.getter(name="versionProfileVisibilityScope")
    def version_profile_visibility_scope(self) -> str:
        """
        (String)
        Exported values are:
        """
        return pulumi.get(self, "version_profile_visibility_scope")


class AwaitableGetAppConnectorGroupResult(GetAppConnectorGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConnectorGroupResult(
            city_country=self.city_country,
            connectors=self.connectors,
            country_code=self.country_code,
            creation_time=self.creation_time,
            description=self.description,
            dns_query_type=self.dns_query_type,
            enabled=self.enabled,
            geo_location_id=self.geo_location_id,
            id=self.id,
            latitude=self.latitude,
            location=self.location,
            longitude=self.longitude,
            lss_app_connector_group=self.lss_app_connector_group,
            microtenant_id=self.microtenant_id,
            microtenant_name=self.microtenant_name,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            override_version_profile=self.override_version_profile,
            server_groups=self.server_groups,
            tcp_quick_ack_app=self.tcp_quick_ack_app,
            tcp_quick_ack_assistant=self.tcp_quick_ack_assistant,
            tcp_quick_ack_read_assistant=self.tcp_quick_ack_read_assistant,
            upgrade_day=self.upgrade_day,
            upgrade_time_in_secs=self.upgrade_time_in_secs,
            use_in_dr_mode=self.use_in_dr_mode,
            version_profile_id=self.version_profile_id,
            version_profile_name=self.version_profile_name,
            version_profile_visibility_scope=self.version_profile_visibility_scope)


def get_app_connector_group(id: Optional[str] = None,
                            microtenant_id: Optional[str] = None,
                            microtenant_name: Optional[str] = None,
                            name: Optional[str] = None,
                            override_version_profile: Optional[bool] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConnectorGroupResult:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_app_connector_group(name="DataCenter")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_app_connector_group(id="123456789")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: ID of the App Connector Group.
    :param str microtenant_id: (string) The ID of the microtenant the resource is to be associated with.
    :param str microtenant_name: (string) The name of the microtenant the resource is to be associated with.
    :param str name: Name of the App Connector Group.
    :param bool override_version_profile: (bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['microtenantId'] = microtenant_id
    __args__['microtenantName'] = microtenant_name
    __args__['name'] = name
    __args__['overrideVersionProfile'] = override_version_profile
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getAppConnectorGroup:getAppConnectorGroup', __args__, opts=opts, typ=GetAppConnectorGroupResult).value

    return AwaitableGetAppConnectorGroupResult(
        city_country=pulumi.get(__ret__, 'city_country'),
        connectors=pulumi.get(__ret__, 'connectors'),
        country_code=pulumi.get(__ret__, 'country_code'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        dns_query_type=pulumi.get(__ret__, 'dns_query_type'),
        enabled=pulumi.get(__ret__, 'enabled'),
        geo_location_id=pulumi.get(__ret__, 'geo_location_id'),
        id=pulumi.get(__ret__, 'id'),
        latitude=pulumi.get(__ret__, 'latitude'),
        location=pulumi.get(__ret__, 'location'),
        longitude=pulumi.get(__ret__, 'longitude'),
        lss_app_connector_group=pulumi.get(__ret__, 'lss_app_connector_group'),
        microtenant_id=pulumi.get(__ret__, 'microtenant_id'),
        microtenant_name=pulumi.get(__ret__, 'microtenant_name'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        name=pulumi.get(__ret__, 'name'),
        override_version_profile=pulumi.get(__ret__, 'override_version_profile'),
        server_groups=pulumi.get(__ret__, 'server_groups'),
        tcp_quick_ack_app=pulumi.get(__ret__, 'tcp_quick_ack_app'),
        tcp_quick_ack_assistant=pulumi.get(__ret__, 'tcp_quick_ack_assistant'),
        tcp_quick_ack_read_assistant=pulumi.get(__ret__, 'tcp_quick_ack_read_assistant'),
        upgrade_day=pulumi.get(__ret__, 'upgrade_day'),
        upgrade_time_in_secs=pulumi.get(__ret__, 'upgrade_time_in_secs'),
        use_in_dr_mode=pulumi.get(__ret__, 'use_in_dr_mode'),
        version_profile_id=pulumi.get(__ret__, 'version_profile_id'),
        version_profile_name=pulumi.get(__ret__, 'version_profile_name'),
        version_profile_visibility_scope=pulumi.get(__ret__, 'version_profile_visibility_scope'))


@_utilities.lift_output_func(get_app_connector_group)
def get_app_connector_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                   microtenant_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   microtenant_name: Optional[pulumi.Input[Optional[str]]] = None,
                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                   override_version_profile: Optional[pulumi.Input[Optional[bool]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAppConnectorGroupResult]:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_app_connector_group(name="DataCenter")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    foo = zpa.get_app_connector_group(id="123456789")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: ID of the App Connector Group.
    :param str microtenant_id: (string) The ID of the microtenant the resource is to be associated with.
    :param str microtenant_name: (string) The name of the microtenant the resource is to be associated with.
    :param str name: Name of the App Connector Group.
    :param bool override_version_profile: (bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
    """
    ...
