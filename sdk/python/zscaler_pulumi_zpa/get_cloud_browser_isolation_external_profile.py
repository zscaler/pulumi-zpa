# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudBrowserIsolationExternalProfileResult',
    'AwaitableGetCloudBrowserIsolationExternalProfileResult',
    'get_cloud_browser_isolation_external_profile',
    'get_cloud_browser_isolation_external_profile_output',
]

@pulumi.output_type
class GetCloudBrowserIsolationExternalProfileResult:
    """
    A collection of values returned by getCloudBrowserIsolationExternalProfile.
    """
    def __init__(__self__, description=None, href=None, id=None, is_default=None, name=None, regions=None, security_controls=None, user_experiences=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if security_controls and not isinstance(security_controls, list):
            raise TypeError("Expected argument 'security_controls' to be a list")
        pulumi.set(__self__, "security_controls", security_controls)
        if user_experiences and not isinstance(user_experiences, list):
            raise TypeError("Expected argument 'user_experiences' to be a list")
        pulumi.set(__self__, "user_experiences", user_experiences)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (string) - The description of the CBI profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def href(self) -> str:
        """
        (string)
        """
        return pulumi.get(self, "href")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        (bool) - Indicates if the CBI profile is the default one.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetCloudBrowserIsolationExternalProfileRegionResult']:
        """
        (string) List of regions where multi-region deployment is enabled
        * `id:` - (string) Region ID where the profile is applied to
        * `name:` - (string) Region name where the profile is applied to
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="securityControls")
    def security_controls(self) -> Sequence['outputs.GetCloudBrowserIsolationExternalProfileSecurityControlResult']:
        """
        The CBI security controls enabled for the profile
        * `copy_paste:` - (string) Enable or disable copy & paste for local computer to isolation
        * `document_viewer:` - (bool) Enable or disable to view Microsoft Office files in isolation.
        * `local_render:` - (bool) Enables non-isolated hyperlinks to be opened on the user's native browser.
        * `upload_download:` - (string) Enable or disable file transfer from local computer to isolation
        * `allow_printing:` - (bool) Enables the user to print web pages and documents rendered within the isolation browser.
        * `restrict_keystrokes:` - (bool) Prevents keyboard and text input to isolated web pages.
        """
        return pulumi.get(self, "security_controls")

    @property
    @pulumi.getter(name="userExperiences")
    def user_experiences(self) -> Sequence['outputs.GetCloudBrowserIsolationExternalProfileUserExperienceResult']:
        """
        The CBI security controls enabled for the profile
        * `session_persistence:` - (bool) Save user cookies between sessions. If disabled, all cookies will be discarded when isolation session ends.
        * `browser_in_browser:` - (bool) Enable or disable browser-in-browser or native browser experience
        """
        return pulumi.get(self, "user_experiences")


class AwaitableGetCloudBrowserIsolationExternalProfileResult(GetCloudBrowserIsolationExternalProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudBrowserIsolationExternalProfileResult(
            description=self.description,
            href=self.href,
            id=self.id,
            is_default=self.is_default,
            name=self.name,
            regions=self.regions,
            security_controls=self.security_controls,
            user_experiences=self.user_experiences)


def get_cloud_browser_isolation_external_profile(id: Optional[str] = None,
                                                 name: Optional[str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudBrowserIsolationExternalProfileResult:
    """
    Use the **zpa_cloud_browser_isolation_external_profile** data source to get information about Cloud Browser Isolation external profile. This data source information can then be used in as part of `PolicyAccessIsolationRule` when the `action` attribute is set to `ISOLATE`.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_cloud_browser_isolation_external_profile(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the CBI banner to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getCloudBrowserIsolationExternalProfile:getCloudBrowserIsolationExternalProfile', __args__, opts=opts, typ=GetCloudBrowserIsolationExternalProfileResult).value

    return AwaitableGetCloudBrowserIsolationExternalProfileResult(
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        name=pulumi.get(__ret__, 'name'),
        regions=pulumi.get(__ret__, 'regions'),
        security_controls=pulumi.get(__ret__, 'security_controls'),
        user_experiences=pulumi.get(__ret__, 'user_experiences'))


@_utilities.lift_output_func(get_cloud_browser_isolation_external_profile)
def get_cloud_browser_isolation_external_profile_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                                        name: Optional[pulumi.Input[Optional[str]]] = None,
                                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudBrowserIsolationExternalProfileResult]:
    """
    Use the **zpa_cloud_browser_isolation_external_profile** data source to get information about Cloud Browser Isolation external profile. This data source information can then be used in as part of `PolicyAccessIsolationRule` when the `action` attribute is set to `ISOLATE`.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_cloud_browser_isolation_external_profile(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the CBI banner to be exported.
    """
    ...
