# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTrustedNetworkResult',
    'AwaitableGetTrustedNetworkResult',
    'get_trusted_network',
    'get_trusted_network_output',
]

@pulumi.output_type
class GetTrustedNetworkResult:
    """
    A collection of values returned by getTrustedNetwork.
    """
    def __init__(__self__, creation_time=None, domain=None, id=None, modified_time=None, modifiedby=None, name=None, network_id=None, zscaler_cloud=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if zscaler_cloud and not isinstance(zscaler_cloud, str):
            raise TypeError("Expected argument 'zscaler_cloud' to be a str")
        pulumi.set(__self__, "zscaler_cloud", zscaler_cloud)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def domain(self) -> builtins.str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> builtins.str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> builtins.str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> builtins.str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="zscalerCloud")
    def zscaler_cloud(self) -> builtins.str:
        return pulumi.get(self, "zscaler_cloud")


class AwaitableGetTrustedNetworkResult(GetTrustedNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrustedNetworkResult(
            creation_time=self.creation_time,
            domain=self.domain,
            id=self.id,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            network_id=self.network_id,
            zscaler_cloud=self.zscaler_cloud)


def get_trusted_network(id: Optional[builtins.str] = None,
                        name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrustedNetworkResult:
    """
    * [Official documentation](https://help.zscaler.com/client-connector/about-trusted-networks)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-trusted-network-details-using-api)

    The **zpa_trusted_network** data source to get information about a trusted network created in the Zscaler Private Access Mobile Portal. This data source can then be referenced within the following resources:

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.

    1. Access Policy
    2. Forwarding Policy
    3. Inspection Policy
    4. Isolation Policy
    5. Service Edge Group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA Trusted Network Data Source
    example = zpa.get_trusted_network(name="trusted_network_name")
    ```

    > **NOTE** To query trusted network that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the trusted network as the below example:

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA Posture Profile Data Source
    example1 = zpa.get_trusted_network(name="Corporate-Network (zscalertwo.net)")
    pulumi.export("zpaTrustedNetwork", example1.network_id)
    ```
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getTrustedNetwork:getTrustedNetwork', __args__, opts=opts, typ=GetTrustedNetworkResult).value

    return AwaitableGetTrustedNetworkResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        name=pulumi.get(__ret__, 'name'),
        network_id=pulumi.get(__ret__, 'network_id'),
        zscaler_cloud=pulumi.get(__ret__, 'zscaler_cloud'))
def get_trusted_network_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrustedNetworkResult]:
    """
    * [Official documentation](https://help.zscaler.com/client-connector/about-trusted-networks)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-trusted-network-details-using-api)

    The **zpa_trusted_network** data source to get information about a trusted network created in the Zscaler Private Access Mobile Portal. This data source can then be referenced within the following resources:

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.

    1. Access Policy
    2. Forwarding Policy
    3. Inspection Policy
    4. Isolation Policy
    5. Service Edge Group.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA Trusted Network Data Source
    example = zpa.get_trusted_network(name="trusted_network_name")
    ```

    > **NOTE** To query trusted network that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the trusted network as the below example:

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA Posture Profile Data Source
    example1 = zpa.get_trusted_network(name="Corporate-Network (zscalertwo.net)")
    pulumi.export("zpaTrustedNetwork", example1.network_id)
    ```
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zpa:index/getTrustedNetwork:getTrustedNetwork', __args__, opts=opts, typ=GetTrustedNetworkResult)
    return __ret__.apply(lambda __response__: GetTrustedNetworkResult(
        creation_time=pulumi.get(__response__, 'creation_time'),
        domain=pulumi.get(__response__, 'domain'),
        id=pulumi.get(__response__, 'id'),
        modified_time=pulumi.get(__response__, 'modified_time'),
        modifiedby=pulumi.get(__response__, 'modifiedby'),
        name=pulumi.get(__response__, 'name'),
        network_id=pulumi.get(__response__, 'network_id'),
        zscaler_cloud=pulumi.get(__response__, 'zscaler_cloud')))
