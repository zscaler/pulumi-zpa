# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ApplicationSegmentBrowserAccessClientlessAppArgs',
    'ApplicationSegmentBrowserAccessClientlessAppArgsDict',
    'ApplicationSegmentBrowserAccessServerGroupArgs',
    'ApplicationSegmentBrowserAccessServerGroupArgsDict',
    'ApplicationSegmentBrowserAccessTcpPortRangeArgs',
    'ApplicationSegmentBrowserAccessTcpPortRangeArgsDict',
    'ApplicationSegmentBrowserAccessUdpPortRangeArgs',
    'ApplicationSegmentBrowserAccessUdpPortRangeArgsDict',
    'ApplicationSegmentInspectionCommonAppsDtoArgs',
    'ApplicationSegmentInspectionCommonAppsDtoArgsDict',
    'ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs',
    'ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgsDict',
    'ApplicationSegmentInspectionServerGroupArgs',
    'ApplicationSegmentInspectionServerGroupArgsDict',
    'ApplicationSegmentInspectionTcpPortRangeArgs',
    'ApplicationSegmentInspectionTcpPortRangeArgsDict',
    'ApplicationSegmentInspectionUdpPortRangeArgs',
    'ApplicationSegmentInspectionUdpPortRangeArgsDict',
    'ApplicationSegmentPRACommonAppsDtoArgs',
    'ApplicationSegmentPRACommonAppsDtoArgsDict',
    'ApplicationSegmentPRACommonAppsDtoAppsConfigArgs',
    'ApplicationSegmentPRACommonAppsDtoAppsConfigArgsDict',
    'ApplicationSegmentPRAServerGroupArgs',
    'ApplicationSegmentPRAServerGroupArgsDict',
    'ApplicationSegmentPRATcpPortRangeArgs',
    'ApplicationSegmentPRATcpPortRangeArgsDict',
    'ApplicationSegmentPRAUdpPortRangeArgs',
    'ApplicationSegmentPRAUdpPortRangeArgsDict',
    'ApplicationSegmentServerGroupArgs',
    'ApplicationSegmentServerGroupArgsDict',
    'ApplicationSegmentTcpPortRangeArgs',
    'ApplicationSegmentTcpPortRangeArgsDict',
    'ApplicationSegmentUdpPortRangeArgs',
    'ApplicationSegmentUdpPortRangeArgsDict',
    'BrowserAccessClientlessAppArgs',
    'BrowserAccessClientlessAppArgsDict',
    'BrowserAccessServerGroupArgs',
    'BrowserAccessServerGroupArgsDict',
    'BrowserAccessTcpPortRangeArgs',
    'BrowserAccessTcpPortRangeArgsDict',
    'BrowserAccessUdpPortRangeArgs',
    'BrowserAccessUdpPortRangeArgsDict',
    'CloudBrowserIsolationExternalProfileDebugModeArgs',
    'CloudBrowserIsolationExternalProfileDebugModeArgsDict',
    'CloudBrowserIsolationExternalProfileSecurityControlArgs',
    'CloudBrowserIsolationExternalProfileSecurityControlArgsDict',
    'CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgs',
    'CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgsDict',
    'CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgs',
    'CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgsDict',
    'CloudBrowserIsolationExternalProfileUserExperienceArgs',
    'CloudBrowserIsolationExternalProfileUserExperienceArgsDict',
    'CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgs',
    'CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgsDict',
    'InspectionCustomControlsRuleArgs',
    'InspectionCustomControlsRuleArgsDict',
    'InspectionCustomControlsRuleConditionsArgs',
    'InspectionCustomControlsRuleConditionsArgsDict',
    'InspectionProfileControlsInfoArgs',
    'InspectionProfileControlsInfoArgsDict',
    'InspectionProfileCustomControlArgs',
    'InspectionProfileCustomControlArgsDict',
    'InspectionProfilePredefinedApiControlArgs',
    'InspectionProfilePredefinedApiControlArgsDict',
    'InspectionProfilePredefinedControlArgs',
    'InspectionProfilePredefinedControlArgsDict',
    'InspectionProfileThreatLabzControlArgs',
    'InspectionProfileThreatLabzControlArgsDict',
    'InspectionProfileWebsocketControlArgs',
    'InspectionProfileWebsocketControlArgsDict',
    'LSSConfigControllerConfigArgs',
    'LSSConfigControllerConfigArgsDict',
    'LSSConfigControllerConnectorGroupArgs',
    'LSSConfigControllerConnectorGroupArgsDict',
    'LSSConfigControllerPolicyRuleResourceArgs',
    'LSSConfigControllerPolicyRuleResourceArgsDict',
    'LSSConfigControllerPolicyRuleResourceConditionArgs',
    'LSSConfigControllerPolicyRuleResourceConditionArgsDict',
    'LSSConfigControllerPolicyRuleResourceConditionOperandArgs',
    'LSSConfigControllerPolicyRuleResourceConditionOperandArgsDict',
    'LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgs',
    'LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgsDict',
    'MicrotenantUserArgs',
    'MicrotenantUserArgsDict',
    'PRAApprovalApplicationArgs',
    'PRAApprovalApplicationArgsDict',
    'PRAApprovalWorkingHourArgs',
    'PRAApprovalWorkingHourArgsDict',
    'PRAConsolePraApplicationArgs',
    'PRAConsolePraApplicationArgsDict',
    'PRAConsolePraPortalArgs',
    'PRAConsolePraPortalArgsDict',
    'PolicyAccessCapabilitiesRuleConditionArgs',
    'PolicyAccessCapabilitiesRuleConditionArgsDict',
    'PolicyAccessCapabilitiesRuleConditionOperandArgs',
    'PolicyAccessCapabilitiesRuleConditionOperandArgsDict',
    'PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgs',
    'PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgsDict',
    'PolicyAccessCapabilitiesRulePrivilegedCapabilitiesArgs',
    'PolicyAccessCapabilitiesRulePrivilegedCapabilitiesArgsDict',
    'PolicyAccessCredentialRuleConditionArgs',
    'PolicyAccessCredentialRuleConditionArgsDict',
    'PolicyAccessCredentialRuleConditionOperandArgs',
    'PolicyAccessCredentialRuleConditionOperandArgsDict',
    'PolicyAccessCredentialRuleConditionOperandEntryValueArgs',
    'PolicyAccessCredentialRuleConditionOperandEntryValueArgsDict',
    'PolicyAccessCredentialRuleCredentialArgs',
    'PolicyAccessCredentialRuleCredentialArgsDict',
    'PolicyAccessCredentialRuleCredentialPoolArgs',
    'PolicyAccessCredentialRuleCredentialPoolArgsDict',
    'PolicyAccessForwardingRuleConditionArgs',
    'PolicyAccessForwardingRuleConditionArgsDict',
    'PolicyAccessForwardingRuleConditionOperandArgs',
    'PolicyAccessForwardingRuleConditionOperandArgsDict',
    'PolicyAccessForwardingRuleV2ConditionArgs',
    'PolicyAccessForwardingRuleV2ConditionArgsDict',
    'PolicyAccessForwardingRuleV2ConditionOperandArgs',
    'PolicyAccessForwardingRuleV2ConditionOperandArgsDict',
    'PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs',
    'PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyAccessInspectionRuleConditionArgs',
    'PolicyAccessInspectionRuleConditionArgsDict',
    'PolicyAccessInspectionRuleConditionOperandArgs',
    'PolicyAccessInspectionRuleConditionOperandArgsDict',
    'PolicyAccessInspectionRuleV2ConditionArgs',
    'PolicyAccessInspectionRuleV2ConditionArgsDict',
    'PolicyAccessInspectionRuleV2ConditionOperandArgs',
    'PolicyAccessInspectionRuleV2ConditionOperandArgsDict',
    'PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgs',
    'PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyAccessIsolationRuleConditionArgs',
    'PolicyAccessIsolationRuleConditionArgsDict',
    'PolicyAccessIsolationRuleConditionOperandArgs',
    'PolicyAccessIsolationRuleConditionOperandArgsDict',
    'PolicyAccessIsolationRuleV2ConditionArgs',
    'PolicyAccessIsolationRuleV2ConditionArgsDict',
    'PolicyAccessIsolationRuleV2ConditionOperandArgs',
    'PolicyAccessIsolationRuleV2ConditionOperandArgsDict',
    'PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgs',
    'PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyAccessRedirectionRuleConditionArgs',
    'PolicyAccessRedirectionRuleConditionArgsDict',
    'PolicyAccessRedirectionRuleConditionOperandArgs',
    'PolicyAccessRedirectionRuleConditionOperandArgsDict',
    'PolicyAccessRedirectionRuleServiceEdgeGroupArgs',
    'PolicyAccessRedirectionRuleServiceEdgeGroupArgsDict',
    'PolicyAccessReorderRuleRuleArgs',
    'PolicyAccessReorderRuleRuleArgsDict',
    'PolicyAccessRuleAppConnectorGroupArgs',
    'PolicyAccessRuleAppConnectorGroupArgsDict',
    'PolicyAccessRuleAppServerGroupArgs',
    'PolicyAccessRuleAppServerGroupArgsDict',
    'PolicyAccessRuleConditionArgs',
    'PolicyAccessRuleConditionArgsDict',
    'PolicyAccessRuleConditionOperandArgs',
    'PolicyAccessRuleConditionOperandArgsDict',
    'PolicyAccessRuleV2AppConnectorGroupArgs',
    'PolicyAccessRuleV2AppConnectorGroupArgsDict',
    'PolicyAccessRuleV2AppServerGroupArgs',
    'PolicyAccessRuleV2AppServerGroupArgsDict',
    'PolicyAccessRuleV2ConditionArgs',
    'PolicyAccessRuleV2ConditionArgsDict',
    'PolicyAccessRuleV2ConditionOperandArgs',
    'PolicyAccessRuleV2ConditionOperandArgsDict',
    'PolicyAccessRuleV2ConditionOperandEntryValueArgs',
    'PolicyAccessRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyAccessTimeOutRuleConditionArgs',
    'PolicyAccessTimeOutRuleConditionArgsDict',
    'PolicyAccessTimeOutRuleConditionOperandArgs',
    'PolicyAccessTimeOutRuleConditionOperandArgsDict',
    'PolicyAccessTimeOutRuleV2ConditionArgs',
    'PolicyAccessTimeOutRuleV2ConditionArgsDict',
    'PolicyAccessTimeOutRuleV2ConditionOperandArgs',
    'PolicyAccessTimeOutRuleV2ConditionOperandArgsDict',
    'PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgs',
    'PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyBrowserProtectionRuleConditionArgs',
    'PolicyBrowserProtectionRuleConditionArgsDict',
    'PolicyBrowserProtectionRuleConditionOperandArgs',
    'PolicyBrowserProtectionRuleConditionOperandArgsDict',
    'PolicyBrowserProtectionRuleConditionOperandEntryValueArgs',
    'PolicyBrowserProtectionRuleConditionOperandEntryValueArgsDict',
    'PolicyCapabilitiesRuleConditionArgs',
    'PolicyCapabilitiesRuleConditionArgsDict',
    'PolicyCapabilitiesRuleConditionOperandArgs',
    'PolicyCapabilitiesRuleConditionOperandArgsDict',
    'PolicyCapabilitiesRuleConditionOperandEntryValueArgs',
    'PolicyCapabilitiesRuleConditionOperandEntryValueArgsDict',
    'PolicyCapabilitiesRulePrivilegedCapabilitiesArgs',
    'PolicyCapabilitiesRulePrivilegedCapabilitiesArgsDict',
    'PolicyCredentialRuleConditionArgs',
    'PolicyCredentialRuleConditionArgsDict',
    'PolicyCredentialRuleConditionOperandArgs',
    'PolicyCredentialRuleConditionOperandArgsDict',
    'PolicyCredentialRuleConditionOperandEntryValueArgs',
    'PolicyCredentialRuleConditionOperandEntryValueArgsDict',
    'PolicyCredentialRuleCredentialArgs',
    'PolicyCredentialRuleCredentialArgsDict',
    'PolicyCredentialRuleCredentialPoolArgs',
    'PolicyCredentialRuleCredentialPoolArgsDict',
    'PolicyForwardingRuleV2ConditionArgs',
    'PolicyForwardingRuleV2ConditionArgsDict',
    'PolicyForwardingRuleV2ConditionOperandArgs',
    'PolicyForwardingRuleV2ConditionOperandArgsDict',
    'PolicyForwardingRuleV2ConditionOperandEntryValueArgs',
    'PolicyForwardingRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyInspectionRuleV2ConditionArgs',
    'PolicyInspectionRuleV2ConditionArgsDict',
    'PolicyInspectionRuleV2ConditionOperandArgs',
    'PolicyInspectionRuleV2ConditionOperandArgsDict',
    'PolicyInspectionRuleV2ConditionOperandEntryValueArgs',
    'PolicyInspectionRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyIsolationRuleV2ConditionArgs',
    'PolicyIsolationRuleV2ConditionArgsDict',
    'PolicyIsolationRuleV2ConditionOperandArgs',
    'PolicyIsolationRuleV2ConditionOperandArgsDict',
    'PolicyIsolationRuleV2ConditionOperandEntryValueArgs',
    'PolicyIsolationRuleV2ConditionOperandEntryValueArgsDict',
    'PolicyRedirectionRuleConditionArgs',
    'PolicyRedirectionRuleConditionArgsDict',
    'PolicyRedirectionRuleConditionOperandArgs',
    'PolicyRedirectionRuleConditionOperandArgsDict',
    'PolicyRedirectionRuleServiceEdgeGroupArgs',
    'PolicyRedirectionRuleServiceEdgeGroupArgsDict',
    'PolicyTimeoutRuleV2ConditionArgs',
    'PolicyTimeoutRuleV2ConditionArgsDict',
    'PolicyTimeoutRuleV2ConditionOperandArgs',
    'PolicyTimeoutRuleV2ConditionOperandArgsDict',
    'PolicyTimeoutRuleV2ConditionOperandEntryValueArgs',
    'PolicyTimeoutRuleV2ConditionOperandEntryValueArgsDict',
    'PraApprovalControllerApplicationArgs',
    'PraApprovalControllerApplicationArgsDict',
    'PraApprovalControllerWorkingHourArgs',
    'PraApprovalControllerWorkingHourArgsDict',
    'PraConsoleControllerPraApplicationArgs',
    'PraConsoleControllerPraApplicationArgsDict',
    'PraConsoleControllerPraPortalArgs',
    'PraConsoleControllerPraPortalArgsDict',
    'PraCredentialPoolCredentialArgs',
    'PraCredentialPoolCredentialArgsDict',
    'SegmentGroupApplicationArgs',
    'SegmentGroupApplicationArgsDict',
    'ServerGroupAppConnectorGroupArgs',
    'ServerGroupAppConnectorGroupArgsDict',
    'ServerGroupApplicationArgs',
    'ServerGroupApplicationArgsDict',
    'ServerGroupServerArgs',
    'ServerGroupServerArgsDict',
    'ServiceEdgeGroupServiceEdgeArgs',
    'ServiceEdgeGroupServiceEdgeArgsDict',
    'ServiceEdgeGroupTrustedNetworkArgs',
    'ServiceEdgeGroupTrustedNetworkArgsDict',
    'GetApplicationSegmentBrowserAccessTcpPortRangeArgs',
    'GetApplicationSegmentBrowserAccessTcpPortRangeArgsDict',
    'GetApplicationSegmentBrowserAccessUdpPortRangeArgs',
    'GetApplicationSegmentBrowserAccessUdpPortRangeArgsDict',
    'GetApplicationSegmentInspectionTcpPortRangeArgs',
    'GetApplicationSegmentInspectionTcpPortRangeArgsDict',
    'GetApplicationSegmentInspectionUdpPortRangeArgs',
    'GetApplicationSegmentInspectionUdpPortRangeArgsDict',
    'GetApplicationSegmentPRATcpPortRangeArgs',
    'GetApplicationSegmentPRATcpPortRangeArgsDict',
    'GetApplicationSegmentPRAUdpPortRangeArgs',
    'GetApplicationSegmentPRAUdpPortRangeArgsDict',
    'GetApplicationSegmentTcpPortRangeArgs',
    'GetApplicationSegmentTcpPortRangeArgsDict',
    'GetApplicationSegmentUdpPortRangeArgs',
    'GetApplicationSegmentUdpPortRangeArgsDict',
    'GetCredentialPoolCredentialArgs',
    'GetCredentialPoolCredentialArgsDict',
    'GetLSSConfigControllerConfigArgs',
    'GetLSSConfigControllerConfigArgsDict',
    'GetPraCredentialPoolCredentialArgs',
    'GetPraCredentialPoolCredentialArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationSegmentBrowserAccessClientlessAppArgsDict(TypedDict):
        application_port: pulumi.Input[builtins.str]
        """
        Port for the BA app.
        """
        application_protocol: pulumi.Input[builtins.str]
        """
        Protocol for the BA app.
        """
        name: pulumi.Input[builtins.str]
        allow_options: NotRequired[pulumi.Input[builtins.bool]]
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        """
        app_id: NotRequired[pulumi.Input[builtins.str]]
        certificate_id: NotRequired[pulumi.Input[builtins.str]]
        """
        ID of the BA certificate.
        """
        cname: NotRequired[pulumi.Input[builtins.str]]
        """
        ID of the BA certificate.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        domain: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain name or IP address of the BA app.
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        ext_domain: NotRequired[pulumi.Input[builtins.str]]
        """
        The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        """
        ext_label: NotRequired[pulumi.Input[builtins.str]]
        """
        The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        trust_untrusted_cert: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
elif False:
    ApplicationSegmentBrowserAccessClientlessAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentBrowserAccessClientlessAppArgs:
    def __init__(__self__, *,
                 application_port: pulumi.Input[builtins.str],
                 application_protocol: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 allow_options: Optional[pulumi.Input[builtins.bool]] = None,
                 app_id: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[builtins.str]] = None,
                 cname: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ext_domain: Optional[pulumi.Input[builtins.str]] = None,
                 ext_label: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] application_port: Port for the BA app.
        :param pulumi.Input[builtins.str] application_protocol: Protocol for the BA app.
        :param pulumi.Input[builtins.bool] allow_options: If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        :param pulumi.Input[builtins.str] certificate_id: ID of the BA certificate.
        :param pulumi.Input[builtins.str] cname: ID of the BA certificate.
        :param pulumi.Input[builtins.str] domain: Domain name or IP address of the BA app.
        :param pulumi.Input[builtins.str] ext_domain: The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        :param pulumi.Input[builtins.str] ext_label: The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        :param pulumi.Input[builtins.bool] trust_untrusted_cert: Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext_domain is not None:
            pulumi.set(__self__, "ext_domain", ext_domain)
        if ext_label is not None:
            pulumi.set(__self__, "ext_label", ext_label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> pulumi.Input[builtins.str]:
        """
        Port for the BA app.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> pulumi.Input[builtins.str]:
        """
        Protocol for the BA app.
        """
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        """
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ID of the BA certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ID of the BA certificate.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain name or IP address of the BA app.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extDomain")
    def ext_domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        """
        return pulumi.get(self, "ext_domain")

    @ext_domain.setter
    def ext_domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ext_domain", value)

    @property
    @pulumi.getter(name="extLabel")
    def ext_label(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        """
        return pulumi.get(self, "ext_label")

    @ext_label.setter
    def ext_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ext_label", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


if not MYPY:
    class ApplicationSegmentBrowserAccessServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ApplicationSegmentBrowserAccessServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentBrowserAccessServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ApplicationSegmentBrowserAccessTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentBrowserAccessTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentBrowserAccessTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentBrowserAccessUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentBrowserAccessUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentBrowserAccessUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentInspectionCommonAppsDtoArgsDict(TypedDict):
        apps_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgsDict']]]]
elif False:
    ApplicationSegmentInspectionCommonAppsDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentInspectionCommonAppsDtoArgs:
    def __init__(__self__, *,
                 apps_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]]:
        return pulumi.get(self, "apps_configs")

    @apps_configs.setter
    def apps_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs']]]]):
        pulumi.set(self, "apps_configs", value)


if not MYPY:
    class ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgsDict(TypedDict):
        app_id: NotRequired[pulumi.Input[builtins.str]]
        app_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        application_port: NotRequired[pulumi.Input[builtins.str]]
        application_protocol: NotRequired[pulumi.Input[builtins.str]]
        certificate_id: NotRequired[pulumi.Input[builtins.str]]
        description: NotRequired[pulumi.Input[builtins.str]]
        domain: NotRequired[pulumi.Input[builtins.str]]
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        inspect_app_id: NotRequired[pulumi.Input[builtins.str]]
        name: NotRequired[pulumi.Input[builtins.str]]
        trust_untrusted_cert: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[builtins.str]] = None,
                 app_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[builtins.str]] = None,
                 application_protocol: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_app_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[builtins.bool]] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if inspect_app_id is not None:
            pulumi.set(__self__, "inspect_app_id", inspect_app_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "app_types")

    @app_types.setter
    def app_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_types", value)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="inspectAppId")
    def inspect_app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "inspect_app_id")

    @inspect_app_id.setter
    def inspect_app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "inspect_app_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


if not MYPY:
    class ApplicationSegmentInspectionServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ApplicationSegmentInspectionServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentInspectionServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ApplicationSegmentInspectionTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentInspectionTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentInspectionTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentInspectionUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentInspectionUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentInspectionUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentPRACommonAppsDtoArgsDict(TypedDict):
        apps_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgsDict']]]]
elif False:
    ApplicationSegmentPRACommonAppsDtoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentPRACommonAppsDtoArgs:
    def __init__(__self__, *,
                 apps_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]] = None):
        if apps_configs is not None:
            pulumi.set(__self__, "apps_configs", apps_configs)

    @property
    @pulumi.getter(name="appsConfigs")
    def apps_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]]:
        return pulumi.get(self, "apps_configs")

    @apps_configs.setter
    def apps_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationSegmentPRACommonAppsDtoAppsConfigArgs']]]]):
        pulumi.set(self, "apps_configs", value)


if not MYPY:
    class ApplicationSegmentPRACommonAppsDtoAppsConfigArgsDict(TypedDict):
        app_id: NotRequired[pulumi.Input[builtins.str]]
        app_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        application_port: NotRequired[pulumi.Input[builtins.str]]
        application_protocol: NotRequired[pulumi.Input[builtins.str]]
        connection_security: NotRequired[pulumi.Input[builtins.str]]
        domain: NotRequired[pulumi.Input[builtins.str]]
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        name: NotRequired[pulumi.Input[builtins.str]]
        pra_app_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentPRACommonAppsDtoAppsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentPRACommonAppsDtoAppsConfigArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[builtins.str]] = None,
                 app_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 application_port: Optional[pulumi.Input[builtins.str]] = None,
                 application_protocol: Optional[pulumi.Input[builtins.str]] = None,
                 connection_security: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 pra_app_id: Optional[pulumi.Input[builtins.str]] = None):
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_types is not None:
            pulumi.set(__self__, "app_types", app_types)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if application_protocol is not None:
            pulumi.set(__self__, "application_protocol", application_protocol)
        if connection_security is not None:
            pulumi.set(__self__, "connection_security", connection_security)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pra_app_id is not None:
            pulumi.set(__self__, "pra_app_id", pra_app_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appTypes")
    def app_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "app_types")

    @app_types.setter
    def app_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_types", value)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="connectionSecurity")
    def connection_security(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "connection_security")

    @connection_security.setter
    def connection_security(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "connection_security", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="praAppId")
    def pra_app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pra_app_id")

    @pra_app_id.setter
    def pra_app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pra_app_id", value)


if not MYPY:
    class ApplicationSegmentPRAServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ApplicationSegmentPRAServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentPRAServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ApplicationSegmentPRATcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentPRATcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentPRATcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentPRAUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentPRAUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentPRAUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ApplicationSegmentServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ApplicationSegmentTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class ApplicationSegmentUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ApplicationSegmentUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationSegmentUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class BrowserAccessClientlessAppArgsDict(TypedDict):
        application_port: pulumi.Input[builtins.str]
        """
        Port for the BA app.
        """
        application_protocol: pulumi.Input[builtins.str]
        """
        Protocol for the BA app.
        """
        name: pulumi.Input[builtins.str]
        allow_options: NotRequired[pulumi.Input[builtins.bool]]
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        """
        app_id: NotRequired[pulumi.Input[builtins.str]]
        certificate_id: NotRequired[pulumi.Input[builtins.str]]
        """
        ID of the BA certificate.
        """
        cname: NotRequired[pulumi.Input[builtins.str]]
        """
        ID of the BA certificate.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        domain: NotRequired[pulumi.Input[builtins.str]]
        """
        Domain name or IP address of the BA app.
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        ext_domain: NotRequired[pulumi.Input[builtins.str]]
        """
        The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        """
        ext_label: NotRequired[pulumi.Input[builtins.str]]
        """
        The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        trust_untrusted_cert: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
elif False:
    BrowserAccessClientlessAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserAccessClientlessAppArgs:
    def __init__(__self__, *,
                 application_port: pulumi.Input[builtins.str],
                 application_protocol: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 allow_options: Optional[pulumi.Input[builtins.bool]] = None,
                 app_id: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[builtins.str]] = None,
                 cname: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ext_domain: Optional[pulumi.Input[builtins.str]] = None,
                 ext_label: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] application_port: Port for the BA app.
        :param pulumi.Input[builtins.str] application_protocol: Protocol for the BA app.
        :param pulumi.Input[builtins.bool] allow_options: If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        :param pulumi.Input[builtins.str] certificate_id: ID of the BA certificate.
        :param pulumi.Input[builtins.str] cname: ID of the BA certificate.
        :param pulumi.Input[builtins.str] domain: Domain name or IP address of the BA app.
        :param pulumi.Input[builtins.str] ext_domain: The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        :param pulumi.Input[builtins.str] ext_label: The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        :param pulumi.Input[builtins.bool] trust_untrusted_cert: Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ext_domain is not None:
            pulumi.set(__self__, "ext_domain", ext_domain)
        if ext_label is not None:
            pulumi.set(__self__, "ext_label", ext_label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> pulumi.Input[builtins.str]:
        """
        Port for the BA app.
        """
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> pulumi.Input[builtins.str]:
        """
        Protocol for the BA app.
        """
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.
        """
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ID of the BA certificate.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        ID of the BA certificate.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Domain name or IP address of the BA app.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="extDomain")
    def ext_domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The external domain name prefix of the Browser Access application that is used for Zscaler-managed certificates when creating a privileged portal.
        """
        return pulumi.get(self, "ext_domain")

    @ext_domain.setter
    def ext_domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ext_domain", value)

    @property
    @pulumi.getter(name="extLabel")
    def ext_label(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The domain prefix for the privileged portal URL. The supported string can include numbers, lower case characters, and only supports a hyphen (-).
        """
        return pulumi.get(self, "ext_label")

    @ext_label.setter
    def ext_label(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ext_label", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether Use Untrusted Certificates is enabled or disabled for a BA app.
        """
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


if not MYPY:
    class BrowserAccessServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    BrowserAccessServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserAccessServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class BrowserAccessTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    BrowserAccessTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserAccessTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class BrowserAccessUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input[builtins.str]]
        to: NotRequired[pulumi.Input[builtins.str]]
elif False:
    BrowserAccessUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserAccessUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[builtins.str]] = None,
                 to: Optional[pulumi.Input[builtins.str]] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "to", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileDebugModeArgsDict(TypedDict):
        allowed: NotRequired[pulumi.Input[builtins.bool]]
        file_password: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CloudBrowserIsolationExternalProfileDebugModeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileDebugModeArgs:
    def __init__(__self__, *,
                 allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 file_password: Optional[pulumi.Input[builtins.str]] = None):
        if allowed is not None:
            pulumi.set(__self__, "allowed", allowed)
        if file_password is not None:
            pulumi.set(__self__, "file_password", file_password)

    @property
    @pulumi.getter
    def allowed(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allowed")

    @allowed.setter
    def allowed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allowed", value)

    @property
    @pulumi.getter(name="filePassword")
    def file_password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "file_password")

    @file_password.setter
    def file_password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_password", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileSecurityControlArgsDict(TypedDict):
        allow_printing: NotRequired[pulumi.Input[builtins.bool]]
        copy_paste: NotRequired[pulumi.Input[builtins.str]]
        deep_link: NotRequired[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgsDict']]
        document_viewer: NotRequired[pulumi.Input[builtins.bool]]
        flattened_pdf: NotRequired[pulumi.Input[builtins.bool]]
        local_render: NotRequired[pulumi.Input[builtins.bool]]
        restrict_keystrokes: NotRequired[pulumi.Input[builtins.bool]]
        upload_download: NotRequired[pulumi.Input[builtins.str]]
        watermark: NotRequired[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgsDict']]
elif False:
    CloudBrowserIsolationExternalProfileSecurityControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileSecurityControlArgs:
    def __init__(__self__, *,
                 allow_printing: Optional[pulumi.Input[builtins.bool]] = None,
                 copy_paste: Optional[pulumi.Input[builtins.str]] = None,
                 deep_link: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgs']] = None,
                 document_viewer: Optional[pulumi.Input[builtins.bool]] = None,
                 flattened_pdf: Optional[pulumi.Input[builtins.bool]] = None,
                 local_render: Optional[pulumi.Input[builtins.bool]] = None,
                 restrict_keystrokes: Optional[pulumi.Input[builtins.bool]] = None,
                 upload_download: Optional[pulumi.Input[builtins.str]] = None,
                 watermark: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgs']] = None):
        if allow_printing is not None:
            pulumi.set(__self__, "allow_printing", allow_printing)
        if copy_paste is not None:
            pulumi.set(__self__, "copy_paste", copy_paste)
        if deep_link is not None:
            pulumi.set(__self__, "deep_link", deep_link)
        if document_viewer is not None:
            pulumi.set(__self__, "document_viewer", document_viewer)
        if flattened_pdf is not None:
            pulumi.set(__self__, "flattened_pdf", flattened_pdf)
        if local_render is not None:
            pulumi.set(__self__, "local_render", local_render)
        if restrict_keystrokes is not None:
            pulumi.set(__self__, "restrict_keystrokes", restrict_keystrokes)
        if upload_download is not None:
            pulumi.set(__self__, "upload_download", upload_download)
        if watermark is not None:
            pulumi.set(__self__, "watermark", watermark)

    @property
    @pulumi.getter(name="allowPrinting")
    def allow_printing(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "allow_printing")

    @allow_printing.setter
    def allow_printing(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_printing", value)

    @property
    @pulumi.getter(name="copyPaste")
    def copy_paste(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "copy_paste")

    @copy_paste.setter
    def copy_paste(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "copy_paste", value)

    @property
    @pulumi.getter(name="deepLink")
    def deep_link(self) -> Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgs']]:
        return pulumi.get(self, "deep_link")

    @deep_link.setter
    def deep_link(self, value: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgs']]):
        pulumi.set(self, "deep_link", value)

    @property
    @pulumi.getter(name="documentViewer")
    def document_viewer(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "document_viewer")

    @document_viewer.setter
    def document_viewer(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "document_viewer", value)

    @property
    @pulumi.getter(name="flattenedPdf")
    def flattened_pdf(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "flattened_pdf")

    @flattened_pdf.setter
    def flattened_pdf(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "flattened_pdf", value)

    @property
    @pulumi.getter(name="localRender")
    def local_render(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "local_render")

    @local_render.setter
    def local_render(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "local_render", value)

    @property
    @pulumi.getter(name="restrictKeystrokes")
    def restrict_keystrokes(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "restrict_keystrokes")

    @restrict_keystrokes.setter
    def restrict_keystrokes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "restrict_keystrokes", value)

    @property
    @pulumi.getter(name="uploadDownload")
    def upload_download(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "upload_download")

    @upload_download.setter
    def upload_download(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upload_download", value)

    @property
    @pulumi.getter
    def watermark(self) -> Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgs']]:
        return pulumi.get(self, "watermark")

    @watermark.setter
    def watermark(self, value: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgs']]):
        pulumi.set(self, "watermark", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgsDict(TypedDict):
        applications: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        enabled: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileSecurityControlDeepLinkArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None):
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        message: NotRequired[pulumi.Input[builtins.str]]
        show_message: NotRequired[pulumi.Input[builtins.bool]]
        show_timestamp: NotRequired[pulumi.Input[builtins.bool]]
        show_user_id: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileSecurityControlWatermarkArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 message: Optional[pulumi.Input[builtins.str]] = None,
                 show_message: Optional[pulumi.Input[builtins.bool]] = None,
                 show_timestamp: Optional[pulumi.Input[builtins.bool]] = None,
                 show_user_id: Optional[pulumi.Input[builtins.bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if show_message is not None:
            pulumi.set(__self__, "show_message", show_message)
        if show_timestamp is not None:
            pulumi.set(__self__, "show_timestamp", show_timestamp)
        if show_user_id is not None:
            pulumi.set(__self__, "show_user_id", show_user_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="showMessage")
    def show_message(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_message")

    @show_message.setter
    def show_message(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_message", value)

    @property
    @pulumi.getter(name="showTimestamp")
    def show_timestamp(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_timestamp")

    @show_timestamp.setter
    def show_timestamp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_timestamp", value)

    @property
    @pulumi.getter(name="showUserId")
    def show_user_id(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "show_user_id")

    @show_user_id.setter
    def show_user_id(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "show_user_id", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileUserExperienceArgsDict(TypedDict):
        browser_in_browser: NotRequired[pulumi.Input[builtins.bool]]
        forward_to_zia: NotRequired[pulumi.Input['CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgsDict']]
        persist_isolation_bar: NotRequired[pulumi.Input[builtins.bool]]
        session_persistence: NotRequired[pulumi.Input[builtins.bool]]
        translate: NotRequired[pulumi.Input[builtins.bool]]
        zgpu: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    CloudBrowserIsolationExternalProfileUserExperienceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileUserExperienceArgs:
    def __init__(__self__, *,
                 browser_in_browser: Optional[pulumi.Input[builtins.bool]] = None,
                 forward_to_zia: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgs']] = None,
                 persist_isolation_bar: Optional[pulumi.Input[builtins.bool]] = None,
                 session_persistence: Optional[pulumi.Input[builtins.bool]] = None,
                 translate: Optional[pulumi.Input[builtins.bool]] = None,
                 zgpu: Optional[pulumi.Input[builtins.bool]] = None):
        if browser_in_browser is not None:
            pulumi.set(__self__, "browser_in_browser", browser_in_browser)
        if forward_to_zia is not None:
            pulumi.set(__self__, "forward_to_zia", forward_to_zia)
        if persist_isolation_bar is not None:
            pulumi.set(__self__, "persist_isolation_bar", persist_isolation_bar)
        if session_persistence is not None:
            pulumi.set(__self__, "session_persistence", session_persistence)
        if translate is not None:
            pulumi.set(__self__, "translate", translate)
        if zgpu is not None:
            pulumi.set(__self__, "zgpu", zgpu)

    @property
    @pulumi.getter(name="browserInBrowser")
    def browser_in_browser(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "browser_in_browser")

    @browser_in_browser.setter
    def browser_in_browser(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "browser_in_browser", value)

    @property
    @pulumi.getter(name="forwardToZia")
    def forward_to_zia(self) -> Optional[pulumi.Input['CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgs']]:
        return pulumi.get(self, "forward_to_zia")

    @forward_to_zia.setter
    def forward_to_zia(self, value: Optional[pulumi.Input['CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgs']]):
        pulumi.set(self, "forward_to_zia", value)

    @property
    @pulumi.getter(name="persistIsolationBar")
    def persist_isolation_bar(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "persist_isolation_bar")

    @persist_isolation_bar.setter
    def persist_isolation_bar(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "persist_isolation_bar", value)

    @property
    @pulumi.getter(name="sessionPersistence")
    def session_persistence(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "session_persistence")

    @session_persistence.setter
    def session_persistence(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "session_persistence", value)

    @property
    @pulumi.getter
    def translate(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "translate")

    @translate.setter
    def translate(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "translate", value)

    @property
    @pulumi.getter
    def zgpu(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "zgpu")

    @zgpu.setter
    def zgpu(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zgpu", value)


if not MYPY:
    class CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgsDict(TypedDict):
        cloud_name: NotRequired[pulumi.Input[builtins.str]]
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        organization_id: NotRequired[pulumi.Input[builtins.str]]
        pac_file_url: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudBrowserIsolationExternalProfileUserExperienceForwardToZiaArgs:
    def __init__(__self__, *,
                 cloud_name: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 organization_id: Optional[pulumi.Input[builtins.str]] = None,
                 pac_file_url: Optional[pulumi.Input[builtins.str]] = None):
        if cloud_name is not None:
            pulumi.set(__self__, "cloud_name", cloud_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if pac_file_url is not None:
            pulumi.set(__self__, "pac_file_url", pac_file_url)

    @property
    @pulumi.getter(name="cloudName")
    def cloud_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "cloud_name")

    @cloud_name.setter
    def cloud_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cloud_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="pacFileUrl")
    def pac_file_url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "pac_file_url")

    @pac_file_url.setter
    def pac_file_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "pac_file_url", value)


if not MYPY:
    class InspectionCustomControlsRuleArgsDict(TypedDict):
        conditions: NotRequired[pulumi.Input['InspectionCustomControlsRuleConditionsArgsDict']]
        names: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        Type value for the rules.
        """
elif False:
    InspectionCustomControlsRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionCustomControlsRuleArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input['InspectionCustomControlsRuleConditionsArgs']] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] names: Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
        :param pulumi.Input[builtins.str] type: Type value for the rules.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['InspectionCustomControlsRuleConditionsArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['InspectionCustomControlsRuleConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type value for the rules.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InspectionCustomControlsRuleConditionsArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        """
        Signifies the key for the object type
        """
        op: NotRequired[pulumi.Input[builtins.str]]
        """
        Denotes the operation type.
        """
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        Denotes the value for the given object type. Its value depends on the key.
        """
elif False:
    InspectionCustomControlsRuleConditionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionCustomControlsRuleConditionsArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 op: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: Signifies the key for the object type
        :param pulumi.Input[builtins.str] op: Denotes the operation type.
        :param pulumi.Input[builtins.str] rhs: Denotes the value for the given object type. Its value depends on the key.
        """
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Signifies the key for the object type
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Denotes the operation type.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Denotes the value for the given object type. Its value depends on the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class InspectionProfileControlsInfoArgsDict(TypedDict):
        control_type: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InspectionProfileControlsInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfileControlsInfoArgs:
    def __init__(__self__, *,
                 control_type: Optional[pulumi.Input[builtins.str]] = None):
        if control_type is not None:
            pulumi.set(__self__, "control_type", control_type)

    @property
    @pulumi.getter(name="controlType")
    def control_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "control_type")

    @control_type.setter
    def control_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "control_type", value)


if not MYPY:
    class InspectionProfileCustomControlArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        """
        The unique identifier of the custom control
        """
        action: NotRequired[pulumi.Input[builtins.str]]
        """
        The action of the custom control
        """
        action_value: NotRequired[pulumi.Input[builtins.str]]
        """
        Denotes the action. Supports any string
        """
elif False:
    InspectionProfileCustomControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfileCustomControlArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str],
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] id: The unique identifier of the custom control
        :param pulumi.Input[builtins.str] action: The action of the custom control
        :param pulumi.Input[builtins.str] action_value: Denotes the action. Supports any string
        """
        pulumi.set(__self__, "id", id)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        """
        The unique identifier of the custom control
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action of the custom control
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Denotes the action. Supports any string
        """
        return pulumi.get(self, "action_value")

    @action_value.setter
    def action_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_value", value)


if not MYPY:
    class InspectionProfilePredefinedApiControlArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[builtins.str]]
        action_value: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InspectionProfilePredefinedApiControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfilePredefinedApiControlArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_value: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action_value")

    @action_value.setter
    def action_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class InspectionProfilePredefinedControlArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[builtins.str]]
        action_value: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InspectionProfilePredefinedControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfilePredefinedControlArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_value: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action_value")

    @action_value.setter
    def action_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class InspectionProfileThreatLabzControlArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[builtins.str]]
        action_value: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InspectionProfileThreatLabzControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfileThreatLabzControlArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_value: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action_value")

    @action_value.setter
    def action_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class InspectionProfileWebsocketControlArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[builtins.str]]
        action_value: NotRequired[pulumi.Input[builtins.str]]
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InspectionProfileWebsocketControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InspectionProfileWebsocketControlArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_value: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_value is not None:
            pulumi.set(__self__, "action_value", action_value)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionValue")
    def action_value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action_value")

    @action_value.setter
    def action_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class LSSConfigControllerConfigArgsDict(TypedDict):
        format: pulumi.Input[builtins.str]
        """
        Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats
        """
        lss_host: pulumi.Input[builtins.str]
        """
        Host of the LSS configuration
        """
        lss_port: pulumi.Input[builtins.str]
        """
        Port of the LSS configuration
        """
        name: pulumi.Input[builtins.str]
        """
        Name of the LSS configuration
        """
        source_log_type: pulumi.Input[builtins.str]
        """
        Log type of the LSS configuration
        """
        audit_message: NotRequired[pulumi.Input[builtins.str]]
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        Description of the LSS configuration
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        Whether this LSS configuration is enabled or not. Supported values: true, false
        """
        filters: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        use_tls: NotRequired[pulumi.Input[builtins.bool]]
elif False:
    LSSConfigControllerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerConfigArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[builtins.str],
                 lss_host: pulumi.Input[builtins.str],
                 lss_port: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 source_log_type: pulumi.Input[builtins.str],
                 audit_message: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 use_tls: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.str] format: Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats
        :param pulumi.Input[builtins.str] lss_host: Host of the LSS configuration
        :param pulumi.Input[builtins.str] lss_port: Port of the LSS configuration
        :param pulumi.Input[builtins.str] name: Name of the LSS configuration
        :param pulumi.Input[builtins.str] source_log_type: Log type of the LSS configuration
        :param pulumi.Input[builtins.str] description: Description of the LSS configuration
        :param pulumi.Input[builtins.bool] enabled: Whether this LSS configuration is enabled or not. Supported values: true, false
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] filters: Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        if audit_message is not None:
            pulumi.set(__self__, "audit_message", audit_message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[builtins.str]:
        """
        Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> pulumi.Input[builtins.str]:
        """
        Host of the LSS configuration
        """
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> pulumi.Input[builtins.str]:
        """
        Port of the LSS configuration
        """
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the LSS configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> pulumi.Input[builtins.str]:
        """
        Log type of the LSS configuration
        """
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the LSS configuration
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether this LSS configuration is enabled or not. Supported values: true, false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_tls", value)


if not MYPY:
    class LSSConfigControllerConnectorGroupArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    LSSConfigControllerConnectorGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class LSSConfigControllerPolicyRuleResourceArgsDict(TypedDict):
        name: pulumi.Input[builtins.str]
        """
        This is the name of the policy.
        """
        action: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for providing the rule action.
        """
        action_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This field defines the description of the server.
        """
        bypass_default_rule: NotRequired[pulumi.Input[builtins.bool]]
        conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgsDict']]]]
        """
        This is for proviidng the set of conditions for the policy.
        """
        custom_msg: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for providing a customer message for the user.
        """
        default_rule: NotRequired[pulumi.Input[builtins.bool]]
        """
        This is for providing a customer message for the user.
        """
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        This is the description of the access policy.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        lss_default_rule: NotRequired[pulumi.Input[builtins.bool]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operator: NotRequired[pulumi.Input[builtins.str]]
        policy_set_id: NotRequired[pulumi.Input[builtins.str]]
        policy_type: NotRequired[pulumi.Input[builtins.str]]
        priority: NotRequired[pulumi.Input[builtins.str]]
        reauth_default_rule: NotRequired[pulumi.Input[builtins.bool]]
        reauth_idle_timeout: NotRequired[pulumi.Input[builtins.str]]
        reauth_timeout: NotRequired[pulumi.Input[builtins.str]]
        rule_order: NotRequired[pulumi.Input[builtins.str]]
        zpn_cbi_profile_id: NotRequired[pulumi.Input[builtins.str]]
        zpn_inspection_profile_id: NotRequired[pulumi.Input[builtins.str]]
        zpn_isolation_profile_id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    LSSConfigControllerPolicyRuleResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 action_id: Optional[pulumi.Input[builtins.str]] = None,
                 bypass_default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]] = None,
                 custom_msg: Optional[pulumi.Input[builtins.str]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 lss_default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None,
                 policy_set_id: Optional[pulumi.Input[builtins.str]] = None,
                 policy_type: Optional[pulumi.Input[builtins.str]] = None,
                 priority: Optional[pulumi.Input[builtins.str]] = None,
                 reauth_default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 reauth_idle_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 reauth_timeout: Optional[pulumi.Input[builtins.str]] = None,
                 rule_order: Optional[pulumi.Input[builtins.str]] = None,
                 zpn_cbi_profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 zpn_inspection_profile_id: Optional[pulumi.Input[builtins.str]] = None,
                 zpn_isolation_profile_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: This is the name of the policy.
        :param pulumi.Input[builtins.str] action: This is for providing the rule action.
        :param pulumi.Input[builtins.str] action_id: This field defines the description of the server.
        :param pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[builtins.str] custom_msg: This is for providing a customer message for the user.
        :param pulumi.Input[builtins.bool] default_rule: This is for providing a customer message for the user.
        :param pulumi.Input[builtins.str] description: This is the description of the access policy.
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if bypass_default_rule is not None:
            pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lss_default_rule is not None:
            pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reauth_default_rule is not None:
            pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        if reauth_idle_timeout is not None:
            pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        if reauth_timeout is not None:
            pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        if rule_order is not None:
            warnings.warn("""The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`""", DeprecationWarning)
            pulumi.log.warn("""rule_order is deprecated: The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`""")
        if rule_order is not None:
            pulumi.set(__self__, "rule_order", rule_order)
        if zpn_cbi_profile_id is not None:
            pulumi.set(__self__, "zpn_cbi_profile_id", zpn_cbi_profile_id)
        if zpn_inspection_profile_id is not None:
            pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)
        if zpn_isolation_profile_id is not None:
            pulumi.set(__self__, "zpn_isolation_profile_id", zpn_isolation_profile_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        This is the name of the policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for providing the rule action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This field defines the description of the server.
        """
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "bypass_default_rule")

    @bypass_default_rule.setter
    def bypass_default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bypass_default_rule", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for providing a customer message for the user.
        """
        return pulumi.get(self, "custom_msg")

    @custom_msg.setter
    def custom_msg(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_msg", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        This is for providing a customer message for the user.
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the description of the access policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "lss_default_rule")

    @lss_default_rule.setter
    def lss_default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "lss_default_rule", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_set_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "reauth_default_rule")

    @reauth_default_rule.setter
    def reauth_default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "reauth_default_rule", value)

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "reauth_idle_timeout")

    @reauth_idle_timeout.setter
    def reauth_idle_timeout(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "reauth_idle_timeout", value)

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "reauth_timeout")

    @reauth_timeout.setter
    def reauth_timeout(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "reauth_timeout", value)

    @property
    @pulumi.getter(name="ruleOrder")
    @_utilities.deprecated("""The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `PolicyAccessReorderRule`""")
    def rule_order(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rule_order", value)

    @property
    @pulumi.getter(name="zpnCbiProfileId")
    def zpn_cbi_profile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "zpn_cbi_profile_id")

    @zpn_cbi_profile_id.setter
    def zpn_cbi_profile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpn_cbi_profile_id", value)

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "zpn_inspection_profile_id")

    @zpn_inspection_profile_id.setter
    def zpn_inspection_profile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpn_inspection_profile_id", value)

    @property
    @pulumi.getter(name="zpnIsolationProfileId")
    def zpn_isolation_profile_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "zpn_isolation_profile_id")

    @zpn_isolation_profile_id.setter
    def zpn_isolation_profile_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpn_isolation_profile_id", value)


if not MYPY:
    class LSSConfigControllerPolicyRuleResourceConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    LSSConfigControllerPolicyRuleResourceConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class LSSConfigControllerPolicyRuleResourceConditionOperandArgsDict(TypedDict):
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgsDict']]]]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    LSSConfigControllerPolicyRuleResourceConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceConditionOperandArgs:
    def __init__(__self__, *,
                 object_type: pulumi.Input[builtins.str],
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "object_type", object_type)
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LSSConfigControllerPolicyRuleResourceConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class MicrotenantUserArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        password: NotRequired[pulumi.Input[builtins.str]]
        username: NotRequired[pulumi.Input[builtins.str]]
elif False:
    MicrotenantUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MicrotenantUserArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class PRAApprovalApplicationArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The unique identifier of the pra application segment
        """
elif False:
    PRAApprovalApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PRAApprovalApplicationArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The unique identifier of the pra application segment
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The unique identifier of the pra application segment
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PRAApprovalWorkingHourArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The days of the week that you want to enable the privileged approval
        """
        end_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The end time that the user no longer has access to the privileged approval
        """
        end_time_cron: NotRequired[pulumi.Input[builtins.str]]
        """
        The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        start_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The start time that the user has access to the privileged approval
        """
        start_time_cron: NotRequired[pulumi.Input[builtins.str]]
        """
        The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        timezone: NotRequired[pulumi.Input[builtins.str]]
        """
        The time zone for the time window of a privileged approval
        """
elif False:
    PRAApprovalWorkingHourArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PRAApprovalWorkingHourArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 end_time: Optional[pulumi.Input[builtins.str]] = None,
                 end_time_cron: Optional[pulumi.Input[builtins.str]] = None,
                 start_time: Optional[pulumi.Input[builtins.str]] = None,
                 start_time_cron: Optional[pulumi.Input[builtins.str]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days: The days of the week that you want to enable the privileged approval
        :param pulumi.Input[builtins.str] end_time: The end time that the user no longer has access to the privileged approval
        :param pulumi.Input[builtins.str] end_time_cron: The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        :param pulumi.Input[builtins.str] start_time: The start time that the user has access to the privileged approval
        :param pulumi.Input[builtins.str] start_time_cron: The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        :param pulumi.Input[builtins.str] timezone: The time zone for the time window of a privileged approval
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if end_time_cron is not None:
            pulumi.set(__self__, "end_time_cron", end_time_cron)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if start_time_cron is not None:
            pulumi.set(__self__, "start_time_cron", start_time_cron)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The days of the week that you want to enable the privileged approval
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The end time that the user no longer has access to the privileged approval
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="endTimeCron")
    def end_time_cron(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        return pulumi.get(self, "end_time_cron")

    @end_time_cron.setter
    def end_time_cron(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time_cron", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The start time that the user has access to the privileged approval
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="startTimeCron")
    def start_time_cron(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        return pulumi.get(self, "start_time_cron")

    @start_time_cron.setter
    def start_time_cron(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time_cron", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone for the time window of a privileged approval
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class PRAConsolePraApplicationArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
elif False:
    PRAConsolePraApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PRAConsolePraApplicationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PRAConsolePraPortalArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The unique identifier of the privileged portal
        """
elif False:
    PRAConsolePraPortalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PRAConsolePraPortalArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The unique identifier of the privileged portal
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The unique identifier of the privileged portal
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessCapabilitiesRuleConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCapabilitiesRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCapabilitiesRuleConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessCapabilitiesRuleConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessCapabilitiesRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCapabilitiesRuleConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCapabilitiesRuleConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessCapabilitiesRulePrivilegedCapabilitiesArgsDict(TypedDict):
        clipboard_copy: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Clipboard Copy function
        """
        clipboard_paste: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Clipboard Paste function
        """
        file_download: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA File Transfer capabilities that enables the File Download function
        """
        file_upload: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA File Transfer capabilities that enables the File Upload function
        """
        inspect_file_download: NotRequired[pulumi.Input[builtins.bool]]
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        """
        inspect_file_upload: NotRequired[pulumi.Input[builtins.bool]]
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        """
        monitor_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        """
        record_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        """
        share_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
elif False:
    PolicyAccessCapabilitiesRulePrivilegedCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCapabilitiesRulePrivilegedCapabilitiesArgs:
    def __init__(__self__, *,
                 clipboard_copy: Optional[pulumi.Input[builtins.bool]] = None,
                 clipboard_paste: Optional[pulumi.Input[builtins.bool]] = None,
                 file_download: Optional[pulumi.Input[builtins.bool]] = None,
                 file_upload: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_file_download: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_file_upload: Optional[pulumi.Input[builtins.bool]] = None,
                 monitor_session: Optional[pulumi.Input[builtins.bool]] = None,
                 record_session: Optional[pulumi.Input[builtins.bool]] = None,
                 share_session: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] clipboard_copy: Indicates the PRA Clipboard Copy function
        :param pulumi.Input[builtins.bool] clipboard_paste: Indicates the PRA Clipboard Paste function
        :param pulumi.Input[builtins.bool] file_download: Indicates the PRA File Transfer capabilities that enables the File Download function
        :param pulumi.Input[builtins.bool] file_upload: Indicates the PRA File Transfer capabilities that enables the File Upload function
        :param pulumi.Input[builtins.bool] inspect_file_download: Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        :param pulumi.Input[builtins.bool] inspect_file_upload: Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        :param pulumi.Input[builtins.bool] monitor_session: Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        :param pulumi.Input[builtins.bool] record_session: Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        :param pulumi.Input[builtins.bool] share_session: Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
        if clipboard_copy is not None:
            pulumi.set(__self__, "clipboard_copy", clipboard_copy)
        if clipboard_paste is not None:
            pulumi.set(__self__, "clipboard_paste", clipboard_paste)
        if file_download is not None:
            pulumi.set(__self__, "file_download", file_download)
        if file_upload is not None:
            pulumi.set(__self__, "file_upload", file_upload)
        if inspect_file_download is not None:
            pulumi.set(__self__, "inspect_file_download", inspect_file_download)
        if inspect_file_upload is not None:
            pulumi.set(__self__, "inspect_file_upload", inspect_file_upload)
        if monitor_session is not None:
            pulumi.set(__self__, "monitor_session", monitor_session)
        if record_session is not None:
            pulumi.set(__self__, "record_session", record_session)
        if share_session is not None:
            pulumi.set(__self__, "share_session", share_session)

    @property
    @pulumi.getter(name="clipboardCopy")
    def clipboard_copy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Clipboard Copy function
        """
        return pulumi.get(self, "clipboard_copy")

    @clipboard_copy.setter
    def clipboard_copy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clipboard_copy", value)

    @property
    @pulumi.getter(name="clipboardPaste")
    def clipboard_paste(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Clipboard Paste function
        """
        return pulumi.get(self, "clipboard_paste")

    @clipboard_paste.setter
    def clipboard_paste(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clipboard_paste", value)

    @property
    @pulumi.getter(name="fileDownload")
    def file_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA File Transfer capabilities that enables the File Download function
        """
        return pulumi.get(self, "file_download")

    @file_download.setter
    def file_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_download", value)

    @property
    @pulumi.getter(name="fileUpload")
    def file_upload(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA File Transfer capabilities that enables the File Upload function
        """
        return pulumi.get(self, "file_upload")

    @file_upload.setter
    def file_upload(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_upload", value)

    @property
    @pulumi.getter(name="inspectFileDownload")
    def inspect_file_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        """
        return pulumi.get(self, "inspect_file_download")

    @inspect_file_download.setter
    def inspect_file_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_file_download", value)

    @property
    @pulumi.getter(name="inspectFileUpload")
    def inspect_file_upload(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        """
        return pulumi.get(self, "inspect_file_upload")

    @inspect_file_upload.setter
    def inspect_file_upload(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_file_upload", value)

    @property
    @pulumi.getter(name="monitorSession")
    def monitor_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        """
        return pulumi.get(self, "monitor_session")

    @monitor_session.setter
    def monitor_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "monitor_session", value)

    @property
    @pulumi.getter(name="recordSession")
    def record_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        """
        return pulumi.get(self, "record_session")

    @record_session.setter
    def record_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "record_session", value)

    @property
    @pulumi.getter(name="shareSession")
    def share_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
        return pulumi.get(self, "share_session")

    @share_session.setter
    def share_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "share_session", value)


if not MYPY:
    class PolicyAccessCredentialRuleConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCredentialRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCredentialRuleConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessCredentialRuleConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessCredentialRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCredentialRuleConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessCredentialRuleConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessCredentialRuleConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCredentialRuleConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCredentialRuleConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessCredentialRuleCredentialArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCredentialRuleCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCredentialRuleCredentialArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PolicyAccessCredentialRuleCredentialPoolArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessCredentialRuleCredentialPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessCredentialRuleCredentialPoolArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PolicyAccessForwardingRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessForwardingRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessForwardingRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessForwardingRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessForwardingRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessForwardingRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessForwardingRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessForwardingRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessForwardingRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessForwardingRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessForwardingRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessForwardingRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessForwardingRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessInspectionRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessInspectionRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessInspectionRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessInspectionRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessInspectionRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessInspectionRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessInspectionRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessInspectionRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessInspectionRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessInspectionRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessInspectionRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessInspectionRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessInspectionRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessIsolationRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessIsolationRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessIsolationRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessIsolationRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessIsolationRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessIsolationRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessIsolationRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessIsolationRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessIsolationRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessIsolationRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessIsolationRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessIsolationRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessIsolationRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessRedirectionRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRedirectionRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessRedirectionRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRedirectionRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRedirectionRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRedirectionRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRedirectionRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRedirectionRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessRedirectionRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessRedirectionRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRedirectionRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessRedirectionRuleServiceEdgeGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    PolicyAccessRedirectionRuleServiceEdgeGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRedirectionRuleServiceEdgeGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessReorderRuleRuleArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        order: pulumi.Input[builtins.str]
elif False:
    PolicyAccessReorderRuleRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessReorderRuleRuleArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str],
                 order: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "order", value)


if not MYPY:
    class PolicyAccessRuleAppConnectorGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    PolicyAccessRuleAppConnectorGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleAppConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessRuleAppServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    PolicyAccessRuleAppServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleAppServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        """
        Supported values: `AND`, `OR`
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] operator: Supported values: `AND`, `OR`
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        """
        Supported values: `AND`, `OR`
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        This is the name of the policy rule.
        """
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] name: This is the name of the policy rule.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessRuleV2AppConnectorGroupArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    PolicyAccessRuleV2AppConnectorGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleV2AppConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessRuleV2AppServerGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    PolicyAccessRuleV2AppServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleV2AppServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyAccessRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyAccessTimeOutRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyAccessTimeOutRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessTimeOutRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyAccessTimeOutRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessTimeOutRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessTimeOutRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyAccessTimeOutRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessTimeOutRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessTimeOutRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyAccessTimeOutRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyAccessTimeOutRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessTimeOutRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyAccessTimeOutRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyBrowserProtectionRuleConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyBrowserProtectionRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyBrowserProtectionRuleConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyBrowserProtectionRuleConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyBrowserProtectionRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyBrowserProtectionRuleConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyBrowserProtectionRuleConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyBrowserProtectionRuleConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyBrowserProtectionRuleConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyCapabilitiesRuleConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCapabilitiesRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCapabilitiesRuleConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyCapabilitiesRuleConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyCapabilitiesRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCapabilitiesRuleConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCapabilitiesRuleConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyCapabilitiesRuleConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCapabilitiesRuleConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCapabilitiesRuleConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyCapabilitiesRulePrivilegedCapabilitiesArgsDict(TypedDict):
        clipboard_copy: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Clipboard Copy function
        """
        clipboard_paste: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Clipboard Paste function
        """
        file_download: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA File Transfer capabilities that enables the File Download function
        """
        file_upload: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA File Transfer capabilities that enables the File Upload function
        """
        inspect_file_download: NotRequired[pulumi.Input[builtins.bool]]
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        """
        inspect_file_upload: NotRequired[pulumi.Input[builtins.bool]]
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        """
        monitor_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        """
        record_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        """
        share_session: NotRequired[pulumi.Input[builtins.bool]]
        """
        Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
elif False:
    PolicyCapabilitiesRulePrivilegedCapabilitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCapabilitiesRulePrivilegedCapabilitiesArgs:
    def __init__(__self__, *,
                 clipboard_copy: Optional[pulumi.Input[builtins.bool]] = None,
                 clipboard_paste: Optional[pulumi.Input[builtins.bool]] = None,
                 file_download: Optional[pulumi.Input[builtins.bool]] = None,
                 file_upload: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_file_download: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_file_upload: Optional[pulumi.Input[builtins.bool]] = None,
                 monitor_session: Optional[pulumi.Input[builtins.bool]] = None,
                 record_session: Optional[pulumi.Input[builtins.bool]] = None,
                 share_session: Optional[pulumi.Input[builtins.bool]] = None):
        """
        :param pulumi.Input[builtins.bool] clipboard_copy: Indicates the PRA Clipboard Copy function
        :param pulumi.Input[builtins.bool] clipboard_paste: Indicates the PRA Clipboard Paste function
        :param pulumi.Input[builtins.bool] file_download: Indicates the PRA File Transfer capabilities that enables the File Download function
        :param pulumi.Input[builtins.bool] file_upload: Indicates the PRA File Transfer capabilities that enables the File Upload function
        :param pulumi.Input[builtins.bool] inspect_file_download: Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        :param pulumi.Input[builtins.bool] inspect_file_upload: Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        :param pulumi.Input[builtins.bool] monitor_session: Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        :param pulumi.Input[builtins.bool] record_session: Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        :param pulumi.Input[builtins.bool] share_session: Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
        if clipboard_copy is not None:
            pulumi.set(__self__, "clipboard_copy", clipboard_copy)
        if clipboard_paste is not None:
            pulumi.set(__self__, "clipboard_paste", clipboard_paste)
        if file_download is not None:
            pulumi.set(__self__, "file_download", file_download)
        if file_upload is not None:
            pulumi.set(__self__, "file_upload", file_upload)
        if inspect_file_download is not None:
            pulumi.set(__self__, "inspect_file_download", inspect_file_download)
        if inspect_file_upload is not None:
            pulumi.set(__self__, "inspect_file_upload", inspect_file_upload)
        if monitor_session is not None:
            pulumi.set(__self__, "monitor_session", monitor_session)
        if record_session is not None:
            pulumi.set(__self__, "record_session", record_session)
        if share_session is not None:
            pulumi.set(__self__, "share_session", share_session)

    @property
    @pulumi.getter(name="clipboardCopy")
    def clipboard_copy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Clipboard Copy function
        """
        return pulumi.get(self, "clipboard_copy")

    @clipboard_copy.setter
    def clipboard_copy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clipboard_copy", value)

    @property
    @pulumi.getter(name="clipboardPaste")
    def clipboard_paste(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Clipboard Paste function
        """
        return pulumi.get(self, "clipboard_paste")

    @clipboard_paste.setter
    def clipboard_paste(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "clipboard_paste", value)

    @property
    @pulumi.getter(name="fileDownload")
    def file_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA File Transfer capabilities that enables the File Download function
        """
        return pulumi.get(self, "file_download")

    @file_download.setter
    def file_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_download", value)

    @property
    @pulumi.getter(name="fileUpload")
    def file_upload(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA File Transfer capabilities that enables the File Upload function
        """
        return pulumi.get(self, "file_upload")

    @file_upload.setter
    def file_upload(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_upload", value)

    @property
    @pulumi.getter(name="inspectFileDownload")
    def inspect_file_download(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and downloads the file following the inspection
        """
        return pulumi.get(self, "inspect_file_download")

    @inspect_file_download.setter
    def inspect_file_download(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_file_download", value)

    @property
    @pulumi.getter(name="inspectFileUpload")
    def inspect_file_upload(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Inspects the file via ZIA sandbox (if you have set up the ZIA cloud and the Integrations settings) and uploads the file following the inspection
        """
        return pulumi.get(self, "inspect_file_upload")

    @inspect_file_upload.setter
    def inspect_file_upload(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_file_upload", value)

    @property
    @pulumi.getter(name="monitorSession")
    def monitor_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Monitoring Capabilities to enable the PRA Session Monitoring function
        """
        return pulumi.get(self, "monitor_session")

    @monitor_session.setter
    def monitor_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "monitor_session", value)

    @property
    @pulumi.getter(name="recordSession")
    def record_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Session Recording capabilities to enable PRA Session Recording
        """
        return pulumi.get(self, "record_session")

    @record_session.setter
    def record_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "record_session", value)

    @property
    @pulumi.getter(name="shareSession")
    def share_session(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates the PRA Session Control and Monitoring capabilities to enable PRA Session Monitoring
        """
        return pulumi.get(self, "share_session")

    @share_session.setter
    def share_session(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "share_session", value)


if not MYPY:
    class PolicyCredentialRuleConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCredentialRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCredentialRuleConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyCredentialRuleConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyCredentialRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCredentialRuleConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyCredentialRuleConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyCredentialRuleConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCredentialRuleConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCredentialRuleConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyCredentialRuleCredentialArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCredentialRuleCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCredentialRuleCredentialArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PolicyCredentialRuleCredentialPoolArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyCredentialRuleCredentialPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyCredentialRuleCredentialPoolArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PolicyForwardingRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyForwardingRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyForwardingRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyForwardingRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyForwardingRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyForwardingRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyForwardingRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyForwardingRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyForwardingRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyForwardingRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyInspectionRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyInspectionRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyInspectionRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyInspectionRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyInspectionRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyInspectionRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyInspectionRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyInspectionRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyInspectionRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyInspectionRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyIsolationRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyIsolationRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyIsolationRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyIsolationRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyIsolationRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyIsolationRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyIsolationRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyIsolationRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyIsolationRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyIsolationRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PolicyRedirectionRuleConditionArgsDict(TypedDict):
        operator: pulumi.Input[builtins.str]
        id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyRedirectionRuleConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
elif False:
    PolicyRedirectionRuleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyRedirectionRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRedirectionRuleConditionOperandArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyRedirectionRuleConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRedirectionRuleConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyRedirectionRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


if not MYPY:
    class PolicyRedirectionRuleConditionOperandArgsDict(TypedDict):
        lhs: pulumi.Input[builtins.str]
        """
        This signifies the key for the object type. String ID example: id
        """
        object_type: pulumi.Input[builtins.str]
        """
        This is for specifying the policy critiera.
        """
        id: NotRequired[pulumi.Input[builtins.str]]
        idp_id: NotRequired[pulumi.Input[builtins.str]]
        microtenant_id: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        rhs_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyRedirectionRuleConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyRedirectionRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[builtins.str],
                 object_type: pulumi.Input[builtins.str],
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 idp_id: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] lhs: This signifies the key for the object type. String ID example: id
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[builtins.str] microtenant_id: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[builtins.str] rhs: This denotes the value for the given object type. Its value depends upon the key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] rhs_lists: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[builtins.str]:
        """
        This signifies the key for the object type. String ID example: id
        """
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[builtins.str]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This denotes the value for the given object type. Its value depends upon the key.
        """
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "rhs_lists", value)


if not MYPY:
    class PolicyRedirectionRuleServiceEdgeGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    PolicyRedirectionRuleServiceEdgeGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyRedirectionRuleServiceEdgeGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PolicyTimeoutRuleV2ConditionArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
        operands: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandArgsDict']]]]
        """
        This signifies the various policy criteria.
        """
        operator: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyTimeoutRuleV2ConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTimeoutRuleV2ConditionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandArgs']]]] = None,
                 operator: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandArgs']]] operands: This signifies the various policy criteria.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandArgs']]]]:
        """
        This signifies the various policy criteria.
        """
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "operator", value)


if not MYPY:
    class PolicyTimeoutRuleV2ConditionOperandArgsDict(TypedDict):
        entry_values: NotRequired[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandEntryValueArgsDict']]]]
        object_type: NotRequired[pulumi.Input[builtins.str]]
        """
        This is for specifying the policy critiera.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
elif False:
    PolicyTimeoutRuleV2ConditionOperandArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTimeoutRuleV2ConditionOperandArgs:
    def __init__(__self__, *,
                 entry_values: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandEntryValueArgs']]]] = None,
                 object_type: Optional[pulumi.Input[builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.str] object_type: This is for specifying the policy critiera.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] values: This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        if entry_values is not None:
            pulumi.set(__self__, "entry_values", entry_values)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="entryValues")
    def entry_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandEntryValueArgs']]]]:
        return pulumi.get(self, "entry_values")

    @entry_values.setter
    def entry_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTimeoutRuleV2ConditionOperandEntryValueArgs']]]]):
        pulumi.set(self, "entry_values", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for specifying the policy critiera.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class PolicyTimeoutRuleV2ConditionOperandEntryValueArgsDict(TypedDict):
        lhs: NotRequired[pulumi.Input[builtins.str]]
        rhs: NotRequired[pulumi.Input[builtins.str]]
elif False:
    PolicyTimeoutRuleV2ConditionOperandEntryValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PolicyTimeoutRuleV2ConditionOperandEntryValueArgs:
    def __init__(__self__, *,
                 lhs: Optional[pulumi.Input[builtins.str]] = None,
                 rhs: Optional[pulumi.Input[builtins.str]] = None):
        if lhs is not None:
            pulumi.set(__self__, "lhs", lhs)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rhs", value)


if not MYPY:
    class PraApprovalControllerApplicationArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The unique identifier of the pra application segment
        """
elif False:
    PraApprovalControllerApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PraApprovalControllerApplicationArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The unique identifier of the pra application segment
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The unique identifier of the pra application segment
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PraApprovalControllerWorkingHourArgsDict(TypedDict):
        days: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The days of the week that you want to enable the privileged approval
        """
        end_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The end time that the user no longer has access to the privileged approval
        """
        end_time_cron: NotRequired[pulumi.Input[builtins.str]]
        """
        The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        start_time: NotRequired[pulumi.Input[builtins.str]]
        """
        The start time that the user has access to the privileged approval
        """
        start_time_cron: NotRequired[pulumi.Input[builtins.str]]
        """
        The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        timezone: NotRequired[pulumi.Input[builtins.str]]
        """
        The time zone for the time window of a privileged approval
        """
elif False:
    PraApprovalControllerWorkingHourArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PraApprovalControllerWorkingHourArgs:
    def __init__(__self__, *,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 end_time: Optional[pulumi.Input[builtins.str]] = None,
                 end_time_cron: Optional[pulumi.Input[builtins.str]] = None,
                 start_time: Optional[pulumi.Input[builtins.str]] = None,
                 start_time_cron: Optional[pulumi.Input[builtins.str]] = None,
                 timezone: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] days: The days of the week that you want to enable the privileged approval
        :param pulumi.Input[builtins.str] end_time: The end time that the user no longer has access to the privileged approval
        :param pulumi.Input[builtins.str] end_time_cron: The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        :param pulumi.Input[builtins.str] start_time: The start time that the user has access to the privileged approval
        :param pulumi.Input[builtins.str] start_time_cron: The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        :param pulumi.Input[builtins.str] timezone: The time zone for the time window of a privileged approval
        """
        if days is not None:
            pulumi.set(__self__, "days", days)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if end_time_cron is not None:
            pulumi.set(__self__, "end_time_cron", end_time_cron)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if start_time_cron is not None:
            pulumi.set(__self__, "start_time_cron", start_time_cron)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The days of the week that you want to enable the privileged approval
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The end time that the user no longer has access to the privileged approval
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="endTimeCron")
    def end_time_cron(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]The cron expression provided to configure the privileged approval end time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        return pulumi.get(self, "end_time_cron")

    @end_time_cron.setter
    def end_time_cron(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time_cron", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The start time that the user has access to the privileged approval
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="startTimeCron")
    def start_time_cron(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The cron expression provided to configure the privileged approval start time working hours. The standard cron expression format is [Seconds][Minutes][Hours][Day of the Month][Month][Day of the Week][Year]
        """
        return pulumi.get(self, "start_time_cron")

    @start_time_cron.setter
    def start_time_cron(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time_cron", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone for the time window of a privileged approval
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class PraConsoleControllerPraApplicationArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
elif False:
    PraConsoleControllerPraApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PraConsoleControllerPraApplicationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PraConsoleControllerPraPortalArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        The unique identifier of the privileged portal
        """
elif False:
    PraConsoleControllerPraPortalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PraConsoleControllerPraPortalArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ids: The unique identifier of the privileged portal
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The unique identifier of the privileged portal
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class PraCredentialPoolCredentialArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    PraCredentialPoolCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PraCredentialPoolCredentialArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class SegmentGroupApplicationArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[builtins.str]]
elif False:
    SegmentGroupApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SegmentGroupApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[builtins.str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class ServerGroupAppConnectorGroupArgsDict(TypedDict):
        ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
elif False:
    ServerGroupAppConnectorGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupAppConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ServerGroupApplicationArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    ServerGroupApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupApplicationArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ServerGroupServerArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    ServerGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupServerArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ServiceEdgeGroupServiceEdgeArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    ServiceEdgeGroupServiceEdgeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceEdgeGroupServiceEdgeArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class ServiceEdgeGroupTrustedNetworkArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    ServiceEdgeGroupTrustedNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceEdgeGroupTrustedNetworkArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class GetApplicationSegmentBrowserAccessTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentBrowserAccessTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentBrowserAccessTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentBrowserAccessUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentBrowserAccessUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentBrowserAccessUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentInspectionTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentInspectionTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentInspectionTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentInspectionUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentInspectionUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentInspectionUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentPRATcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentPRATcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentPRATcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentPRAUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentPRAUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentPRAUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentTcpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentTcpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetApplicationSegmentUdpPortRangeArgsDict(TypedDict):
        from_: NotRequired[builtins.str]
        to: NotRequired[builtins.str]
elif False:
    GetApplicationSegmentUdpPortRangeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationSegmentUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[builtins.str] = None,
                 to: Optional[builtins.str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[builtins.str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[builtins.str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[builtins.str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[builtins.str]):
        pulumi.set(self, "to", value)


if not MYPY:
    class GetCredentialPoolCredentialArgsDict(TypedDict):
        ids: NotRequired[Sequence[builtins.str]]
elif False:
    GetCredentialPoolCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetCredentialPoolCredentialArgs:
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class GetLSSConfigControllerConfigArgsDict(TypedDict):
        audit_message: builtins.str
        description: builtins.str
        enabled: builtins.bool
        filters: Sequence[builtins.str]
        format: builtins.str
        id: builtins.str
        lss_host: builtins.str
        lss_port: builtins.str
        name: builtins.str
        source_log_type: builtins.str
        use_tls: builtins.bool
elif False:
    GetLSSConfigControllerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetLSSConfigControllerConfigArgs:
    def __init__(__self__, *,
                 audit_message: builtins.str,
                 description: builtins.str,
                 enabled: builtins.bool,
                 filters: Sequence[builtins.str],
                 format: builtins.str,
                 id: builtins.str,
                 lss_host: builtins.str,
                 lss_port: builtins.str,
                 name: builtins.str,
                 source_log_type: builtins.str,
                 use_tls: builtins.bool):
        pulumi.set(__self__, "audit_message", audit_message)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> builtins.str:
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: builtins.str):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: builtins.str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: builtins.bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Sequence[builtins.str]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def format(self) -> builtins.str:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: builtins.str):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> builtins.str:
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: builtins.str):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> builtins.str:
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: builtins.str):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: builtins.str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> builtins.str:
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: builtins.str):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> builtins.bool:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: builtins.bool):
        pulumi.set(self, "use_tls", value)


if not MYPY:
    class GetPraCredentialPoolCredentialArgsDict(TypedDict):
        ids: NotRequired[Sequence[builtins.str]]
elif False:
    GetPraCredentialPoolCredentialArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPraCredentialPoolCredentialArgs:
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[Sequence[builtins.str]]):
        pulumi.set(self, "ids", value)


