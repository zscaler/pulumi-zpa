# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyBrowserProtectionRuleArgs', 'PolicyBrowserProtectionRule']

@pulumi.input_type
class PolicyBrowserProtectionRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PolicyBrowserProtectionRule resource.
        :param pulumi.Input[builtins.str] action: This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        :param pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[builtins.str] description: This is the description of the access policy rule.
        :param pulumi.Input[builtins.str] name: This is the name of the policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PolicyBrowserProtectionRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_set_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyBrowserProtectionRule resources.
        :param pulumi.Input[builtins.str] action: This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        :param pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[builtins.str] description: This is the description of the access policy rule.
        :param pulumi.Input[builtins.str] name: This is the name of the policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyBrowserProtectionRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_set_id", value)


@pulumi.type_token("zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule")
class PolicyBrowserProtectionRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyBrowserProtectionRuleConditionArgs', 'PolicyBrowserProtectionRuleConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
        * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)

        The **zpa_policy_browser_protection_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.

          ⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.

          ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``

        ## Example Usage

        ### Browser Protection With MONITOR ACTION

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        # Retrieve Policy Types
        # Retrieve Identity Provider ID
        this = zpa.get_id_p_controller(name="Idp_Name")
        # Retrieve SAML Attribute ID
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        # Retrieve SAML Attribute ID
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("this",
            name="Example",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_browser_protection_rule = zpa.PolicyBrowserProtectionRule("this",
            name="Example",
            description="Example",
            action="MONITOR",
            conditions=[
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "APP_GROUP",
                        "values": [this_segment_group.id],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [
                        {
                            "object_type": "SAML",
                            "entry_values": [
                                {
                                    "rhs": "user1@acme.com",
                                    "lhs": email_user_sso.id,
                                },
                                {
                                    "rhs": "A000",
                                    "lhs": group_user.id,
                                },
                            ],
                        },
                        {
                            "object_type": "SCIM_GROUP",
                            "entry_values": [
                                {
                                    "rhs": a000.id,
                                    "lhs": this.id,
                                },
                                {
                                    "rhs": b000.id,
                                    "lhs": this.id,
                                },
                            ],
                        },
                    ],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "USER_PORTAL",
                        "values": ["145262059234265326"],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "CLIENT_TYPE",
                        "values": ["zpn_client_type_exporter"],
                    }],
                },
            ])
        ```

        ### Browser Protection With DO_NOT_MONITOR ACTION

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        # Retrieve Policy Types
        # Retrieve Identity Provider ID
        this = zpa.get_id_p_controller(name="Idp_Name")
        # Retrieve SAML Attribute ID
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        # Retrieve SAML Attribute ID
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("this",
            name="Example",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_browser_protection_rule = zpa.PolicyBrowserProtectionRule("this",
            name="Example",
            description="Example",
            action="DO_NOT_MONITOR",
            conditions=[
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "APP_GROUP",
                        "values": [this_segment_group.id],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [
                        {
                            "object_type": "SAML",
                            "entry_values": [
                                {
                                    "rhs": "user1@acme.com",
                                    "lhs": email_user_sso.id,
                                },
                                {
                                    "rhs": "A000",
                                    "lhs": group_user.id,
                                },
                            ],
                        },
                        {
                            "object_type": "SCIM_GROUP",
                            "entry_values": [
                                {
                                    "rhs": a000.id,
                                    "lhs": this.id,
                                },
                                {
                                    "rhs": b000.id,
                                    "lhs": this.id,
                                },
                            ],
                        },
                    ],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "USER_PORTAL",
                        "values": ["145262059234265326"],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "CLIENT_TYPE",
                        "values": ["zpn_client_type_exporter"],
                    }],
                },
            ])
        ```

        ## LHS and RHS Values

        | Object Type | LHS| RHS| VALUES
        |----------|-----------|----------|----------
        | APP  |   |  | ``application_segment_id`` |
        | APP_GROUP  |   |  | ``segment_group_id``|
        | CLIENT_TYPE  |   |  |  ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |
        | EDGE_CONNECTOR_GROUP  |   |  |  ``<edge_connector_id>`` |
        | BRANCH_CONNECTOR_GROUP  |   |  |  ``<branch_connector_id>`` |
        | LOCATION   |   |  | ``location_id`` |
        | MACHINE_GRP   |   |  | ``machine_group_id`` |
        | SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |
        | SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |
        | SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |
        | PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``"true"`` / ``"false"`` |
        | POSTURE | ``posture_udid``  | ``"true"`` / ``"false"`` |
        | TRUSTED_NETWORK | ``network_id``  | ``"true"`` |
        | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``"true"`` / ``"false"`` |
        | RISK_FACTOR_TYPE | ``ZIA``  | ``"UNKNOWN", "LOW", "MEDIUM", "HIGH", "CRITICAL"`` |
        | CHROME_ENTERPRISE | ``managed``  | ``"true" / "false"`` |

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Policy access rule can be imported by using `<RULE ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule example <rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyBrowserProtectionRuleConditionArgs', 'PolicyBrowserProtectionRuleConditionArgsDict']]]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[builtins.str] description: This is the description of the access policy rule.
        :param pulumi.Input[builtins.str] name: This is the name of the policy rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyBrowserProtectionRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
        * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)

        The **zpa_policy_browser_protection_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.

          ⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.

          ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``

        ## Example Usage

        ### Browser Protection With MONITOR ACTION

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        # Retrieve Policy Types
        # Retrieve Identity Provider ID
        this = zpa.get_id_p_controller(name="Idp_Name")
        # Retrieve SAML Attribute ID
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        # Retrieve SAML Attribute ID
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("this",
            name="Example",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_browser_protection_rule = zpa.PolicyBrowserProtectionRule("this",
            name="Example",
            description="Example",
            action="MONITOR",
            conditions=[
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "APP_GROUP",
                        "values": [this_segment_group.id],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [
                        {
                            "object_type": "SAML",
                            "entry_values": [
                                {
                                    "rhs": "user1@acme.com",
                                    "lhs": email_user_sso.id,
                                },
                                {
                                    "rhs": "A000",
                                    "lhs": group_user.id,
                                },
                            ],
                        },
                        {
                            "object_type": "SCIM_GROUP",
                            "entry_values": [
                                {
                                    "rhs": a000.id,
                                    "lhs": this.id,
                                },
                                {
                                    "rhs": b000.id,
                                    "lhs": this.id,
                                },
                            ],
                        },
                    ],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "USER_PORTAL",
                        "values": ["145262059234265326"],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "CLIENT_TYPE",
                        "values": ["zpn_client_type_exporter"],
                    }],
                },
            ])
        ```

        ### Browser Protection With DO_NOT_MONITOR ACTION

        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        # Retrieve Policy Types
        # Retrieve Identity Provider ID
        this = zpa.get_id_p_controller(name="Idp_Name")
        # Retrieve SAML Attribute ID
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        # Retrieve SAML Attribute ID
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        # Retrieve SCIM Group ID
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("this",
            name="Example",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_browser_protection_rule = zpa.PolicyBrowserProtectionRule("this",
            name="Example",
            description="Example",
            action="DO_NOT_MONITOR",
            conditions=[
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "APP_GROUP",
                        "values": [this_segment_group.id],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [
                        {
                            "object_type": "SAML",
                            "entry_values": [
                                {
                                    "rhs": "user1@acme.com",
                                    "lhs": email_user_sso.id,
                                },
                                {
                                    "rhs": "A000",
                                    "lhs": group_user.id,
                                },
                            ],
                        },
                        {
                            "object_type": "SCIM_GROUP",
                            "entry_values": [
                                {
                                    "rhs": a000.id,
                                    "lhs": this.id,
                                },
                                {
                                    "rhs": b000.id,
                                    "lhs": this.id,
                                },
                            ],
                        },
                    ],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "USER_PORTAL",
                        "values": ["145262059234265326"],
                    }],
                },
                {
                    "operator": "OR",
                    "operands": [{
                        "object_type": "CLIENT_TYPE",
                        "values": ["zpn_client_type_exporter"],
                    }],
                },
            ])
        ```

        ## LHS and RHS Values

        | Object Type | LHS| RHS| VALUES
        |----------|-----------|----------|----------
        | APP  |   |  | ``application_segment_id`` |
        | APP_GROUP  |   |  | ``segment_group_id``|
        | CLIENT_TYPE  |   |  |  ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |
        | EDGE_CONNECTOR_GROUP  |   |  |  ``<edge_connector_id>`` |
        | BRANCH_CONNECTOR_GROUP  |   |  |  ``<branch_connector_id>`` |
        | LOCATION   |   |  | ``location_id`` |
        | MACHINE_GRP   |   |  | ``machine_group_id`` |
        | SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |
        | SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |
        | SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |
        | PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``"true"`` / ``"false"`` |
        | POSTURE | ``posture_udid``  | ``"true"`` / ``"false"`` |
        | TRUSTED_NETWORK | ``network_id``  | ``"true"`` |
        | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``"true"`` / ``"false"`` |
        | RISK_FACTOR_TYPE | ``ZIA``  | ``"UNKNOWN", "LOW", "MEDIUM", "HIGH", "CRITICAL"`` |
        | CHROME_ENTERPRISE | ``managed``  | ``"true" / "false"`` |

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Policy access rule can be imported by using `<RULE ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule example <rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyBrowserProtectionRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyBrowserProtectionRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyBrowserProtectionRuleConditionArgs', 'PolicyBrowserProtectionRuleConditionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyBrowserProtectionRuleArgs.__new__(PolicyBrowserProtectionRuleArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["description"] = description
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_set_id"] = None
        super(PolicyBrowserProtectionRule, __self__).__init__(
            'zpa:index/policyBrowserProtectionRule:PolicyBrowserProtectionRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PolicyBrowserProtectionRuleConditionArgs', 'PolicyBrowserProtectionRuleConditionArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            policy_set_id: Optional[pulumi.Input[builtins.str]] = None) -> 'PolicyBrowserProtectionRule':
        """
        Get an existing PolicyBrowserProtectionRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        :param pulumi.Input[Sequence[pulumi.Input[Union['PolicyBrowserProtectionRuleConditionArgs', 'PolicyBrowserProtectionRuleConditionArgsDict']]]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[builtins.str] description: This is the description of the access policy rule.
        :param pulumi.Input[builtins.str] name: This is the name of the policy rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyBrowserProtectionRuleState.__new__(_PolicyBrowserProtectionRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["description"] = description
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_set_id"] = policy_set_id
        return PolicyBrowserProtectionRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This is for providing the rule action. Supported values: `MONITOR`, `DO_NOT_MONITOR`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.PolicyBrowserProtectionRuleCondition']]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "policy_set_id")

