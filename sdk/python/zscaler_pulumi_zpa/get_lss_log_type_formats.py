# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetLSSLogTypeFormatsResult',
    'AwaitableGetLSSLogTypeFormatsResult',
    'get_lss_log_type_formats',
    'get_lss_log_type_formats_output',
]

@pulumi.output_type
class GetLSSLogTypeFormatsResult:
    """
    A collection of values returned by getLSSLogTypeFormats.
    """
    def __init__(__self__, csv=None, id=None, json=None, log_type=None, tsv=None):
        if csv and not isinstance(csv, str):
            raise TypeError("Expected argument 'csv' to be a str")
        pulumi.set(__self__, "csv", csv)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if log_type and not isinstance(log_type, str):
            raise TypeError("Expected argument 'log_type' to be a str")
        pulumi.set(__self__, "log_type", log_type)
        if tsv and not isinstance(tsv, str):
            raise TypeError("Expected argument 'tsv' to be a str")
        pulumi.set(__self__, "tsv", tsv)

    @property
    @pulumi.getter
    def csv(self) -> str:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def tsv(self) -> str:
        return pulumi.get(self, "tsv")


class AwaitableGetLSSLogTypeFormatsResult(GetLSSLogTypeFormatsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLSSLogTypeFormatsResult(
            csv=self.csv,
            id=self.id,
            json=self.json,
            log_type=self.log_type,
            tsv=self.tsv)


def get_lss_log_type_formats(log_type: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLSSLogTypeFormatsResult:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-log-streaming-service)
    * [API documentation](https://help.zscaler.com/zpa/configuring-log-streaming-service-configurations-using-api)

    Use the **zpa_lss_config_log_type_formats** data source to get information about all LSS log type formats in the Zscaler Private Access cloud. This data source is required when creating an LSS Config Controller resource.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    zpn_trans_log = zpa.get_lss_log_type_formats(log_type="zpn_trans_log")
    zpn_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_auth_log")
    zpn_ast_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_ast_auth_log")
    zpn_http_trans_log = zpa.get_lss_log_type_formats(log_type="zpn_http_trans_log")
    zpn_audit_log = zpa.get_lss_log_type_formats(log_type="zpn_audit_log")
    zpn_sys_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_sys_auth_log")
    zpn_ast_comprehensive_stats = zpa.get_lss_log_type_formats(log_type="zpn_ast_comprehensive_stats")
    zpn_waf_http_exchanges_log = zpa.get_lss_log_type_formats(log_type="zpn_waf_http_exchanges_log")
    zpn_pbroker_comprehensive_stats = zpa.get_lss_log_type_formats(log_type="zpn_pbroker_comprehensive_stats")
    ```
    <!--End PulumiCodeChooser -->

    ### Read-Only

    The following arguments are supported:

    * `log_type` - (Required) The type of log to be exported.
      * `zpn_trans_log`
      * `zpn_auth_log`
      * `zpn_ast_auth_log`
      * `zpn_http_trans_log`
      * `zpn_audit_log`
      * `zpn_sys_auth_log`
      * `zpn_ast_comprehensive_stats`
      * `zpn_waf_http_exchanges_log`
      * `zpn_pbroker_comprehensive_stats`
    """
    __args__ = dict()
    __args__['logType'] = log_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getLSSLogTypeFormats:getLSSLogTypeFormats', __args__, opts=opts, typ=GetLSSLogTypeFormatsResult).value

    return AwaitableGetLSSLogTypeFormatsResult(
        csv=pulumi.get(__ret__, 'csv'),
        id=pulumi.get(__ret__, 'id'),
        json=pulumi.get(__ret__, 'json'),
        log_type=pulumi.get(__ret__, 'log_type'),
        tsv=pulumi.get(__ret__, 'tsv'))


@_utilities.lift_output_func(get_lss_log_type_formats)
def get_lss_log_type_formats_output(log_type: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLSSLogTypeFormatsResult]:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-log-streaming-service)
    * [API documentation](https://help.zscaler.com/zpa/configuring-log-streaming-service-configurations-using-api)

    Use the **zpa_lss_config_log_type_formats** data source to get information about all LSS log type formats in the Zscaler Private Access cloud. This data source is required when creating an LSS Config Controller resource.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    zpn_trans_log = zpa.get_lss_log_type_formats(log_type="zpn_trans_log")
    zpn_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_auth_log")
    zpn_ast_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_ast_auth_log")
    zpn_http_trans_log = zpa.get_lss_log_type_formats(log_type="zpn_http_trans_log")
    zpn_audit_log = zpa.get_lss_log_type_formats(log_type="zpn_audit_log")
    zpn_sys_auth_log = zpa.get_lss_log_type_formats(log_type="zpn_sys_auth_log")
    zpn_ast_comprehensive_stats = zpa.get_lss_log_type_formats(log_type="zpn_ast_comprehensive_stats")
    zpn_waf_http_exchanges_log = zpa.get_lss_log_type_formats(log_type="zpn_waf_http_exchanges_log")
    zpn_pbroker_comprehensive_stats = zpa.get_lss_log_type_formats(log_type="zpn_pbroker_comprehensive_stats")
    ```
    <!--End PulumiCodeChooser -->

    ### Read-Only

    The following arguments are supported:

    * `log_type` - (Required) The type of log to be exported.
      * `zpn_trans_log`
      * `zpn_auth_log`
      * `zpn_ast_auth_log`
      * `zpn_http_trans_log`
      * `zpn_audit_log`
      * `zpn_sys_auth_log`
      * `zpn_ast_comprehensive_stats`
      * `zpn_waf_http_exchanges_log`
      * `zpn_pbroker_comprehensive_stats`
    """
    ...
