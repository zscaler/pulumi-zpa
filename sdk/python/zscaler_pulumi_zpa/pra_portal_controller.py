# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PraPortalControllerArgs', 'PraPortalController']

@pulumi.input_type
class PraPortalControllerArgs:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_notification: Optional[pulumi.Input[str]] = None,
                 user_notification_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a PraPortalController resource.
        :param pulumi.Input[str] certificate_id: The unique identifier of the certificate
        :param pulumi.Input[str] description: The description of the privileged portal
        :param pulumi.Input[str] domain: The domain of the privileged portal
        :param pulumi.Input[bool] enabled: Whether or not the privileged portal is enabled
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
               retrieve data from all customers associated with the tenant.
        :param pulumi.Input[str] name: The name of the privileged portal
        :param pulumi.Input[str] user_notification: The notification message displayed in the banner of the privileged portallink, if enabled
        :param pulumi.Input[bool] user_notification_enabled: Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_notification is not None:
            pulumi.set(__self__, "user_notification", user_notification)
        if user_notification_enabled is not None:
            pulumi.set(__self__, "user_notification_enabled", user_notification_enabled)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the certificate
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged portal
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the privileged portal
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the privileged portal is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
        retrieve data from all customers associated with the tenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged portal
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userNotification")
    def user_notification(self) -> Optional[pulumi.Input[str]]:
        """
        The notification message displayed in the banner of the privileged portallink, if enabled
        """
        return pulumi.get(self, "user_notification")

    @user_notification.setter
    def user_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_notification", value)

    @property
    @pulumi.getter(name="userNotificationEnabled")
    def user_notification_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        return pulumi.get(self, "user_notification_enabled")

    @user_notification_enabled.setter
    def user_notification_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_notification_enabled", value)


@pulumi.input_type
class _PraPortalControllerState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_notification: Optional[pulumi.Input[str]] = None,
                 user_notification_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering PraPortalController resources.
        :param pulumi.Input[str] certificate_id: The unique identifier of the certificate
        :param pulumi.Input[str] description: The description of the privileged portal
        :param pulumi.Input[str] domain: The domain of the privileged portal
        :param pulumi.Input[bool] enabled: Whether or not the privileged portal is enabled
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
               retrieve data from all customers associated with the tenant.
        :param pulumi.Input[str] name: The name of the privileged portal
        :param pulumi.Input[str] user_notification: The notification message displayed in the banner of the privileged portallink, if enabled
        :param pulumi.Input[bool] user_notification_enabled: Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_notification is not None:
            pulumi.set(__self__, "user_notification", user_notification)
        if user_notification_enabled is not None:
            pulumi.set(__self__, "user_notification_enabled", user_notification_enabled)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the certificate
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged portal
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the privileged portal
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the privileged portal is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
        retrieve data from all customers associated with the tenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged portal
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userNotification")
    def user_notification(self) -> Optional[pulumi.Input[str]]:
        """
        The notification message displayed in the banner of the privileged portallink, if enabled
        """
        return pulumi.get(self, "user_notification")

    @user_notification.setter
    def user_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_notification", value)

    @property
    @pulumi.getter(name="userNotificationEnabled")
    def user_notification_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        return pulumi.get(self, "user_notification_enabled")

    @user_notification_enabled.setter
    def user_notification_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_notification_enabled", value)


warnings.warn("""zpa.index/praportalcontroller.PraPortalController has been deprecated in favor of zpa.index/praportal.PRAPortal""", DeprecationWarning)


class PraPortalController(pulumi.CustomResource):
    warnings.warn("""zpa.index/praportalcontroller.PraPortalController has been deprecated in favor of zpa.index/praportal.PRAPortal""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_notification: Optional[pulumi.Input[str]] = None,
                 user_notification_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a PraPortalController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The unique identifier of the certificate
        :param pulumi.Input[str] description: The description of the privileged portal
        :param pulumi.Input[str] domain: The domain of the privileged portal
        :param pulumi.Input[bool] enabled: Whether or not the privileged portal is enabled
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
               retrieve data from all customers associated with the tenant.
        :param pulumi.Input[str] name: The name of the privileged portal
        :param pulumi.Input[str] user_notification: The notification message displayed in the banner of the privileged portallink, if enabled
        :param pulumi.Input[bool] user_notification_enabled: Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PraPortalControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PraPortalController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PraPortalControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PraPortalControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_notification: Optional[pulumi.Input[str]] = None,
                 user_notification_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        pulumi.log.warn("""PraPortalController is deprecated: zpa.index/praportalcontroller.PraPortalController has been deprecated in favor of zpa.index/praportal.PRAPortal""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PraPortalControllerArgs.__new__(PraPortalControllerArgs)

            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
            __props__.__dict__["user_notification"] = user_notification
            __props__.__dict__["user_notification_enabled"] = user_notification_enabled
        super(PraPortalController, __self__).__init__(
            'zpa:index/praPortalController:PraPortalController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            microtenant_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            user_notification: Optional[pulumi.Input[str]] = None,
            user_notification_enabled: Optional[pulumi.Input[bool]] = None) -> 'PraPortalController':
        """
        Get an existing PraPortalController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: The unique identifier of the certificate
        :param pulumi.Input[str] description: The description of the privileged portal
        :param pulumi.Input[str] domain: The domain of the privileged portal
        :param pulumi.Input[bool] enabled: Whether or not the privileged portal is enabled
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
               retrieve data from all customers associated with the tenant.
        :param pulumi.Input[str] name: The name of the privileged portal
        :param pulumi.Input[str] user_notification: The notification message displayed in the banner of the privileged portallink, if enabled
        :param pulumi.Input[bool] user_notification_enabled: Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PraPortalControllerState.__new__(_PraPortalControllerState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["user_notification"] = user_notification
        __props__.__dict__["user_notification_enabled"] = user_notification_enabled
        return PraPortalController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        The unique identifier of the certificate
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the privileged portal
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        The domain of the privileged portal
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not the privileged portal is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[str]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant. Pass microtenantId as null to
        retrieve data from all customers associated with the tenant.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the privileged portal
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userNotification")
    def user_notification(self) -> pulumi.Output[Optional[str]]:
        """
        The notification message displayed in the banner of the privileged portallink, if enabled
        """
        return pulumi.get(self, "user_notification")

    @property
    @pulumi.getter(name="userNotificationEnabled")
    def user_notification_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the Notification Banner is enabled (true) or disabled (false)
        """
        return pulumi.get(self, "user_notification_enabled")

