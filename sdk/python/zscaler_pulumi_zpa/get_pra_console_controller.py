# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPraConsoleControllerResult',
    'AwaitableGetPraConsoleControllerResult',
    'get_pra_console_controller',
    'get_pra_console_controller_output',
]

warnings.warn("""zpa.index/getpraconsolecontroller.getPraConsoleController has been deprecated in favor of zpa.index/getpraconsole.getPRAConsole""", DeprecationWarning)

@pulumi.output_type
class GetPraConsoleControllerResult:
    """
    A collection of values returned by getPraConsoleController.
    """
    def __init__(__self__, creation_time=None, description=None, enabled=None, icon_text=None, id=None, microtenant_id=None, microtenant_name=None, modified_by=None, modified_time=None, name=None, pra_applications=None, pra_portals=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if icon_text and not isinstance(icon_text, str):
            raise TypeError("Expected argument 'icon_text' to be a str")
        pulumi.set(__self__, "icon_text", icon_text)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if microtenant_id and not isinstance(microtenant_id, str):
            raise TypeError("Expected argument 'microtenant_id' to be a str")
        pulumi.set(__self__, "microtenant_id", microtenant_id)
        if microtenant_name and not isinstance(microtenant_name, str):
            raise TypeError("Expected argument 'microtenant_name' to be a str")
        pulumi.set(__self__, "microtenant_name", microtenant_name)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pra_applications and not isinstance(pra_applications, list):
            raise TypeError("Expected argument 'pra_applications' to be a list")
        pulumi.set(__self__, "pra_applications", pra_applications)
        if pra_portals and not isinstance(pra_portals, list):
            raise TypeError("Expected argument 'pra_portals' to be a list")
        pulumi.set(__self__, "pra_portals", pra_portals)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="iconText")
    def icon_text(self) -> str:
        return pulumi.get(self, "icon_text")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> str:
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="microtenantName")
    def microtenant_name(self) -> str:
        return pulumi.get(self, "microtenant_name")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="praApplications")
    def pra_applications(self) -> Sequence['outputs.GetPraConsoleControllerPraApplicationResult']:
        return pulumi.get(self, "pra_applications")

    @property
    @pulumi.getter(name="praPortals")
    def pra_portals(self) -> Sequence['outputs.GetPraConsoleControllerPraPortalResult']:
        return pulumi.get(self, "pra_portals")


class AwaitableGetPraConsoleControllerResult(GetPraConsoleControllerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPraConsoleControllerResult(
            creation_time=self.creation_time,
            description=self.description,
            enabled=self.enabled,
            icon_text=self.icon_text,
            id=self.id,
            microtenant_id=self.microtenant_id,
            microtenant_name=self.microtenant_name,
            modified_by=self.modified_by,
            modified_time=self.modified_time,
            name=self.name,
            pra_applications=self.pra_applications,
            pra_portals=self.pra_portals)


def get_pra_console_controller(id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPraConsoleControllerResult:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_pra_console_controller is deprecated: zpa.index/getpraconsolecontroller.getPraConsoleController has been deprecated in favor of zpa.index/getpraconsole.getPRAConsole""")
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getPraConsoleController:getPraConsoleController', __args__, opts=opts, typ=GetPraConsoleControllerResult).value

    return AwaitableGetPraConsoleControllerResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        icon_text=pulumi.get(__ret__, 'icon_text'),
        id=pulumi.get(__ret__, 'id'),
        microtenant_id=pulumi.get(__ret__, 'microtenant_id'),
        microtenant_name=pulumi.get(__ret__, 'microtenant_name'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        name=pulumi.get(__ret__, 'name'),
        pra_applications=pulumi.get(__ret__, 'pra_applications'),
        pra_portals=pulumi.get(__ret__, 'pra_portals'))


@_utilities.lift_output_func(get_pra_console_controller)
def get_pra_console_controller_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPraConsoleControllerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_pra_console_controller is deprecated: zpa.index/getpraconsolecontroller.getPraConsoleController has been deprecated in favor of zpa.index/getpraconsole.getPRAConsole""")
    ...
