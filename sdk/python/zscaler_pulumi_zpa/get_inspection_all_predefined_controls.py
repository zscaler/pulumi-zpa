# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetInspectionAllPredefinedControlsResult',
    'AwaitableGetInspectionAllPredefinedControlsResult',
    'get_inspection_all_predefined_controls',
    'get_inspection_all_predefined_controls_output',
]

@pulumi.output_type
class GetInspectionAllPredefinedControlsResult:
    """
    A collection of values returned by getInspectionAllPredefinedControls.
    """
    def __init__(__self__, group_name=None, id=None, lists=None, version=None):
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetInspectionAllPredefinedControlsListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetInspectionAllPredefinedControlsResult(GetInspectionAllPredefinedControlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInspectionAllPredefinedControlsResult(
            group_name=self.group_name,
            id=self.id,
            lists=self.lists,
            version=self.version)


def get_inspection_all_predefined_controls(group_name: Optional[builtins.str] = None,
                                           version: Optional[builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInspectionAllPredefinedControlsResult:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-custom-controls)
    * [API documentation](https://help.zscaler.com/zpa/configuring-appprotection-controls-using-api)

    Use the **zpa_inspection_all_predefined_controls** data source to get information about all OWASP predefined control and prefedined control version by group name. The `Preprocessors` predefined control is the default predefined control, This data source is always required, when creating an inspection profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_inspection_all_predefined_controls(version="OWASP_CRS/3.3.0",
        group_name="Preprocessors")
    ```
    """
    __args__ = dict()
    __args__['groupName'] = group_name
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getInspectionAllPredefinedControls:getInspectionAllPredefinedControls', __args__, opts=opts, typ=GetInspectionAllPredefinedControlsResult).value

    return AwaitableGetInspectionAllPredefinedControlsResult(
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        version=pulumi.get(__ret__, 'version'))
def get_inspection_all_predefined_controls_output(group_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                  version: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInspectionAllPredefinedControlsResult]:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-custom-controls)
    * [API documentation](https://help.zscaler.com/zpa/configuring-appprotection-controls-using-api)

    Use the **zpa_inspection_all_predefined_controls** data source to get information about all OWASP predefined control and prefedined control version by group name. The `Preprocessors` predefined control is the default predefined control, This data source is always required, when creating an inspection profile.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_inspection_all_predefined_controls(version="OWASP_CRS/3.3.0",
        group_name="Preprocessors")
    ```
    """
    __args__ = dict()
    __args__['groupName'] = group_name
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zpa:index/getInspectionAllPredefinedControls:getInspectionAllPredefinedControls', __args__, opts=opts, typ=GetInspectionAllPredefinedControlsResult)
    return __ret__.apply(lambda __response__: GetInspectionAllPredefinedControlsResult(
        group_name=pulumi.get(__response__, 'group_name'),
        id=pulumi.get(__response__, 'id'),
        lists=pulumi.get(__response__, 'lists'),
        version=pulumi.get(__response__, 'version')))
