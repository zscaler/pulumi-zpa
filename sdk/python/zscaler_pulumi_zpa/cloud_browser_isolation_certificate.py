# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CloudBrowserIsolationCertificateArgs', 'CloudBrowserIsolationCertificate']

@pulumi.input_type
class CloudBrowserIsolationCertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 pem: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudBrowserIsolationCertificate resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pem is not None:
            pulumi.set(__self__, "pem", pem)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pem")

    @pem.setter
    def pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pem", value)


@pulumi.input_type
class _CloudBrowserIsolationCertificateState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 pem: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudBrowserIsolationCertificate resources.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pem is not None:
            pulumi.set(__self__, "pem", pem)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pem")

    @pem.setter
    def pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pem", value)


class CloudBrowserIsolationCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pem: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/isolation/about-custom-root-certificates-cloud-browser-isolation)

        The **zpa_cloud_browser_isolation_certificate** resource creates a Cloud Browser Isolation certificate. This resource can then be used when creating a CBI External Profile `CloudBrowserIsolationExternalProfile`.`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        # Retrieve CBI Banner ID
        this_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate("thisCloudBrowserIsolationCertificate", pem=(lambda path: open(path).read())("cert.pem"))
        this_index_cloud_browser_isolation_certificate_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate("thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate", pem=\"\"\"    -----BEGIN CERTIFICATE-----
            MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudBrowserIsolationCertificateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/isolation/about-custom-root-certificates-cloud-browser-isolation)

        The **zpa_cloud_browser_isolation_certificate** resource creates a Cloud Browser Isolation certificate. This resource can then be used when creating a CBI External Profile `CloudBrowserIsolationExternalProfile`.`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        # Retrieve CBI Banner ID
        this_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate("thisCloudBrowserIsolationCertificate", pem=(lambda path: open(path).read())("cert.pem"))
        this_index_cloud_browser_isolation_certificate_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate("thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate", pem=\"\"\"    -----BEGIN CERTIFICATE-----
            MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/
        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CloudBrowserIsolationCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudBrowserIsolationCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pem: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudBrowserIsolationCertificateArgs.__new__(CloudBrowserIsolationCertificateArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["pem"] = pem
        super(CloudBrowserIsolationCertificate, __self__).__init__(
            'zpa:index/cloudBrowserIsolationCertificate:CloudBrowserIsolationCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            pem: Optional[pulumi.Input[str]] = None) -> 'CloudBrowserIsolationCertificate':
        """
        Get an existing CloudBrowserIsolationCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudBrowserIsolationCertificateState.__new__(_CloudBrowserIsolationCertificateState)

        __props__.__dict__["name"] = name
        __props__.__dict__["pem"] = pem
        return CloudBrowserIsolationCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pem(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pem")

