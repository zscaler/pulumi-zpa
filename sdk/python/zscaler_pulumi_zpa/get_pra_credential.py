# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPRACredentialResult',
    'AwaitableGetPRACredentialResult',
    'get_pra_credential',
    'get_pra_credential_output',
]

@pulumi.output_type
class GetPRACredentialResult:
    """
    A collection of values returned by getPRACredential.
    """
    def __init__(__self__, creation_time=None, credential_type=None, description=None, id=None, last_credential_reset_time=None, microtenant_id=None, microtenant_name=None, modified_by=None, modified_time=None, name=None, password=None, user_domain=None, username=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if credential_type and not isinstance(credential_type, str):
            raise TypeError("Expected argument 'credential_type' to be a str")
        pulumi.set(__self__, "credential_type", credential_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_credential_reset_time and not isinstance(last_credential_reset_time, str):
            raise TypeError("Expected argument 'last_credential_reset_time' to be a str")
        pulumi.set(__self__, "last_credential_reset_time", last_credential_reset_time)
        if microtenant_id and not isinstance(microtenant_id, str):
            raise TypeError("Expected argument 'microtenant_id' to be a str")
        pulumi.set(__self__, "microtenant_id", microtenant_id)
        if microtenant_name and not isinstance(microtenant_name, str):
            raise TypeError("Expected argument 'microtenant_name' to be a str")
        pulumi.set(__self__, "microtenant_name", microtenant_name)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if user_domain and not isinstance(user_domain, str):
            raise TypeError("Expected argument 'user_domain' to be a str")
        pulumi.set(__self__, "user_domain", user_domain)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> builtins.str:
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastCredentialResetTime")
    def last_credential_reset_time(self) -> builtins.str:
        return pulumi.get(self, "last_credential_reset_time")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> builtins.str:
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="microtenantName")
    def microtenant_name(self) -> builtins.str:
        return pulumi.get(self, "microtenant_name")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> builtins.str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> builtins.str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        - (Optional) The name of the privileged credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> builtins.str:
        return pulumi.get(self, "user_domain")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        return pulumi.get(self, "username")


class AwaitableGetPRACredentialResult(GetPRACredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPRACredentialResult(
            creation_time=self.creation_time,
            credential_type=self.credential_type,
            description=self.description,
            id=self.id,
            last_credential_reset_time=self.last_credential_reset_time,
            microtenant_id=self.microtenant_id,
            microtenant_name=self.microtenant_name,
            modified_by=self.modified_by,
            modified_time=self.modified_time,
            name=self.name,
            password=self.password,
            user_domain=self.user_domain,
            username=self.username)


def get_pra_credential(id: Optional[builtins.str] = None,
                       name: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPRACredentialResult:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credentials)
    * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)

    The **zpa_pra_credential_controller** data source to get information about a privileged remote access credential created in the Zscaler Private Access cloud.

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.


    :param builtins.str name: - (Optional) The name of the privileged credential.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getPRACredential:getPRACredential', __args__, opts=opts, typ=GetPRACredentialResult).value

    return AwaitableGetPRACredentialResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        credential_type=pulumi.get(__ret__, 'credential_type'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_credential_reset_time=pulumi.get(__ret__, 'last_credential_reset_time'),
        microtenant_id=pulumi.get(__ret__, 'microtenant_id'),
        microtenant_name=pulumi.get(__ret__, 'microtenant_name'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        user_domain=pulumi.get(__ret__, 'user_domain'),
        username=pulumi.get(__ret__, 'username'))
def get_pra_credential_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPRACredentialResult]:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credentials)
    * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)

    The **zpa_pra_credential_controller** data source to get information about a privileged remote access credential created in the Zscaler Private Access cloud.

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.


    :param builtins.str name: - (Optional) The name of the privileged credential.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zpa:index/getPRACredential:getPRACredential', __args__, opts=opts, typ=GetPRACredentialResult)
    return __ret__.apply(lambda __response__: GetPRACredentialResult(
        creation_time=pulumi.get(__response__, 'creation_time'),
        credential_type=pulumi.get(__response__, 'credential_type'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        last_credential_reset_time=pulumi.get(__response__, 'last_credential_reset_time'),
        microtenant_id=pulumi.get(__response__, 'microtenant_id'),
        microtenant_name=pulumi.get(__response__, 'microtenant_name'),
        modified_by=pulumi.get(__response__, 'modified_by'),
        modified_time=pulumi.get(__response__, 'modified_time'),
        name=pulumi.get(__response__, 'name'),
        password=pulumi.get(__response__, 'password'),
        user_domain=pulumi.get(__response__, 'user_domain'),
        username=pulumi.get(__response__, 'username')))
