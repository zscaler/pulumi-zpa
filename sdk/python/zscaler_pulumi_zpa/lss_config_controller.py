# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LSSConfigControllerArgs', 'LSSConfigController']

@pulumi.input_type
class LSSConfigControllerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['LSSConfigControllerConfigArgs']] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]] = None,
                 policy_rule_resource: Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']] = None):
        """
        The set of arguments for constructing a LSSConfigController resource.
        :param pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]] connector_groups: App Connector Group(s) to be added to the LSS configuration
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connector_groups is not None:
            pulumi.set(__self__, "connector_groups", connector_groups)
        if policy_rule_resource is not None:
            pulumi.set(__self__, "policy_rule_resource", policy_rule_resource)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['LSSConfigControllerConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['LSSConfigControllerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]]:
        """
        App Connector Group(s) to be added to the LSS configuration
        """
        return pulumi.get(self, "connector_groups")

    @connector_groups.setter
    def connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]]):
        pulumi.set(self, "connector_groups", value)

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']]:
        return pulumi.get(self, "policy_rule_resource")

    @policy_rule_resource.setter
    def policy_rule_resource(self, value: Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']]):
        pulumi.set(self, "policy_rule_resource", value)


@pulumi.input_type
class _LSSConfigControllerState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['LSSConfigControllerConfigArgs']] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]] = None,
                 policy_rule_id: Optional[pulumi.Input[str]] = None,
                 policy_rule_resource: Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']] = None):
        """
        Input properties used for looking up and filtering LSSConfigController resources.
        :param pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]] connector_groups: App Connector Group(s) to be added to the LSS configuration
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connector_groups is not None:
            pulumi.set(__self__, "connector_groups", connector_groups)
        if policy_rule_id is not None:
            pulumi.set(__self__, "policy_rule_id", policy_rule_id)
        if policy_rule_resource is not None:
            pulumi.set(__self__, "policy_rule_resource", policy_rule_resource)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['LSSConfigControllerConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['LSSConfigControllerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]]:
        """
        App Connector Group(s) to be added to the LSS configuration
        """
        return pulumi.get(self, "connector_groups")

    @connector_groups.setter
    def connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LSSConfigControllerConnectorGroupArgs']]]]):
        pulumi.set(self, "connector_groups", value)

    @property
    @pulumi.getter(name="policyRuleId")
    def policy_rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_rule_id")

    @policy_rule_id.setter
    def policy_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule_id", value)

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']]:
        return pulumi.get(self, "policy_rule_resource")

    @policy_rule_resource.setter
    def policy_rule_resource(self, value: Optional[pulumi.Input['LSSConfigControllerPolicyRuleResourceArgs']]):
        pulumi.set(self, "policy_rule_resource", value)


class LSSConfigController(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerConfigArgs']]] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LSSConfigControllerConnectorGroupArgs']]]]] = None,
                 policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerPolicyRuleResourceArgs']]] = None,
                 __props__=None):
        """
        Create a LSSConfigController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LSSConfigControllerConnectorGroupArgs']]]] connector_groups: App Connector Group(s) to be added to the LSS configuration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LSSConfigControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LSSConfigController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LSSConfigControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LSSConfigControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerConfigArgs']]] = None,
                 connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LSSConfigControllerConnectorGroupArgs']]]]] = None,
                 policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerPolicyRuleResourceArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LSSConfigControllerArgs.__new__(LSSConfigControllerArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["connector_groups"] = connector_groups
            __props__.__dict__["policy_rule_resource"] = policy_rule_resource
            __props__.__dict__["policy_rule_id"] = None
        super(LSSConfigController, __self__).__init__(
            'zpa:index/lSSConfigController:LSSConfigController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerConfigArgs']]] = None,
            connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LSSConfigControllerConnectorGroupArgs']]]]] = None,
            policy_rule_id: Optional[pulumi.Input[str]] = None,
            policy_rule_resource: Optional[pulumi.Input[pulumi.InputType['LSSConfigControllerPolicyRuleResourceArgs']]] = None) -> 'LSSConfigController':
        """
        Get an existing LSSConfigController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LSSConfigControllerConnectorGroupArgs']]]] connector_groups: App Connector Group(s) to be added to the LSS configuration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LSSConfigControllerState.__new__(_LSSConfigControllerState)

        __props__.__dict__["config"] = config
        __props__.__dict__["connector_groups"] = connector_groups
        __props__.__dict__["policy_rule_id"] = policy_rule_id
        __props__.__dict__["policy_rule_resource"] = policy_rule_resource
        return LSSConfigController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.LSSConfigControllerConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="connectorGroups")
    def connector_groups(self) -> pulumi.Output[Optional[Sequence['outputs.LSSConfigControllerConnectorGroup']]]:
        """
        App Connector Group(s) to be added to the LSS configuration
        """
        return pulumi.get(self, "connector_groups")

    @property
    @pulumi.getter(name="policyRuleId")
    def policy_rule_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_rule_id")

    @property
    @pulumi.getter(name="policyRuleResource")
    def policy_rule_resource(self) -> pulumi.Output[Optional['outputs.LSSConfigControllerPolicyRuleResource']]:
        return pulumi.get(self, "policy_rule_resource")

