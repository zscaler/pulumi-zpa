# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConnectorGroupArgs', 'ConnectorGroup']

@pulumi.input_type
class ConnectorGroupArgs:
    def __init__(__self__, *,
                 latitude: pulumi.Input[str],
                 location: pulumi.Input[str],
                 longitude: pulumi.Input[str],
                 city_country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_query_type: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 lss_app_connector_group: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_version_profile: Optional[pulumi.Input[bool]] = None,
                 pra_enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_app: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_assistant: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_read_assistant: Optional[pulumi.Input[bool]] = None,
                 upgrade_day: Optional[pulumi.Input[str]] = None,
                 upgrade_time_in_secs: Optional[pulumi.Input[str]] = None,
                 use_in_dr_mode: Optional[pulumi.Input[bool]] = None,
                 version_profile_id: Optional[pulumi.Input[str]] = None,
                 version_profile_name: Optional[pulumi.Input[str]] = None,
                 waf_disabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ConnectorGroup resource.
        :param pulumi.Input[str] latitude: Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        :param pulumi.Input[str] location: Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        :param pulumi.Input[str] longitude: Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        :param pulumi.Input[str] city_country: Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        :param pulumi.Input[str] country_code: i.e ``"US"``, ``"CA"``
        :param pulumi.Input[str] description: Description of the App Connector Group.
        :param pulumi.Input[str] dns_query_type: Supported values are:
        :param pulumi.Input[bool] enabled: Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        :param pulumi.Input[str] microtenant_id: The ID of the microtenant the resource is to be associated with.
               
               ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        :param pulumi.Input[str] name: Name of the App Connector Group.
        :param pulumi.Input[bool] override_version_profile: Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        :param pulumi.Input[bool] pra_enabled: Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_app: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_read_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[str] upgrade_day: App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        :param pulumi.Input[str] upgrade_time_in_secs: App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        :param pulumi.Input[bool] use_in_dr_mode: Supported values: `true`, `false`
        :param pulumi.Input[str] version_profile_id: ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        :param pulumi.Input[str] version_profile_name: Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
               overrideVersionProfile is set to true
        :param pulumi.Input[bool] waf_disabled: Supported values: `true`, `false`
        """
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "longitude", longitude)
        if city_country is not None:
            pulumi.set(__self__, "city_country", city_country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_query_type is not None:
            pulumi.set(__self__, "dns_query_type", dns_query_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if lss_app_connector_group is not None:
            pulumi.set(__self__, "lss_app_connector_group", lss_app_connector_group)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_version_profile is not None:
            pulumi.set(__self__, "override_version_profile", override_version_profile)
        if pra_enabled is not None:
            pulumi.set(__self__, "pra_enabled", pra_enabled)
        if tcp_quick_ack_app is not None:
            pulumi.set(__self__, "tcp_quick_ack_app", tcp_quick_ack_app)
        if tcp_quick_ack_assistant is not None:
            pulumi.set(__self__, "tcp_quick_ack_assistant", tcp_quick_ack_assistant)
        if tcp_quick_ack_read_assistant is not None:
            pulumi.set(__self__, "tcp_quick_ack_read_assistant", tcp_quick_ack_read_assistant)
        if upgrade_day is not None:
            pulumi.set(__self__, "upgrade_day", upgrade_day)
        if upgrade_time_in_secs is not None:
            pulumi.set(__self__, "upgrade_time_in_secs", upgrade_time_in_secs)
        if use_in_dr_mode is not None:
            pulumi.set(__self__, "use_in_dr_mode", use_in_dr_mode)
        if version_profile_id is not None:
            pulumi.set(__self__, "version_profile_id", version_profile_id)
        if version_profile_name is not None:
            pulumi.set(__self__, "version_profile_name", version_profile_name)
        if waf_disabled is not None:
            pulumi.set(__self__, "waf_disabled", waf_disabled)

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Input[str]:
        """
        Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: pulumi.Input[str]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Input[str]:
        """
        Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: pulumi.Input[str]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> Optional[pulumi.Input[str]]:
        """
        Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        """
        return pulumi.get(self, "city_country")

    @city_country.setter
    def city_country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city_country", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        """
        i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the App Connector Group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        Supported values are:
        """
        return pulumi.get(self, "dns_query_type")

    @dns_query_type.setter
    def dns_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_query_type", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="lssAppConnectorGroup")
    def lss_app_connector_group(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lss_app_connector_group")

    @lss_app_connector_group.setter
    def lss_app_connector_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lss_app_connector_group", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the microtenant the resource is to be associated with.

        ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the App Connector Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideVersionProfile")
    def override_version_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        """
        return pulumi.get(self, "override_version_profile")

    @override_version_profile.setter
    def override_version_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_version_profile", value)

    @property
    @pulumi.getter(name="praEnabled")
    def pra_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "pra_enabled")

    @pra_enabled.setter
    def pra_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pra_enabled", value)

    @property
    @pulumi.getter(name="tcpQuickAckApp")
    def tcp_quick_ack_app(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_app")

    @tcp_quick_ack_app.setter
    def tcp_quick_ack_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_app", value)

    @property
    @pulumi.getter(name="tcpQuickAckAssistant")
    def tcp_quick_ack_assistant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_assistant")

    @tcp_quick_ack_assistant.setter
    def tcp_quick_ack_assistant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_assistant", value)

    @property
    @pulumi.getter(name="tcpQuickAckReadAssistant")
    def tcp_quick_ack_read_assistant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_read_assistant")

    @tcp_quick_ack_read_assistant.setter
    def tcp_quick_ack_read_assistant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_read_assistant", value)

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> Optional[pulumi.Input[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        """
        return pulumi.get(self, "upgrade_day")

    @upgrade_day.setter
    def upgrade_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_day", value)

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> Optional[pulumi.Input[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        """
        return pulumi.get(self, "upgrade_time_in_secs")

    @upgrade_time_in_secs.setter
    def upgrade_time_in_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_time_in_secs", value)

    @property
    @pulumi.getter(name="useInDrMode")
    def use_in_dr_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "use_in_dr_mode")

    @use_in_dr_mode.setter
    def use_in_dr_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_in_dr_mode", value)

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        """
        return pulumi.get(self, "version_profile_id")

    @version_profile_id.setter
    def version_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_profile_id", value)

    @property
    @pulumi.getter(name="versionProfileName")
    def version_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        overrideVersionProfile is set to true
        """
        return pulumi.get(self, "version_profile_name")

    @version_profile_name.setter
    def version_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_profile_name", value)

    @property
    @pulumi.getter(name="wafDisabled")
    def waf_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "waf_disabled")

    @waf_disabled.setter
    def waf_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "waf_disabled", value)


@pulumi.input_type
class _ConnectorGroupState:
    def __init__(__self__, *,
                 city_country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_query_type: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 lss_app_connector_group: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_version_profile: Optional[pulumi.Input[bool]] = None,
                 pra_enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_app: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_assistant: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_read_assistant: Optional[pulumi.Input[bool]] = None,
                 upgrade_day: Optional[pulumi.Input[str]] = None,
                 upgrade_time_in_secs: Optional[pulumi.Input[str]] = None,
                 use_in_dr_mode: Optional[pulumi.Input[bool]] = None,
                 version_profile_id: Optional[pulumi.Input[str]] = None,
                 version_profile_name: Optional[pulumi.Input[str]] = None,
                 waf_disabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ConnectorGroup resources.
        :param pulumi.Input[str] city_country: Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        :param pulumi.Input[str] country_code: i.e ``"US"``, ``"CA"``
        :param pulumi.Input[str] description: Description of the App Connector Group.
        :param pulumi.Input[str] dns_query_type: Supported values are:
        :param pulumi.Input[bool] enabled: Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        :param pulumi.Input[str] latitude: Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        :param pulumi.Input[str] location: Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        :param pulumi.Input[str] longitude: Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        :param pulumi.Input[str] microtenant_id: The ID of the microtenant the resource is to be associated with.
               
               ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        :param pulumi.Input[str] name: Name of the App Connector Group.
        :param pulumi.Input[bool] override_version_profile: Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        :param pulumi.Input[bool] pra_enabled: Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_app: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_read_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[str] upgrade_day: App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        :param pulumi.Input[str] upgrade_time_in_secs: App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        :param pulumi.Input[bool] use_in_dr_mode: Supported values: `true`, `false`
        :param pulumi.Input[str] version_profile_id: ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        :param pulumi.Input[str] version_profile_name: Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
               overrideVersionProfile is set to true
        :param pulumi.Input[bool] waf_disabled: Supported values: `true`, `false`
        """
        if city_country is not None:
            pulumi.set(__self__, "city_country", city_country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_query_type is not None:
            pulumi.set(__self__, "dns_query_type", dns_query_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if lss_app_connector_group is not None:
            pulumi.set(__self__, "lss_app_connector_group", lss_app_connector_group)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_version_profile is not None:
            pulumi.set(__self__, "override_version_profile", override_version_profile)
        if pra_enabled is not None:
            pulumi.set(__self__, "pra_enabled", pra_enabled)
        if tcp_quick_ack_app is not None:
            pulumi.set(__self__, "tcp_quick_ack_app", tcp_quick_ack_app)
        if tcp_quick_ack_assistant is not None:
            pulumi.set(__self__, "tcp_quick_ack_assistant", tcp_quick_ack_assistant)
        if tcp_quick_ack_read_assistant is not None:
            pulumi.set(__self__, "tcp_quick_ack_read_assistant", tcp_quick_ack_read_assistant)
        if upgrade_day is not None:
            pulumi.set(__self__, "upgrade_day", upgrade_day)
        if upgrade_time_in_secs is not None:
            pulumi.set(__self__, "upgrade_time_in_secs", upgrade_time_in_secs)
        if use_in_dr_mode is not None:
            pulumi.set(__self__, "use_in_dr_mode", use_in_dr_mode)
        if version_profile_id is not None:
            pulumi.set(__self__, "version_profile_id", version_profile_id)
        if version_profile_name is not None:
            pulumi.set(__self__, "version_profile_name", version_profile_name)
        if waf_disabled is not None:
            pulumi.set(__self__, "waf_disabled", waf_disabled)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> Optional[pulumi.Input[str]]:
        """
        Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        """
        return pulumi.get(self, "city_country")

    @city_country.setter
    def city_country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city_country", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        """
        i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the App Connector Group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        Supported values are:
        """
        return pulumi.get(self, "dns_query_type")

    @dns_query_type.setter
    def dns_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_query_type", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[str]]:
        """
        Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[str]]:
        """
        Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="lssAppConnectorGroup")
    def lss_app_connector_group(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lss_app_connector_group")

    @lss_app_connector_group.setter
    def lss_app_connector_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lss_app_connector_group", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the microtenant the resource is to be associated with.

        ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the App Connector Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideVersionProfile")
    def override_version_profile(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        """
        return pulumi.get(self, "override_version_profile")

    @override_version_profile.setter
    def override_version_profile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_version_profile", value)

    @property
    @pulumi.getter(name="praEnabled")
    def pra_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "pra_enabled")

    @pra_enabled.setter
    def pra_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pra_enabled", value)

    @property
    @pulumi.getter(name="tcpQuickAckApp")
    def tcp_quick_ack_app(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_app")

    @tcp_quick_ack_app.setter
    def tcp_quick_ack_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_app", value)

    @property
    @pulumi.getter(name="tcpQuickAckAssistant")
    def tcp_quick_ack_assistant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_assistant")

    @tcp_quick_ack_assistant.setter
    def tcp_quick_ack_assistant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_assistant", value)

    @property
    @pulumi.getter(name="tcpQuickAckReadAssistant")
    def tcp_quick_ack_read_assistant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_read_assistant")

    @tcp_quick_ack_read_assistant.setter
    def tcp_quick_ack_read_assistant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_quick_ack_read_assistant", value)

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> Optional[pulumi.Input[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        """
        return pulumi.get(self, "upgrade_day")

    @upgrade_day.setter
    def upgrade_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_day", value)

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> Optional[pulumi.Input[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        """
        return pulumi.get(self, "upgrade_time_in_secs")

    @upgrade_time_in_secs.setter
    def upgrade_time_in_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_time_in_secs", value)

    @property
    @pulumi.getter(name="useInDrMode")
    def use_in_dr_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "use_in_dr_mode")

    @use_in_dr_mode.setter
    def use_in_dr_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_in_dr_mode", value)

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        """
        return pulumi.get(self, "version_profile_id")

    @version_profile_id.setter
    def version_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_profile_id", value)

    @property
    @pulumi.getter(name="versionProfileName")
    def version_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        overrideVersionProfile is set to true
        """
        return pulumi.get(self, "version_profile_name")

    @version_profile_name.setter
    def version_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_profile_name", value)

    @property
    @pulumi.getter(name="wafDisabled")
    def waf_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "waf_disabled")

    @waf_disabled.setter
    def waf_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "waf_disabled", value)


class ConnectorGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city_country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_query_type: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 lss_app_connector_group: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_version_profile: Optional[pulumi.Input[bool]] = None,
                 pra_enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_app: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_assistant: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_read_assistant: Optional[pulumi.Input[bool]] = None,
                 upgrade_day: Optional[pulumi.Input[str]] = None,
                 upgrade_time_in_secs: Optional[pulumi.Input[str]] = None,
                 use_in_dr_mode: Optional[pulumi.Input[bool]] = None,
                 version_profile_id: Optional[pulumi.Input[str]] = None,
                 version_profile_name: Optional[pulumi.Input[str]] = None,
                 waf_disabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        # Create a App Connector Group
        example = zpa.ConnectorGroup("example",
            city_country="San Jose, CA",
            country_code="US",
            description="Example",
            dns_query_type="IPV4_IPV6",
            enabled=True,
            latitude="37.338",
            location="San Jose, CA, US",
            longitude="-121.8863",
            override_version_profile=True,
            upgrade_day="SUNDAY",
            upgrade_time_in_secs="66600",
            use_in_dr_mode=True,
            version_profile_name="New Release")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        App Connector Group can be imported by using `<APP CONNECTOR GROUP ID>` or `<APP CONNECTOR GROUP NAME>`as the import ID.

        ```sh
        $ pulumi import zpa:index/connectorGroup:ConnectorGroup example <app_connector_group_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/connectorGroup:ConnectorGroup example <app_connector_group_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] city_country: Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        :param pulumi.Input[str] country_code: i.e ``"US"``, ``"CA"``
        :param pulumi.Input[str] description: Description of the App Connector Group.
        :param pulumi.Input[str] dns_query_type: Supported values are:
        :param pulumi.Input[bool] enabled: Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        :param pulumi.Input[str] latitude: Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        :param pulumi.Input[str] location: Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        :param pulumi.Input[str] longitude: Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        :param pulumi.Input[str] microtenant_id: The ID of the microtenant the resource is to be associated with.
               
               ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        :param pulumi.Input[str] name: Name of the App Connector Group.
        :param pulumi.Input[bool] override_version_profile: Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        :param pulumi.Input[bool] pra_enabled: Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_app: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_read_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[str] upgrade_day: App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        :param pulumi.Input[str] upgrade_time_in_secs: App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        :param pulumi.Input[bool] use_in_dr_mode: Supported values: `true`, `false`
        :param pulumi.Input[str] version_profile_id: ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        :param pulumi.Input[str] version_profile_name: Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
               overrideVersionProfile is set to true
        :param pulumi.Input[bool] waf_disabled: Supported values: `true`, `false`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        # Create a App Connector Group
        example = zpa.ConnectorGroup("example",
            city_country="San Jose, CA",
            country_code="US",
            description="Example",
            dns_query_type="IPV4_IPV6",
            enabled=True,
            latitude="37.338",
            location="San Jose, CA, US",
            longitude="-121.8863",
            override_version_profile=True,
            upgrade_day="SUNDAY",
            upgrade_time_in_secs="66600",
            use_in_dr_mode=True,
            version_profile_name="New Release")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        App Connector Group can be imported by using `<APP CONNECTOR GROUP ID>` or `<APP CONNECTOR GROUP NAME>`as the import ID.

        ```sh
        $ pulumi import zpa:index/connectorGroup:ConnectorGroup example <app_connector_group_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/connectorGroup:ConnectorGroup example <app_connector_group_name>
        ```

        :param str resource_name: The name of the resource.
        :param ConnectorGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 city_country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_query_type: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 lss_app_connector_group: Optional[pulumi.Input[bool]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_version_profile: Optional[pulumi.Input[bool]] = None,
                 pra_enabled: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_app: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_assistant: Optional[pulumi.Input[bool]] = None,
                 tcp_quick_ack_read_assistant: Optional[pulumi.Input[bool]] = None,
                 upgrade_day: Optional[pulumi.Input[str]] = None,
                 upgrade_time_in_secs: Optional[pulumi.Input[str]] = None,
                 use_in_dr_mode: Optional[pulumi.Input[bool]] = None,
                 version_profile_id: Optional[pulumi.Input[str]] = None,
                 version_profile_name: Optional[pulumi.Input[str]] = None,
                 waf_disabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorGroupArgs.__new__(ConnectorGroupArgs)

            __props__.__dict__["city_country"] = city_country
            __props__.__dict__["country_code"] = country_code
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_query_type"] = dns_query_type
            __props__.__dict__["enabled"] = enabled
            if latitude is None and not opts.urn:
                raise TypeError("Missing required property 'latitude'")
            __props__.__dict__["latitude"] = latitude
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if longitude is None and not opts.urn:
                raise TypeError("Missing required property 'longitude'")
            __props__.__dict__["longitude"] = longitude
            __props__.__dict__["lss_app_connector_group"] = lss_app_connector_group
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
            __props__.__dict__["override_version_profile"] = override_version_profile
            __props__.__dict__["pra_enabled"] = pra_enabled
            __props__.__dict__["tcp_quick_ack_app"] = tcp_quick_ack_app
            __props__.__dict__["tcp_quick_ack_assistant"] = tcp_quick_ack_assistant
            __props__.__dict__["tcp_quick_ack_read_assistant"] = tcp_quick_ack_read_assistant
            __props__.__dict__["upgrade_day"] = upgrade_day
            __props__.__dict__["upgrade_time_in_secs"] = upgrade_time_in_secs
            __props__.__dict__["use_in_dr_mode"] = use_in_dr_mode
            __props__.__dict__["version_profile_id"] = version_profile_id
            __props__.__dict__["version_profile_name"] = version_profile_name
            __props__.__dict__["waf_disabled"] = waf_disabled
        super(ConnectorGroup, __self__).__init__(
            'zpa:index/connectorGroup:ConnectorGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            city_country: Optional[pulumi.Input[str]] = None,
            country_code: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns_query_type: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            latitude: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            longitude: Optional[pulumi.Input[str]] = None,
            lss_app_connector_group: Optional[pulumi.Input[bool]] = None,
            microtenant_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_version_profile: Optional[pulumi.Input[bool]] = None,
            pra_enabled: Optional[pulumi.Input[bool]] = None,
            tcp_quick_ack_app: Optional[pulumi.Input[bool]] = None,
            tcp_quick_ack_assistant: Optional[pulumi.Input[bool]] = None,
            tcp_quick_ack_read_assistant: Optional[pulumi.Input[bool]] = None,
            upgrade_day: Optional[pulumi.Input[str]] = None,
            upgrade_time_in_secs: Optional[pulumi.Input[str]] = None,
            use_in_dr_mode: Optional[pulumi.Input[bool]] = None,
            version_profile_id: Optional[pulumi.Input[str]] = None,
            version_profile_name: Optional[pulumi.Input[str]] = None,
            waf_disabled: Optional[pulumi.Input[bool]] = None) -> 'ConnectorGroup':
        """
        Get an existing ConnectorGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] city_country: Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        :param pulumi.Input[str] country_code: i.e ``"US"``, ``"CA"``
        :param pulumi.Input[str] description: Description of the App Connector Group.
        :param pulumi.Input[str] dns_query_type: Supported values are:
        :param pulumi.Input[bool] enabled: Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        :param pulumi.Input[str] latitude: Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        :param pulumi.Input[str] location: Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        :param pulumi.Input[str] longitude: Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        :param pulumi.Input[str] microtenant_id: The ID of the microtenant the resource is to be associated with.
               
               ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        :param pulumi.Input[str] name: Name of the App Connector Group.
        :param pulumi.Input[bool] override_version_profile: Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        :param pulumi.Input[bool] pra_enabled: Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_app: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[bool] tcp_quick_ack_read_assistant: Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        :param pulumi.Input[str] upgrade_day: App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        :param pulumi.Input[str] upgrade_time_in_secs: App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        :param pulumi.Input[bool] use_in_dr_mode: Supported values: `true`, `false`
        :param pulumi.Input[str] version_profile_id: ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        :param pulumi.Input[str] version_profile_name: Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
               overrideVersionProfile is set to true
        :param pulumi.Input[bool] waf_disabled: Supported values: `true`, `false`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorGroupState.__new__(_ConnectorGroupState)

        __props__.__dict__["city_country"] = city_country
        __props__.__dict__["country_code"] = country_code
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_query_type"] = dns_query_type
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["latitude"] = latitude
        __props__.__dict__["location"] = location
        __props__.__dict__["longitude"] = longitude
        __props__.__dict__["lss_app_connector_group"] = lss_app_connector_group
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["override_version_profile"] = override_version_profile
        __props__.__dict__["pra_enabled"] = pra_enabled
        __props__.__dict__["tcp_quick_ack_app"] = tcp_quick_ack_app
        __props__.__dict__["tcp_quick_ack_assistant"] = tcp_quick_ack_assistant
        __props__.__dict__["tcp_quick_ack_read_assistant"] = tcp_quick_ack_read_assistant
        __props__.__dict__["upgrade_day"] = upgrade_day
        __props__.__dict__["upgrade_time_in_secs"] = upgrade_time_in_secs
        __props__.__dict__["use_in_dr_mode"] = use_in_dr_mode
        __props__.__dict__["version_profile_id"] = version_profile_id
        __props__.__dict__["version_profile_name"] = version_profile_name
        __props__.__dict__["waf_disabled"] = waf_disabled
        return ConnectorGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> pulumi.Output[str]:
        """
        Whether Double Encryption is enabled or disabled for the app. i.e ``"San Jose, US"``
        """
        return pulumi.get(self, "city_country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Output[str]:
        """
        i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the App Connector Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> pulumi.Output[Optional[str]]:
        """
        Supported values are:
        """
        return pulumi.get(self, "dns_query_type")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Output[str]:
        """
        Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Location of the App Connector Group. i.e ``"San Jose, CA, USA"``
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Output[str]:
        """
        Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="lssAppConnectorGroup")
    def lss_app_connector_group(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "lss_app_connector_group")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[str]:
        """
        The ID of the microtenant the resource is to be associated with.

        ⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the App Connector Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideVersionProfile")
    def override_version_profile(self) -> pulumi.Output[bool]:
        """
        Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`
        """
        return pulumi.get(self, "override_version_profile")

    @property
    @pulumi.getter(name="praEnabled")
    def pra_enabled(self) -> pulumi.Output[bool]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "pra_enabled")

    @property
    @pulumi.getter(name="tcpQuickAckApp")
    def tcp_quick_ack_app(self) -> pulumi.Output[bool]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_app")

    @property
    @pulumi.getter(name="tcpQuickAckAssistant")
    def tcp_quick_ack_assistant(self) -> pulumi.Output[bool]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_assistant")

    @property
    @pulumi.getter(name="tcpQuickAckReadAssistant")
    def tcp_quick_ack_read_assistant(self) -> pulumi.Output[bool]:
        """
        Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`
        """
        return pulumi.get(self, "tcp_quick_ack_read_assistant")

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> pulumi.Output[Optional[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``
        """
        return pulumi.get(self, "upgrade_day")

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> pulumi.Output[Optional[str]]:
        """
        App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals
        """
        return pulumi.get(self, "upgrade_time_in_secs")

    @property
    @pulumi.getter(name="useInDrMode")
    def use_in_dr_mode(self) -> pulumi.Output[bool]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "use_in_dr_mode")

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> pulumi.Output[str]:
        """
        ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:
        """
        return pulumi.get(self, "version_profile_id")

    @property
    @pulumi.getter(name="versionProfileName")
    def version_profile_name(self) -> pulumi.Output[str]:
        """
        Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for
        overrideVersionProfile is set to true
        """
        return pulumi.get(self, "version_profile_name")

    @property
    @pulumi.getter(name="wafDisabled")
    def waf_disabled(self) -> pulumi.Output[bool]:
        """
        Supported values: `true`, `false`
        """
        return pulumi.get(self, "waf_disabled")

