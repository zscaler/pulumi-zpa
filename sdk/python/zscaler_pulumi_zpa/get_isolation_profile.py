# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIsolationProfileResult',
    'AwaitableGetIsolationProfileResult',
    'get_isolation_profile',
    'get_isolation_profile_output',
]

@pulumi.output_type
class GetIsolationProfileResult:
    """
    A collection of values returned by getIsolationProfile.
    """
    def __init__(__self__, creation_time=None, description=None, enabled=None, id=None, isolation_profile_id=None, isolation_tenant_id=None, isolation_url=None, modified_time=None, modifiedby=None, name=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isolation_profile_id and not isinstance(isolation_profile_id, str):
            raise TypeError("Expected argument 'isolation_profile_id' to be a str")
        pulumi.set(__self__, "isolation_profile_id", isolation_profile_id)
        if isolation_tenant_id and not isinstance(isolation_tenant_id, str):
            raise TypeError("Expected argument 'isolation_tenant_id' to be a str")
        pulumi.set(__self__, "isolation_tenant_id", isolation_tenant_id)
        if isolation_url and not isinstance(isolation_url, str):
            raise TypeError("Expected argument 'isolation_url' to be a str")
        pulumi.set(__self__, "isolation_url", isolation_url)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationProfileId")
    def isolation_profile_id(self) -> str:
        return pulumi.get(self, "isolation_profile_id")

    @property
    @pulumi.getter(name="isolationTenantId")
    def isolation_tenant_id(self) -> str:
        return pulumi.get(self, "isolation_tenant_id")

    @property
    @pulumi.getter(name="isolationUrl")
    def isolation_url(self) -> str:
        return pulumi.get(self, "isolation_url")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        - (Required) This field defines the name of the isolation profile.
        """
        return pulumi.get(self, "name")


class AwaitableGetIsolationProfileResult(GetIsolationProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsolationProfileResult(
            creation_time=self.creation_time,
            description=self.description,
            enabled=self.enabled,
            id=self.id,
            isolation_profile_id=self.isolation_profile_id,
            isolation_tenant_id=self.isolation_tenant_id,
            isolation_url=self.isolation_url,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name)


def get_isolation_profile(name: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsolationProfileResult:
    """
    * [Official documentation](https://help.zscaler.com/isolation/creating-isolation-profiles-zpa)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-isolation-profile-details-using-api)

    Use the **zpa_isolation_profile** data source to get information about an isolation profile in the Zscaler Private Access cloud. This data source is required when configuring an isolation policy rule resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    isolation_profile = zpa.get_isolation_profile(name="zpa_isolation_profile")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: - (Required) This field defines the name of the isolation profile.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getIsolationProfile:getIsolationProfile', __args__, opts=opts, typ=GetIsolationProfileResult).value

    return AwaitableGetIsolationProfileResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        isolation_profile_id=pulumi.get(__ret__, 'isolation_profile_id'),
        isolation_tenant_id=pulumi.get(__ret__, 'isolation_tenant_id'),
        isolation_url=pulumi.get(__ret__, 'isolation_url'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_isolation_profile)
def get_isolation_profile_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIsolationProfileResult]:
    """
    * [Official documentation](https://help.zscaler.com/isolation/creating-isolation-profiles-zpa)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-isolation-profile-details-using-api)

    Use the **zpa_isolation_profile** data source to get information about an isolation profile in the Zscaler Private Access cloud. This data source is required when configuring an isolation policy rule resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    isolation_profile = zpa.get_isolation_profile(name="zpa_isolation_profile")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: - (Required) This field defines the name of the isolation profile.
    """
    ...
