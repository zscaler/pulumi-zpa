# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PraApprovalControllerArgs', 'PraApprovalController']

@pulumi.input_type
class PraApprovalControllerArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]],
                 email_ids: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 working_hours: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]] = None):
        """
        The set of arguments for constructing a PraApprovalController resource.
        :param pulumi.Input[str] email_ids: The email address of the user that you are assigning the privileged approval to
        :param pulumi.Input[str] end_time: The end date that the user no longer has access to the privileged approval
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] start_time: The start date that the user has access to the privileged approval
        :param pulumi.Input[str] status: The status of the privileged approval
        """
        pulumi.set(__self__, "applications", applications)
        if email_ids is not None:
            pulumi.set(__self__, "email_ids", email_ids)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if working_hours is not None:
            pulumi.set(__self__, "working_hours", working_hours)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="emailIds")
    def email_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the user that you are assigning the privileged approval to
        """
        return pulumi.get(self, "email_ids")

    @email_ids.setter
    def email_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_ids", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The end date that the user no longer has access to the privileged approval
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The start date that the user has access to the privileged approval
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the privileged approval
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="workingHours")
    def working_hours(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]]:
        return pulumi.get(self, "working_hours")

    @working_hours.setter
    def working_hours(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]]):
        pulumi.set(self, "working_hours", value)


@pulumi.input_type
class _PraApprovalControllerState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]]] = None,
                 email_ids: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 working_hours: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]] = None):
        """
        Input properties used for looking up and filtering PraApprovalController resources.
        :param pulumi.Input[str] email_ids: The email address of the user that you are assigning the privileged approval to
        :param pulumi.Input[str] end_time: The end date that the user no longer has access to the privileged approval
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] start_time: The start date that the user has access to the privileged approval
        :param pulumi.Input[str] status: The status of the privileged approval
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if email_ids is not None:
            pulumi.set(__self__, "email_ids", email_ids)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if working_hours is not None:
            pulumi.set(__self__, "working_hours", working_hours)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="emailIds")
    def email_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the user that you are assigning the privileged approval to
        """
        return pulumi.get(self, "email_ids")

    @email_ids.setter
    def email_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_ids", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        The end date that the user no longer has access to the privileged approval
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The start date that the user has access to the privileged approval
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the privileged approval
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="workingHours")
    def working_hours(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]]:
        return pulumi.get(self, "working_hours")

    @working_hours.setter
    def working_hours(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraApprovalControllerWorkingHourArgs']]]]):
        pulumi.set(self, "working_hours", value)


warnings.warn("""zpa.index/praapprovalcontroller.PraApprovalController has been deprecated in favor of zpa.index/praapproval.PRAApproval""", DeprecationWarning)


class PraApprovalController(pulumi.CustomResource):
    warnings.warn("""zpa.index/praapprovalcontroller.PraApprovalController has been deprecated in favor of zpa.index/praapproval.PRAApproval""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerApplicationArgs']]]]] = None,
                 email_ids: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 working_hours: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerWorkingHourArgs']]]]] = None,
                 __props__=None):
        """
        Create a PraApprovalController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email_ids: The email address of the user that you are assigning the privileged approval to
        :param pulumi.Input[str] end_time: The end date that the user no longer has access to the privileged approval
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] start_time: The start date that the user has access to the privileged approval
        :param pulumi.Input[str] status: The status of the privileged approval
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PraApprovalControllerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PraApprovalController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PraApprovalControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PraApprovalControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerApplicationArgs']]]]] = None,
                 email_ids: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 working_hours: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerWorkingHourArgs']]]]] = None,
                 __props__=None):
        pulumi.log.warn("""PraApprovalController is deprecated: zpa.index/praapprovalcontroller.PraApprovalController has been deprecated in favor of zpa.index/praapproval.PRAApproval""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PraApprovalControllerArgs.__new__(PraApprovalControllerArgs)

            if applications is None and not opts.urn:
                raise TypeError("Missing required property 'applications'")
            __props__.__dict__["applications"] = applications
            __props__.__dict__["email_ids"] = email_ids
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["status"] = status
            __props__.__dict__["working_hours"] = working_hours
        super(PraApprovalController, __self__).__init__(
            'zpa:index/praApprovalController:PraApprovalController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerApplicationArgs']]]]] = None,
            email_ids: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            microtenant_id: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            working_hours: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PraApprovalControllerWorkingHourArgs']]]]] = None) -> 'PraApprovalController':
        """
        Get an existing PraApprovalController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email_ids: The email address of the user that you are assigning the privileged approval to
        :param pulumi.Input[str] end_time: The end date that the user no longer has access to the privileged approval
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] start_time: The start date that the user has access to the privileged approval
        :param pulumi.Input[str] status: The status of the privileged approval
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PraApprovalControllerState.__new__(_PraApprovalControllerState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["email_ids"] = email_ids
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["working_hours"] = working_hours
        return PraApprovalController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Sequence['outputs.PraApprovalControllerApplication']]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="emailIds")
    def email_ids(self) -> pulumi.Output[str]:
        """
        The email address of the user that you are assigning the privileged approval to
        """
        return pulumi.get(self, "email_ids")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        The end date that the user no longer has access to the privileged approval
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[str]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        The start date that the user has access to the privileged approval
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the privileged approval
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="workingHours")
    def working_hours(self) -> pulumi.Output[Sequence['outputs.PraApprovalControllerWorkingHour']]:
        return pulumi.get(self, "working_hours")

