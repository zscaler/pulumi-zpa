# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPraApprovalControllerResult',
    'AwaitableGetPraApprovalControllerResult',
    'get_pra_approval_controller',
    'get_pra_approval_controller_output',
]

warnings.warn("""zpa.index/getpraapprovalcontroller.getPraApprovalController has been deprecated in favor of zpa.index/getpraapproval.getPRAApproval""", DeprecationWarning)

@pulumi.output_type
class GetPraApprovalControllerResult:
    """
    A collection of values returned by getPraApprovalController.
    """
    def __init__(__self__, applications=None, creation_time=None, email_ids=None, end_time=None, id=None, microtenant_id=None, modified_by=None, modified_time=None, start_time=None, status=None, working_hours=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if email_ids and not isinstance(email_ids, list):
            raise TypeError("Expected argument 'email_ids' to be a list")
        pulumi.set(__self__, "email_ids", email_ids)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if microtenant_id and not isinstance(microtenant_id, str):
            raise TypeError("Expected argument 'microtenant_id' to be a str")
        pulumi.set(__self__, "microtenant_id", microtenant_id)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if working_hours and not isinstance(working_hours, list):
            raise TypeError("Expected argument 'working_hours' to be a list")
        pulumi.set(__self__, "working_hours", working_hours)

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetPraApprovalControllerApplicationResult']:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="emailIds")
    def email_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "email_ids")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> str:
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="workingHours")
    def working_hours(self) -> Sequence['outputs.GetPraApprovalControllerWorkingHourResult']:
        return pulumi.get(self, "working_hours")


class AwaitableGetPraApprovalControllerResult(GetPraApprovalControllerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPraApprovalControllerResult(
            applications=self.applications,
            creation_time=self.creation_time,
            email_ids=self.email_ids,
            end_time=self.end_time,
            id=self.id,
            microtenant_id=self.microtenant_id,
            modified_by=self.modified_by,
            modified_time=self.modified_time,
            start_time=self.start_time,
            status=self.status,
            working_hours=self.working_hours)


def get_pra_approval_controller(email_ids: Optional[Sequence[str]] = None,
                                id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPraApprovalControllerResult:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_pra_approval_controller is deprecated: zpa.index/getpraapprovalcontroller.getPraApprovalController has been deprecated in favor of zpa.index/getpraapproval.getPRAApproval""")
    __args__ = dict()
    __args__['emailIds'] = email_ids
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getPraApprovalController:getPraApprovalController', __args__, opts=opts, typ=GetPraApprovalControllerResult).value

    return AwaitableGetPraApprovalControllerResult(
        applications=pulumi.get(__ret__, 'applications'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        email_ids=pulumi.get(__ret__, 'email_ids'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        microtenant_id=pulumi.get(__ret__, 'microtenant_id'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        working_hours=pulumi.get(__ret__, 'working_hours'))


@_utilities.lift_output_func(get_pra_approval_controller)
def get_pra_approval_controller_output(email_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       id: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPraApprovalControllerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_pra_approval_controller is deprecated: zpa.index/getpraapprovalcontroller.getPraApprovalController has been deprecated in favor of zpa.index/getpraapproval.getPRAApproval""")
    ...
