# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetLSSStatusCodesResult',
    'AwaitableGetLSSStatusCodesResult',
    'get_lss_status_codes',
    'get_lss_status_codes_output',
]

@pulumi.output_type
class GetLSSStatusCodesResult:
    """
    A collection of values returned by getLSSStatusCodes.
    """
    def __init__(__self__, id=None, zpn_ast_auth_log=None, zpn_auth_log=None, zpn_sys_auth_log=None, zpn_trans_log=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if zpn_ast_auth_log and not isinstance(zpn_ast_auth_log, dict):
            raise TypeError("Expected argument 'zpn_ast_auth_log' to be a dict")
        pulumi.set(__self__, "zpn_ast_auth_log", zpn_ast_auth_log)
        if zpn_auth_log and not isinstance(zpn_auth_log, dict):
            raise TypeError("Expected argument 'zpn_auth_log' to be a dict")
        pulumi.set(__self__, "zpn_auth_log", zpn_auth_log)
        if zpn_sys_auth_log and not isinstance(zpn_sys_auth_log, dict):
            raise TypeError("Expected argument 'zpn_sys_auth_log' to be a dict")
        pulumi.set(__self__, "zpn_sys_auth_log", zpn_sys_auth_log)
        if zpn_trans_log and not isinstance(zpn_trans_log, dict):
            raise TypeError("Expected argument 'zpn_trans_log' to be a dict")
        pulumi.set(__self__, "zpn_trans_log", zpn_trans_log)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="zpnAstAuthLog")
    def zpn_ast_auth_log(self) -> Mapping[str, str]:
        return pulumi.get(self, "zpn_ast_auth_log")

    @property
    @pulumi.getter(name="zpnAuthLog")
    def zpn_auth_log(self) -> Mapping[str, str]:
        return pulumi.get(self, "zpn_auth_log")

    @property
    @pulumi.getter(name="zpnSysAuthLog")
    def zpn_sys_auth_log(self) -> Mapping[str, str]:
        return pulumi.get(self, "zpn_sys_auth_log")

    @property
    @pulumi.getter(name="zpnTransLog")
    def zpn_trans_log(self) -> Mapping[str, str]:
        return pulumi.get(self, "zpn_trans_log")


class AwaitableGetLSSStatusCodesResult(GetLSSStatusCodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLSSStatusCodesResult(
            id=self.id,
            zpn_ast_auth_log=self.zpn_ast_auth_log,
            zpn_auth_log=self.zpn_auth_log,
            zpn_sys_auth_log=self.zpn_sys_auth_log,
            zpn_trans_log=self.zpn_trans_log)


def get_lss_status_codes(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLSSStatusCodesResult:
    """
    Use the **zpa_lss_config_status_codes** data source to get information about all LSS status codes in the Zscaler Private Access cloud. This data source is required when the `filter` parameter in the LSS Config Controller resource is set. To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSStatusCodes)

    > **NOTE** By Default the ZPA provider will return all status codes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_lss_status_codes()
    ```
    <!--End PulumiCodeChooser -->
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getLSSStatusCodes:getLSSStatusCodes', __args__, opts=opts, typ=GetLSSStatusCodesResult).value

    return AwaitableGetLSSStatusCodesResult(
        id=pulumi.get(__ret__, 'id'),
        zpn_ast_auth_log=pulumi.get(__ret__, 'zpn_ast_auth_log'),
        zpn_auth_log=pulumi.get(__ret__, 'zpn_auth_log'),
        zpn_sys_auth_log=pulumi.get(__ret__, 'zpn_sys_auth_log'),
        zpn_trans_log=pulumi.get(__ret__, 'zpn_trans_log'))


@_utilities.lift_output_func(get_lss_status_codes)
def get_lss_status_codes_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLSSStatusCodesResult]:
    """
    Use the **zpa_lss_config_status_codes** data source to get information about all LSS status codes in the Zscaler Private Access cloud. This data source is required when the `filter` parameter in the LSS Config Controller resource is set. To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSStatusCodes)

    > **NOTE** By Default the ZPA provider will return all status codes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    this = zpa.get_lss_status_codes()
    ```
    <!--End PulumiCodeChooser -->
    """
    ...
