# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 zpa_client_id: Optional[pulumi.Input[str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[str]] = None,
                 zpa_cloud: Optional[pulumi.Input[str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] zpa_client_id: zpa client id
        :param pulumi.Input[str] zpa_client_secret: zpa client secret
        :param pulumi.Input[str] zpa_cloud: Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        :param pulumi.Input[str] zpa_customer_id: zpa customer id
        """
        if zpa_client_id is None:
            zpa_client_id = _utilities.get_env('ZPA_CLIENT_ID')
        if zpa_client_id is not None:
            pulumi.set(__self__, "zpa_client_id", zpa_client_id)
        if zpa_client_secret is None:
            zpa_client_secret = _utilities.get_env('ZPA_CLIENT_SECRET')
        if zpa_client_secret is not None:
            pulumi.set(__self__, "zpa_client_secret", zpa_client_secret)
        if zpa_cloud is None:
            zpa_cloud = _utilities.get_env('ZPA_CLOUD')
        if zpa_cloud is not None:
            pulumi.set(__self__, "zpa_cloud", zpa_cloud)
        if zpa_customer_id is None:
            zpa_customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
        if zpa_customer_id is not None:
            pulumi.set(__self__, "zpa_customer_id", zpa_customer_id)

    @property
    @pulumi.getter(name="zpaClientId")
    def zpa_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "zpa_client_id")

    @zpa_client_id.setter
    def zpa_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zpa_client_id", value)

    @property
    @pulumi.getter(name="zpaClientSecret")
    def zpa_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "zpa_client_secret")

    @zpa_client_secret.setter
    def zpa_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zpa_client_secret", value)

    @property
    @pulumi.getter(name="zpaCloud")
    def zpa_cloud(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        """
        return pulumi.get(self, "zpa_cloud")

    @zpa_cloud.setter
    def zpa_cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zpa_cloud", value)

    @property
    @pulumi.getter(name="zpaCustomerId")
    def zpa_customer_id(self) -> Optional[pulumi.Input[str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "zpa_customer_id")

    @zpa_customer_id.setter
    def zpa_customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zpa_customer_id", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zpa_client_id: Optional[pulumi.Input[str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[str]] = None,
                 zpa_cloud: Optional[pulumi.Input[str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the zpa package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] zpa_client_id: zpa client id
        :param pulumi.Input[str] zpa_client_secret: zpa client secret
        :param pulumi.Input[str] zpa_cloud: Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        :param pulumi.Input[str] zpa_customer_id: zpa customer id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the zpa package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 zpa_client_id: Optional[pulumi.Input[str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[str]] = None,
                 zpa_cloud: Optional[pulumi.Input[str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if zpa_client_id is None:
                zpa_client_id = _utilities.get_env('ZPA_CLIENT_ID')
            __props__.__dict__["zpa_client_id"] = zpa_client_id
            if zpa_client_secret is None:
                zpa_client_secret = _utilities.get_env('ZPA_CLIENT_SECRET')
            __props__.__dict__["zpa_client_secret"] = None if zpa_client_secret is None else pulumi.Output.secret(zpa_client_secret)
            if zpa_cloud is None:
                zpa_cloud = _utilities.get_env('ZPA_CLOUD')
            __props__.__dict__["zpa_cloud"] = zpa_cloud
            if zpa_customer_id is None:
                zpa_customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
            __props__.__dict__["zpa_customer_id"] = None if zpa_customer_id is None else pulumi.Output.secret(zpa_customer_id)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["zpaClientSecret", "zpaCustomerId"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'zpa',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="zpaClientId")
    def zpa_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "zpa_client_id")

    @property
    @pulumi.getter(name="zpaClientSecret")
    def zpa_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "zpa_client_secret")

    @property
    @pulumi.getter(name="zpaCloud")
    def zpa_cloud(self) -> pulumi.Output[Optional[str]]:
        """
        Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        """
        return pulumi.get(self, "zpa_cloud")

    @property
    @pulumi.getter(name="zpaCustomerId")
    def zpa_customer_id(self) -> pulumi.Output[Optional[str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "zpa_customer_id")

