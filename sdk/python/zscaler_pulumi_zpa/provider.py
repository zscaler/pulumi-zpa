# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 backoff: Optional[pulumi.Input[builtins.bool]] = None,
                 client_id: Optional[pulumi.Input[builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 http_proxy: Optional[pulumi.Input[builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[builtins.int]] = None,
                 max_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 min_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 parallelism: Optional[pulumi.Input[builtins.int]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 request_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 use_legacy_client: Optional[pulumi.Input[builtins.bool]] = None,
                 vanity_domain: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_id: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_cloud: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 zscaler_cloud: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[builtins.bool] backoff: Use exponential back off strategy for rate limits.
        :param pulumi.Input[builtins.str] client_id: zpa client id
        :param pulumi.Input[builtins.str] client_secret: zpa client secret
        :param pulumi.Input[builtins.str] customer_id: zpa customer id
        :param pulumi.Input[builtins.str] http_proxy: Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        :param pulumi.Input[builtins.int] max_retries: maximum number of retries to attempt before erroring out.
        :param pulumi.Input[builtins.int] max_wait_seconds: maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        :param pulumi.Input[builtins.str] microtenant_id: zpa microtenant ID
        :param pulumi.Input[builtins.int] min_wait_seconds: minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        :param pulumi.Input[builtins.int] parallelism: Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
               https://help.zscaler.com/zpa/understanding-rate-limiting.
        :param pulumi.Input[builtins.str] private_key: zpa private key
        :param pulumi.Input[builtins.int] request_timeout: Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
               maximum value can be `300`.
        :param pulumi.Input[builtins.bool] use_legacy_client: Enables interaction with the ZPA legacy API framework
        :param pulumi.Input[builtins.str] vanity_domain: Zscaler Vanity Domain
        :param pulumi.Input[builtins.str] zpa_client_id: zpa client id
        :param pulumi.Input[builtins.str] zpa_client_secret: zpa client secret
        :param pulumi.Input[builtins.str] zpa_cloud: Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        :param pulumi.Input[builtins.str] zpa_customer_id: zpa customer id
        :param pulumi.Input[builtins.str] zscaler_cloud: Zscaler Cloud Name
        """
        if backoff is not None:
            pulumi.set(__self__, "backoff", backoff)
        if client_id is None:
            client_id = _utilities.get_env('ZSCALER_CLIENT_ID')
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is None:
            client_secret = _utilities.get_env('ZSCALER_CLIENT_SECRET')
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if customer_id is None:
            customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if max_wait_seconds is not None:
            pulumi.set(__self__, "max_wait_seconds", max_wait_seconds)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if min_wait_seconds is not None:
            pulumi.set(__self__, "min_wait_seconds", min_wait_seconds)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if private_key is None:
            private_key = _utilities.get_env('ZSCALER_PRIVATE_KEY')
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if use_legacy_client is None:
            use_legacy_client = _utilities.get_env_bool('ZSCALER_USE_LEGACY_CLIENT')
        if use_legacy_client is not None:
            pulumi.set(__self__, "use_legacy_client", use_legacy_client)
        if vanity_domain is None:
            vanity_domain = _utilities.get_env('ZSCALER_VANITY_DOMAIN')
        if vanity_domain is not None:
            pulumi.set(__self__, "vanity_domain", vanity_domain)
        if zpa_client_id is None:
            zpa_client_id = _utilities.get_env('ZPA_CLIENT_ID')
        if zpa_client_id is not None:
            pulumi.set(__self__, "zpa_client_id", zpa_client_id)
        if zpa_client_secret is None:
            zpa_client_secret = _utilities.get_env('ZPA_CLIENT_SECRET')
        if zpa_client_secret is not None:
            pulumi.set(__self__, "zpa_client_secret", zpa_client_secret)
        if zpa_cloud is None:
            zpa_cloud = _utilities.get_env('ZPA_CLOUD')
        if zpa_cloud is not None:
            pulumi.set(__self__, "zpa_cloud", zpa_cloud)
        if zpa_customer_id is None:
            zpa_customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
        if zpa_customer_id is not None:
            pulumi.set(__self__, "zpa_customer_id", zpa_customer_id)
        if zscaler_cloud is None:
            zscaler_cloud = _utilities.get_env('ZSCALER_CLOUD')
        if zscaler_cloud is not None:
            pulumi.set(__self__, "zscaler_cloud", zscaler_cloud)

    @property
    @pulumi.getter
    def backoff(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Use exponential back off strategy for rate limits.
        """
        return pulumi.get(self, "backoff")

    @backoff.setter
    def backoff(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "backoff", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        """
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        maximum number of retries to attempt before erroring out.
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="maxWaitSeconds")
    def max_wait_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        """
        return pulumi.get(self, "max_wait_seconds")

    @max_wait_seconds.setter
    def max_wait_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_wait_seconds", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa microtenant ID
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter(name="minWaitSeconds")
    def min_wait_seconds(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        """
        return pulumi.get(self, "min_wait_seconds")

    @min_wait_seconds.setter
    def min_wait_seconds(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_wait_seconds", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
        https://help.zscaler.com/zpa/understanding-rate-limiting.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa private key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
        maximum value can be `300`.
        """
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter(name="useLegacyClient")
    def use_legacy_client(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enables interaction with the ZPA legacy API framework
        """
        return pulumi.get(self, "use_legacy_client")

    @use_legacy_client.setter
    def use_legacy_client(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "use_legacy_client", value)

    @property
    @pulumi.getter(name="vanityDomain")
    def vanity_domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Zscaler Vanity Domain
        """
        return pulumi.get(self, "vanity_domain")

    @vanity_domain.setter
    def vanity_domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vanity_domain", value)

    @property
    @pulumi.getter(name="zpaClientId")
    def zpa_client_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "zpa_client_id")

    @zpa_client_id.setter
    def zpa_client_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpa_client_id", value)

    @property
    @pulumi.getter(name="zpaClientSecret")
    def zpa_client_secret(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "zpa_client_secret")

    @zpa_client_secret.setter
    def zpa_client_secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpa_client_secret", value)

    @property
    @pulumi.getter(name="zpaCloud")
    def zpa_cloud(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        """
        return pulumi.get(self, "zpa_cloud")

    @zpa_cloud.setter
    def zpa_cloud(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpa_cloud", value)

    @property
    @pulumi.getter(name="zpaCustomerId")
    def zpa_customer_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "zpa_customer_id")

    @zpa_customer_id.setter
    def zpa_customer_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zpa_customer_id", value)

    @property
    @pulumi.getter(name="zscalerCloud")
    def zscaler_cloud(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Zscaler Cloud Name
        """
        return pulumi.get(self, "zscaler_cloud")

    @zscaler_cloud.setter
    def zscaler_cloud(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zscaler_cloud", value)


@pulumi.type_token("pulumi:providers:zpa")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backoff: Optional[pulumi.Input[builtins.bool]] = None,
                 client_id: Optional[pulumi.Input[builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 http_proxy: Optional[pulumi.Input[builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[builtins.int]] = None,
                 max_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 min_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 parallelism: Optional[pulumi.Input[builtins.int]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 request_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 use_legacy_client: Optional[pulumi.Input[builtins.bool]] = None,
                 vanity_domain: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_id: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_cloud: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 zscaler_cloud: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the zpa package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] backoff: Use exponential back off strategy for rate limits.
        :param pulumi.Input[builtins.str] client_id: zpa client id
        :param pulumi.Input[builtins.str] client_secret: zpa client secret
        :param pulumi.Input[builtins.str] customer_id: zpa customer id
        :param pulumi.Input[builtins.str] http_proxy: Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        :param pulumi.Input[builtins.int] max_retries: maximum number of retries to attempt before erroring out.
        :param pulumi.Input[builtins.int] max_wait_seconds: maximum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        :param pulumi.Input[builtins.str] microtenant_id: zpa microtenant ID
        :param pulumi.Input[builtins.int] min_wait_seconds: minimum seconds to wait when rate limit is hit. We use exponential backoffs when backoff is enabled.
        :param pulumi.Input[builtins.int] parallelism: Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
               https://help.zscaler.com/zpa/understanding-rate-limiting.
        :param pulumi.Input[builtins.str] private_key: zpa private key
        :param pulumi.Input[builtins.int] request_timeout: Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
               maximum value can be `300`.
        :param pulumi.Input[builtins.bool] use_legacy_client: Enables interaction with the ZPA legacy API framework
        :param pulumi.Input[builtins.str] vanity_domain: Zscaler Vanity Domain
        :param pulumi.Input[builtins.str] zpa_client_id: zpa client id
        :param pulumi.Input[builtins.str] zpa_client_secret: zpa client secret
        :param pulumi.Input[builtins.str] zpa_cloud: Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        :param pulumi.Input[builtins.str] zpa_customer_id: zpa customer id
        :param pulumi.Input[builtins.str] zscaler_cloud: Zscaler Cloud Name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the zpa package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backoff: Optional[pulumi.Input[builtins.bool]] = None,
                 client_id: Optional[pulumi.Input[builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 http_proxy: Optional[pulumi.Input[builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[builtins.int]] = None,
                 max_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 min_wait_seconds: Optional[pulumi.Input[builtins.int]] = None,
                 parallelism: Optional[pulumi.Input[builtins.int]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 request_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 use_legacy_client: Optional[pulumi.Input[builtins.bool]] = None,
                 vanity_domain: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_id: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_client_secret: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_cloud: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_customer_id: Optional[pulumi.Input[builtins.str]] = None,
                 zscaler_cloud: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["backoff"] = pulumi.Output.from_input(backoff).apply(pulumi.runtime.to_json) if backoff is not None else None
            if client_id is None:
                client_id = _utilities.get_env('ZSCALER_CLIENT_ID')
            __props__.__dict__["client_id"] = client_id
            if client_secret is None:
                client_secret = _utilities.get_env('ZSCALER_CLIENT_SECRET')
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            if customer_id is None:
                customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
            __props__.__dict__["customer_id"] = None if customer_id is None else pulumi.Output.secret(customer_id)
            __props__.__dict__["http_proxy"] = http_proxy
            __props__.__dict__["max_retries"] = pulumi.Output.from_input(max_retries).apply(pulumi.runtime.to_json) if max_retries is not None else None
            __props__.__dict__["max_wait_seconds"] = pulumi.Output.from_input(max_wait_seconds).apply(pulumi.runtime.to_json) if max_wait_seconds is not None else None
            __props__.__dict__["microtenant_id"] = None if microtenant_id is None else pulumi.Output.secret(microtenant_id)
            __props__.__dict__["min_wait_seconds"] = pulumi.Output.from_input(min_wait_seconds).apply(pulumi.runtime.to_json) if min_wait_seconds is not None else None
            __props__.__dict__["parallelism"] = pulumi.Output.from_input(parallelism).apply(pulumi.runtime.to_json) if parallelism is not None else None
            if private_key is None:
                private_key = _utilities.get_env('ZSCALER_PRIVATE_KEY')
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["request_timeout"] = pulumi.Output.from_input(request_timeout).apply(pulumi.runtime.to_json) if request_timeout is not None else None
            if use_legacy_client is None:
                use_legacy_client = _utilities.get_env_bool('ZSCALER_USE_LEGACY_CLIENT')
            __props__.__dict__["use_legacy_client"] = pulumi.Output.from_input(use_legacy_client).apply(pulumi.runtime.to_json) if use_legacy_client is not None else None
            if vanity_domain is None:
                vanity_domain = _utilities.get_env('ZSCALER_VANITY_DOMAIN')
            __props__.__dict__["vanity_domain"] = None if vanity_domain is None else pulumi.Output.secret(vanity_domain)
            if zpa_client_id is None:
                zpa_client_id = _utilities.get_env('ZPA_CLIENT_ID')
            __props__.__dict__["zpa_client_id"] = zpa_client_id
            if zpa_client_secret is None:
                zpa_client_secret = _utilities.get_env('ZPA_CLIENT_SECRET')
            __props__.__dict__["zpa_client_secret"] = None if zpa_client_secret is None else pulumi.Output.secret(zpa_client_secret)
            if zpa_cloud is None:
                zpa_cloud = _utilities.get_env('ZPA_CLOUD')
            __props__.__dict__["zpa_cloud"] = zpa_cloud
            if zpa_customer_id is None:
                zpa_customer_id = _utilities.get_env('ZPA_CUSTOMER_ID')
            __props__.__dict__["zpa_customer_id"] = None if zpa_customer_id is None else pulumi.Output.secret(zpa_customer_id)
            if zscaler_cloud is None:
                zscaler_cloud = _utilities.get_env('ZSCALER_CLOUD')
            __props__.__dict__["zscaler_cloud"] = None if zscaler_cloud is None else pulumi.Output.secret(zscaler_cloud)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret", "customerId", "microtenantId", "privateKey", "vanityDomain", "zpaClientSecret", "zpaCustomerId", "zscalerCloud"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'zpa',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        """
        return pulumi.get(self, "http_proxy")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa microtenant ID
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa private key
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="vanityDomain")
    def vanity_domain(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Zscaler Vanity Domain
        """
        return pulumi.get(self, "vanity_domain")

    @property
    @pulumi.getter(name="zpaClientId")
    def zpa_client_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa client id
        """
        return pulumi.get(self, "zpa_client_id")

    @property
    @pulumi.getter(name="zpaClientSecret")
    def zpa_client_secret(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa client secret
        """
        return pulumi.get(self, "zpa_client_secret")

    @property
    @pulumi.getter(name="zpaCloud")
    def zpa_cloud(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Cloud to use PRODUCTION, ZPATWO, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2
        """
        return pulumi.get(self, "zpa_cloud")

    @property
    @pulumi.getter(name="zpaCustomerId")
    def zpa_customer_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        zpa customer id
        """
        return pulumi.get(self, "zpa_customer_id")

    @property
    @pulumi.getter(name="zscalerCloud")
    def zscaler_cloud(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Zscaler Cloud Name
        """
        return pulumi.get(self, "zscaler_cloud")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:zpa/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

