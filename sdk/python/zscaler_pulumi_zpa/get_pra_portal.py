# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPRAPortalResult',
    'AwaitableGetPRAPortalResult',
    'get_pra_portal',
    'get_pra_portal_output',
]

@pulumi.output_type
class GetPRAPortalResult:
    """
    A collection of values returned by getPRAPortal.
    """
    def __init__(__self__, certificate_id=None, certificate_name=None, cname=None, creation_time=None, description=None, domain=None, enabled=None, ext_domain=None, ext_domain_name=None, ext_domain_translation=None, ext_label=None, getc_name=None, id=None, microtenant_id=None, microtenant_name=None, modified_by=None, modified_time=None, name=None, user_notification=None, user_notification_enabled=None, user_portal_gid=None, user_portal_name=None):
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name and not isinstance(certificate_name, str):
            raise TypeError("Expected argument 'certificate_name' to be a str")
        pulumi.set(__self__, "certificate_name", certificate_name)
        if cname and not isinstance(cname, str):
            raise TypeError("Expected argument 'cname' to be a str")
        pulumi.set(__self__, "cname", cname)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if ext_domain and not isinstance(ext_domain, str):
            raise TypeError("Expected argument 'ext_domain' to be a str")
        pulumi.set(__self__, "ext_domain", ext_domain)
        if ext_domain_name and not isinstance(ext_domain_name, str):
            raise TypeError("Expected argument 'ext_domain_name' to be a str")
        pulumi.set(__self__, "ext_domain_name", ext_domain_name)
        if ext_domain_translation and not isinstance(ext_domain_translation, str):
            raise TypeError("Expected argument 'ext_domain_translation' to be a str")
        pulumi.set(__self__, "ext_domain_translation", ext_domain_translation)
        if ext_label and not isinstance(ext_label, str):
            raise TypeError("Expected argument 'ext_label' to be a str")
        pulumi.set(__self__, "ext_label", ext_label)
        if getc_name and not isinstance(getc_name, str):
            raise TypeError("Expected argument 'getc_name' to be a str")
        pulumi.set(__self__, "getc_name", getc_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if microtenant_id and not isinstance(microtenant_id, str):
            raise TypeError("Expected argument 'microtenant_id' to be a str")
        pulumi.set(__self__, "microtenant_id", microtenant_id)
        if microtenant_name and not isinstance(microtenant_name, str):
            raise TypeError("Expected argument 'microtenant_name' to be a str")
        pulumi.set(__self__, "microtenant_name", microtenant_name)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if user_notification and not isinstance(user_notification, str):
            raise TypeError("Expected argument 'user_notification' to be a str")
        pulumi.set(__self__, "user_notification", user_notification)
        if user_notification_enabled and not isinstance(user_notification_enabled, bool):
            raise TypeError("Expected argument 'user_notification_enabled' to be a bool")
        pulumi.set(__self__, "user_notification_enabled", user_notification_enabled)
        if user_portal_gid and not isinstance(user_portal_gid, str):
            raise TypeError("Expected argument 'user_portal_gid' to be a str")
        pulumi.set(__self__, "user_portal_gid", user_portal_gid)
        if user_portal_name and not isinstance(user_portal_name, str):
            raise TypeError("Expected argument 'user_portal_name' to be a str")
        pulumi.set(__self__, "user_portal_name", user_portal_name)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> builtins.str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> builtins.str:
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def cname(self) -> builtins.str:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> builtins.str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extDomain")
    def ext_domain(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ext_domain")

    @property
    @pulumi.getter(name="extDomainName")
    def ext_domain_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ext_domain_name")

    @property
    @pulumi.getter(name="extDomainTranslation")
    def ext_domain_translation(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ext_domain_translation")

    @property
    @pulumi.getter(name="extLabel")
    def ext_label(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ext_label")

    @property
    @pulumi.getter(name="getcName")
    def getc_name(self) -> builtins.str:
        return pulumi.get(self, "getc_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> builtins.str:
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter(name="microtenantName")
    def microtenant_name(self) -> builtins.str:
        return pulumi.get(self, "microtenant_name")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> builtins.str:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> builtins.str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userNotification")
    def user_notification(self) -> builtins.str:
        return pulumi.get(self, "user_notification")

    @property
    @pulumi.getter(name="userNotificationEnabled")
    def user_notification_enabled(self) -> builtins.bool:
        return pulumi.get(self, "user_notification_enabled")

    @property
    @pulumi.getter(name="userPortalGid")
    def user_portal_gid(self) -> builtins.str:
        return pulumi.get(self, "user_portal_gid")

    @property
    @pulumi.getter(name="userPortalName")
    def user_portal_name(self) -> builtins.str:
        return pulumi.get(self, "user_portal_name")


class AwaitableGetPRAPortalResult(GetPRAPortalResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPRAPortalResult(
            certificate_id=self.certificate_id,
            certificate_name=self.certificate_name,
            cname=self.cname,
            creation_time=self.creation_time,
            description=self.description,
            domain=self.domain,
            enabled=self.enabled,
            ext_domain=self.ext_domain,
            ext_domain_name=self.ext_domain_name,
            ext_domain_translation=self.ext_domain_translation,
            ext_label=self.ext_label,
            getc_name=self.getc_name,
            id=self.id,
            microtenant_id=self.microtenant_id,
            microtenant_name=self.microtenant_name,
            modified_by=self.modified_by,
            modified_time=self.modified_time,
            name=self.name,
            user_notification=self.user_notification,
            user_notification_enabled=self.user_notification_enabled,
            user_portal_gid=self.user_portal_gid,
            user_portal_name=self.user_portal_name)


def get_pra_portal(ext_domain: Optional[builtins.str] = None,
                   ext_domain_name: Optional[builtins.str] = None,
                   ext_domain_translation: Optional[builtins.str] = None,
                   ext_label: Optional[builtins.str] = None,
                   id: Optional[builtins.str] = None,
                   name: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPRAPortalResult:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-privileged-portals)
    * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-portals-using-api)

    Use the **zpa_pra_portal_controller** data source to get information about a privileged remote access portal created in the Zscaler Private Access cloud. This data source can then be referenced in an privileged remote access console resource.

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA PRA Portal Data Source
    this = zpa.get_pra_portal(name="Example")
    ```
    """
    __args__ = dict()
    __args__['extDomain'] = ext_domain
    __args__['extDomainName'] = ext_domain_name
    __args__['extDomainTranslation'] = ext_domain_translation
    __args__['extLabel'] = ext_label
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getPRAPortal:getPRAPortal', __args__, opts=opts, typ=GetPRAPortalResult).value

    return AwaitableGetPRAPortalResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        certificate_name=pulumi.get(__ret__, 'certificate_name'),
        cname=pulumi.get(__ret__, 'cname'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        domain=pulumi.get(__ret__, 'domain'),
        enabled=pulumi.get(__ret__, 'enabled'),
        ext_domain=pulumi.get(__ret__, 'ext_domain'),
        ext_domain_name=pulumi.get(__ret__, 'ext_domain_name'),
        ext_domain_translation=pulumi.get(__ret__, 'ext_domain_translation'),
        ext_label=pulumi.get(__ret__, 'ext_label'),
        getc_name=pulumi.get(__ret__, 'getc_name'),
        id=pulumi.get(__ret__, 'id'),
        microtenant_id=pulumi.get(__ret__, 'microtenant_id'),
        microtenant_name=pulumi.get(__ret__, 'microtenant_name'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        name=pulumi.get(__ret__, 'name'),
        user_notification=pulumi.get(__ret__, 'user_notification'),
        user_notification_enabled=pulumi.get(__ret__, 'user_notification_enabled'),
        user_portal_gid=pulumi.get(__ret__, 'user_portal_gid'),
        user_portal_name=pulumi.get(__ret__, 'user_portal_name'))
def get_pra_portal_output(ext_domain: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          ext_domain_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          ext_domain_translation: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          ext_label: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPRAPortalResult]:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-privileged-portals)
    * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-portals-using-api)

    Use the **zpa_pra_portal_controller** data source to get information about a privileged remote access portal created in the Zscaler Private Access cloud. This data source can then be referenced in an privileged remote access console resource.

    **NOTE:** To ensure consistent search results across data sources, please avoid using multiple spaces or special characters in your search queries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zpa as zpa

    # ZPA PRA Portal Data Source
    this = zpa.get_pra_portal(name="Example")
    ```
    """
    __args__ = dict()
    __args__['extDomain'] = ext_domain
    __args__['extDomainName'] = ext_domain_name
    __args__['extDomainTranslation'] = ext_domain_translation
    __args__['extLabel'] = ext_label
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zpa:index/getPRAPortal:getPRAPortal', __args__, opts=opts, typ=GetPRAPortalResult)
    return __ret__.apply(lambda __response__: GetPRAPortalResult(
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        certificate_name=pulumi.get(__response__, 'certificate_name'),
        cname=pulumi.get(__response__, 'cname'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        description=pulumi.get(__response__, 'description'),
        domain=pulumi.get(__response__, 'domain'),
        enabled=pulumi.get(__response__, 'enabled'),
        ext_domain=pulumi.get(__response__, 'ext_domain'),
        ext_domain_name=pulumi.get(__response__, 'ext_domain_name'),
        ext_domain_translation=pulumi.get(__response__, 'ext_domain_translation'),
        ext_label=pulumi.get(__response__, 'ext_label'),
        getc_name=pulumi.get(__response__, 'getc_name'),
        id=pulumi.get(__response__, 'id'),
        microtenant_id=pulumi.get(__response__, 'microtenant_id'),
        microtenant_name=pulumi.get(__response__, 'microtenant_name'),
        modified_by=pulumi.get(__response__, 'modified_by'),
        modified_time=pulumi.get(__response__, 'modified_time'),
        name=pulumi.get(__response__, 'name'),
        user_notification=pulumi.get(__response__, 'user_notification'),
        user_notification_enabled=pulumi.get(__response__, 'user_notification_enabled'),
        user_portal_gid=pulumi.get(__response__, 'user_portal_gid'),
        user_portal_name=pulumi.get(__response__, 'user_portal_name')))
