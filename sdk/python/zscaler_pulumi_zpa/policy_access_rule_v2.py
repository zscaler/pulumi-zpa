# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyAccessRuleV2Args', 'PolicyAccessRuleV2']

@pulumi.input_type
class PolicyAccessRuleV2Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app_connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]] = None,
                 app_server_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PolicyAccessRuleV2 resource.
        :param pulumi.Input[str] action: This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]] app_connector_groups: List of app-connector IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]] app_server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[str] custom_msg: This is for providing a customer message for the user.
        :param pulumi.Input[str] description: This is the description of the access policy rule.
        :param pulumi.Input[str] name: This is the name of the policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_connector_groups is not None:
            pulumi.set(__self__, "app_connector_groups", app_connector_groups)
        if app_server_groups is not None:
            pulumi.set(__self__, "app_server_groups", app_server_groups)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appConnectorGroups")
    def app_connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]]:
        """
        List of app-connector IDs.
        """
        return pulumi.get(self, "app_connector_groups")

    @app_connector_groups.setter
    def app_connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]]):
        pulumi.set(self, "app_connector_groups", value)

    @property
    @pulumi.getter(name="appServerGroups")
    def app_server_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "app_server_groups")

    @app_server_groups.setter
    def app_server_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]]):
        pulumi.set(self, "app_server_groups", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[pulumi.Input[str]]:
        """
        This is for providing a customer message for the user.
        """
        return pulumi.get(self, "custom_msg")

    @custom_msg.setter
    def custom_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_msg", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)


@pulumi.input_type
class _PolicyAccessRuleV2State:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 app_connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]] = None,
                 app_server_groups: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_set_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PolicyAccessRuleV2 resources.
        :param pulumi.Input[str] action: This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]] app_connector_groups: List of app-connector IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]] app_server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[str] custom_msg: This is for providing a customer message for the user.
        :param pulumi.Input[str] description: This is the description of the access policy rule.
        :param pulumi.Input[str] name: This is the name of the policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_connector_groups is not None:
            pulumi.set(__self__, "app_connector_groups", app_connector_groups)
        if app_server_groups is not None:
            pulumi.set(__self__, "app_server_groups", app_server_groups)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appConnectorGroups")
    def app_connector_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]]:
        """
        List of app-connector IDs.
        """
        return pulumi.get(self, "app_connector_groups")

    @app_connector_groups.setter
    def app_connector_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppConnectorGroupArgs']]]]):
        pulumi.set(self, "app_connector_groups", value)

    @property
    @pulumi.getter(name="appServerGroups")
    def app_server_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "app_server_groups")

    @app_server_groups.setter
    def app_server_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2AppServerGroupArgs']]]]):
        pulumi.set(self, "app_server_groups", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyAccessRuleV2ConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[pulumi.Input[str]]:
        """
        This is for providing a customer message for the user.
        """
        return pulumi.get(self, "custom_msg")

    @custom_msg.setter
    def custom_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_msg", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_set_id", value)


class PolicyAccessRuleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppConnectorGroupArgs']]]]] = None,
                 app_server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppServerGroupArgs']]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2ConditionArgs']]]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
        * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)

        The **zpa_policy_access_rule_v2** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.

          ⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.

          ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        this_id_p_controller = zpa.get_id_p_controller(name="Idp_Name")
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("thisSegmentGroup",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_access_rule_v2 = zpa.PolicyAccessRuleV2("thisPolicyAccessRuleV2",
            description="Example",
            action="ALLOW",
            conditions=[
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="APP_GROUP",
                        values=[this_segment_group.id],
                    )],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[
                        zpa.PolicyAccessRuleV2ConditionOperandArgs(
                            object_type="SAML",
                            entry_values=[
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs="user1@acme.com",
                                    lhs=email_user_sso.id,
                                ),
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs="A000",
                                    lhs=group_user.id,
                                ),
                            ],
                        ),
                        zpa.PolicyAccessRuleV2ConditionOperandArgs(
                            object_type="SCIM_GROUP",
                            entry_values=[
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs=a000.id,
                                    lhs=this_id_p_controller.id,
                                ),
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs=b000.id,
                                    lhs=this_id_p_controller.id,
                                ),
                            ],
                        ),
                    ],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="PLATFORM",
                        entry_values=[
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                rhs="true",
                                lhs="linux",
                            ),
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                rhs="true",
                                lhs="android",
                            ),
                        ],
                    )],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="COUNTRY_CODE",
                        entry_values=[
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                lhs="CA",
                                rhs="true",
                            ),
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                lhs="US",
                                rhs="true",
                            ),
                        ],
                    )],
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## LHS and RHS Values

        | Object Type | LHS| RHS| VALUES
        |----------|-----------|----------|----------
        | APP  |   |  | ``application_segment_id`` |
        | APP_GROUP  |   |  | ``segment_group_id``|
        | CLIENT_TYPE  |   |  |  ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |
        | EDGE_CONNECTOR_GROUP  |   |  |  ``<edge_connector_id>`` |
        | BRANCH_CONNECTOR_GROUP  |   |  |  ``<branch_connector_id>`` |
        | LOCATION   |   |  | ``location_id`` |
        | MACHINE_GRP   |   |  | ``machine_group_id`` |
        | SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |
        | SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |
        | SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |
        | PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``"true"`` / ``"false"`` |
        | POSTURE | ``posture_udid``  | ``"true"`` / ``"false"`` |
        | TRUSTED_NETWORK | ``network_id``  | ``"true"`` |
        | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``"true"`` / ``"false"`` |

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Policy access rule can be imported by using `<RULE ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/policyAccessRuleV2:PolicyAccessRuleV2 example <rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppConnectorGroupArgs']]]] app_connector_groups: List of app-connector IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppServerGroupArgs']]]] app_server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2ConditionArgs']]]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[str] custom_msg: This is for providing a customer message for the user.
        :param pulumi.Input[str] description: This is the description of the access policy rule.
        :param pulumi.Input[str] name: This is the name of the policy rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyAccessRuleV2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-access-policy)
        * [API documentation](https://help.zscaler.com/zpa/configuring-access-policies-using-api#postV2)

        The **zpa_policy_access_rule_v2** resource creates and manages policy access rule in the Zscaler Private Access cloud using a new v2 API endpoint.

          ⚠️ **NOTE**: This resource is recommended if your configuration requires the association of more than 1000 resource criteria per rule.

          ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zpa as zpa
        import zscaler_pulumi_zpa as zpa

        this_id_p_controller = zpa.get_id_p_controller(name="Idp_Name")
        email_user_sso = zpa.get_saml_attribute(name="Email_Users",
            idp_name="Idp_Name")
        group_user = zpa.get_saml_attribute(name="GroupName_Users",
            idp_name="Idp_Name")
        a000 = zpa.get_scim_groups(name="A000",
            idp_name="Idp_Name")
        b000 = zpa.get_scim_groups(name="B000",
            idp_name="Idp_Name")
        # Create Segment Group
        this_segment_group = zpa.SegmentGroup("thisSegmentGroup",
            description="Example",
            enabled=True)
        # Create Policy Access Rule V2
        this_policy_access_rule_v2 = zpa.PolicyAccessRuleV2("thisPolicyAccessRuleV2",
            description="Example",
            action="ALLOW",
            conditions=[
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="APP_GROUP",
                        values=[this_segment_group.id],
                    )],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[
                        zpa.PolicyAccessRuleV2ConditionOperandArgs(
                            object_type="SAML",
                            entry_values=[
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs="user1@acme.com",
                                    lhs=email_user_sso.id,
                                ),
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs="A000",
                                    lhs=group_user.id,
                                ),
                            ],
                        ),
                        zpa.PolicyAccessRuleV2ConditionOperandArgs(
                            object_type="SCIM_GROUP",
                            entry_values=[
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs=a000.id,
                                    lhs=this_id_p_controller.id,
                                ),
                                zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                    rhs=b000.id,
                                    lhs=this_id_p_controller.id,
                                ),
                            ],
                        ),
                    ],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="PLATFORM",
                        entry_values=[
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                rhs="true",
                                lhs="linux",
                            ),
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                rhs="true",
                                lhs="android",
                            ),
                        ],
                    )],
                ),
                zpa.PolicyAccessRuleV2ConditionArgs(
                    operator="OR",
                    operands=[zpa.PolicyAccessRuleV2ConditionOperandArgs(
                        object_type="COUNTRY_CODE",
                        entry_values=[
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                lhs="CA",
                                rhs="true",
                            ),
                            zpa.PolicyAccessRuleV2ConditionOperandEntryValueArgs(
                                lhs="US",
                                rhs="true",
                            ),
                        ],
                    )],
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## LHS and RHS Values

        | Object Type | LHS| RHS| VALUES
        |----------|-----------|----------|----------
        | APP  |   |  | ``application_segment_id`` |
        | APP_GROUP  |   |  | ``segment_group_id``|
        | CLIENT_TYPE  |   |  |  ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |
        | EDGE_CONNECTOR_GROUP  |   |  |  ``<edge_connector_id>`` |
        | BRANCH_CONNECTOR_GROUP  |   |  |  ``<branch_connector_id>`` |
        | LOCATION   |   |  | ``location_id`` |
        | MACHINE_GRP   |   |  | ``machine_group_id`` |
        | SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |
        | SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |
        | SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |
        | PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``"true"`` / ``"false"`` |
        | POSTURE | ``posture_udid``  | ``"true"`` / ``"false"`` |
        | TRUSTED_NETWORK | ``network_id``  | ``"true"`` |
        | COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``"true"`` / ``"false"`` |

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Policy access rule can be imported by using `<RULE ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/policyAccessRuleV2:PolicyAccessRuleV2 example <rule_id>
        ```

        :param str resource_name: The name of the resource.
        :param PolicyAccessRuleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyAccessRuleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppConnectorGroupArgs']]]]] = None,
                 app_server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppServerGroupArgs']]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2ConditionArgs']]]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyAccessRuleV2Args.__new__(PolicyAccessRuleV2Args)

            __props__.__dict__["action"] = action
            __props__.__dict__["app_connector_groups"] = app_connector_groups
            __props__.__dict__["app_server_groups"] = app_server_groups
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["custom_msg"] = custom_msg
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["operator"] = operator
            __props__.__dict__["policy_set_id"] = None
        super(PolicyAccessRuleV2, __self__).__init__(
            'zpa:index/policyAccessRuleV2:PolicyAccessRuleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            app_connector_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppConnectorGroupArgs']]]]] = None,
            app_server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppServerGroupArgs']]]]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2ConditionArgs']]]]] = None,
            custom_msg: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operator: Optional[pulumi.Input[str]] = None,
            policy_set_id: Optional[pulumi.Input[str]] = None) -> 'PolicyAccessRuleV2':
        """
        Get an existing PolicyAccessRuleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppConnectorGroupArgs']]]] app_connector_groups: List of app-connector IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2AppServerGroupArgs']]]] app_server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyAccessRuleV2ConditionArgs']]]] conditions: This is for proviidng the set of conditions for the policy.
        :param pulumi.Input[str] custom_msg: This is for providing a customer message for the user.
        :param pulumi.Input[str] description: This is the description of the access policy rule.
        :param pulumi.Input[str] name: This is the name of the policy rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyAccessRuleV2State.__new__(_PolicyAccessRuleV2State)

        __props__.__dict__["action"] = action
        __props__.__dict__["app_connector_groups"] = app_connector_groups
        __props__.__dict__["app_server_groups"] = app_server_groups
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["custom_msg"] = custom_msg
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["operator"] = operator
        __props__.__dict__["policy_set_id"] = policy_set_id
        return PolicyAccessRuleV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        This is for providing the rule action. Supported values: `ALLOW`, `DENY`, and `REQUIRE_APPROVAL`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appConnectorGroups")
    def app_connector_groups(self) -> pulumi.Output[Sequence['outputs.PolicyAccessRuleV2AppConnectorGroup']]:
        """
        List of app-connector IDs.
        """
        return pulumi.get(self, "app_connector_groups")

    @property
    @pulumi.getter(name="appServerGroups")
    def app_server_groups(self) -> pulumi.Output[Sequence['outputs.PolicyAccessRuleV2AppServerGroup']]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "app_server_groups")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.PolicyAccessRuleV2Condition']]:
        """
        This is for proviidng the set of conditions for the policy.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> pulumi.Output[Optional[str]]:
        """
        This is for providing a customer message for the user.
        """
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        This is the description of the access policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        This is the name of the policy rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Output[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_set_id")

