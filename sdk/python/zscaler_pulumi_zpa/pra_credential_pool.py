# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PraCredentialPoolArgs', 'PraCredentialPool']

@pulumi.input_type
class PraCredentialPoolArgs:
    def __init__(__self__, *,
                 credential_type: Optional[pulumi.Input[builtins.str]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PraCredentialPool resource.
        :param pulumi.Input[builtins.str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]] credentials: List of PRA Credentials
        :param pulumi.Input[builtins.str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[builtins.str] name: The name of the privileged credential
        """
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]]:
        """
        List of PRA Credentials
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PraCredentialPoolState:
    def __init__(__self__, *,
                 credential_type: Optional[pulumi.Input[builtins.str]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PraCredentialPool resources.
        :param pulumi.Input[builtins.str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]] credentials: List of PRA Credentials
        :param pulumi.Input[builtins.str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[builtins.str] name: The name of the privileged credential
        """
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]]:
        """
        List of PRA Credentials
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PraCredentialPoolCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.type_token("zpa:index/praCredentialPool:PraCredentialPool")
class PraCredentialPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_type: Optional[pulumi.Input[builtins.str]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PraCredentialPoolCredentialArgs', 'PraCredentialPoolCredentialArgsDict']]]]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credential-pools)
        * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)

        The **zpa_pra_credential_pool** resource creates a privileged remote access credential pool in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        this_pra_credential = zpa.PRACredential("thisPRACredential",
            description="Created with Terraform",
            credential_type="PASSWORD",
            user_domain="acme.com",
            password="")
        # Creates Credential Pool of Type "USERNAME_PASSWORD"
        this_pra_credential_pool = zpa.PraCredentialPool("thisPraCredentialPool",
            credential_type="USERNAME_PASSWORD",
            credentials=[{
                "ids": [this_pra_credential.id],
            }])
        ```

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zpa_pra_credential_pool** can be imported by using `<POOL ID>` or `<POOL NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PraCredentialPoolCredentialArgs', 'PraCredentialPoolCredentialArgsDict']]]] credentials: List of PRA Credentials
        :param pulumi.Input[builtins.str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[builtins.str] name: The name of the privileged credential
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PraCredentialPoolArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zpa/about-privileged-credential-pools)
        * [API documentation](https://help.zscaler.com/zpa/configuring-privileged-credentials-using-api)

        The **zpa_pra_credential_pool** resource creates a privileged remote access credential pool in the Zscaler Private Access cloud. This resource can then be referenced in an privileged access policy resource.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zpa as zpa

        this_pra_credential = zpa.PRACredential("thisPRACredential",
            description="Created with Terraform",
            credential_type="PASSWORD",
            user_domain="acme.com",
            password="")
        # Creates Credential Pool of Type "USERNAME_PASSWORD"
        this_pra_credential_pool = zpa.PraCredentialPool("thisPraCredentialPool",
            credential_type="USERNAME_PASSWORD",
            credentials=[{
                "ids": [this_pra_credential.id],
            }])
        ```

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zpa_pra_credential_pool** can be imported by using `<POOL ID>` or `<POOL NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_id>
        ```

        or

        ```sh
        $ pulumi import zpa:index/praCredentialPool:PraCredentialPool this <pool_name>
        ```

        :param str resource_name: The name of the resource.
        :param PraCredentialPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PraCredentialPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_type: Optional[pulumi.Input[builtins.str]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PraCredentialPoolCredentialArgs', 'PraCredentialPoolCredentialArgsDict']]]]] = None,
                 microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PraCredentialPoolArgs.__new__(PraCredentialPoolArgs)

            __props__.__dict__["credential_type"] = credential_type
            __props__.__dict__["credentials"] = credentials
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
        super(PraCredentialPool, __self__).__init__(
            'zpa:index/praCredentialPool:PraCredentialPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credential_type: Optional[pulumi.Input[builtins.str]] = None,
            credentials: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PraCredentialPoolCredentialArgs', 'PraCredentialPoolCredentialArgsDict']]]]] = None,
            microtenant_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None) -> 'PraCredentialPool':
        """
        Get an existing PraCredentialPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PraCredentialPoolCredentialArgs', 'PraCredentialPoolCredentialArgsDict']]]] credentials: List of PRA Credentials
        :param pulumi.Input[builtins.str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[builtins.str] name: The name of the privileged credential
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PraCredentialPoolState.__new__(_PraCredentialPoolState)

        __props__.__dict__["credential_type"] = credential_type
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        return PraCredentialPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Sequence['outputs.PraCredentialPoolCredential']]:
        """
        List of PRA Credentials
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

