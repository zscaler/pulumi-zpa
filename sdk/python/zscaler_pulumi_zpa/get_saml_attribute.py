# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSAMLAttributeResult',
    'AwaitableGetSAMLAttributeResult',
    'get_saml_attribute',
    'get_saml_attribute_output',
]

@pulumi.output_type
class GetSAMLAttributeResult:
    """
    A collection of values returned by getSAMLAttribute.
    """
    def __init__(__self__, creation_time=None, id=None, idp_id=None, idp_name=None, modified_time=None, modifiedby=None, name=None, saml_name=None, user_attribute=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_id and not isinstance(idp_id, str):
            raise TypeError("Expected argument 'idp_id' to be a str")
        pulumi.set(__self__, "idp_id", idp_id)
        if idp_name and not isinstance(idp_name, str):
            raise TypeError("Expected argument 'idp_name' to be a str")
        pulumi.set(__self__, "idp_name", idp_name)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if saml_name and not isinstance(saml_name, str):
            raise TypeError("Expected argument 'saml_name' to be a str")
        pulumi.set(__self__, "saml_name", saml_name)
        if user_attribute and not isinstance(user_attribute, bool):
            raise TypeError("Expected argument 'user_attribute' to be a bool")
        pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter(name="idpName")
    def idp_name(self) -> Optional[str]:
        return pulumi.get(self, "idp_name")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="samlName")
    def saml_name(self) -> str:
        return pulumi.get(self, "saml_name")

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> bool:
        return pulumi.get(self, "user_attribute")


class AwaitableGetSAMLAttributeResult(GetSAMLAttributeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSAMLAttributeResult(
            creation_time=self.creation_time,
            id=self.id,
            idp_id=self.idp_id,
            idp_name=self.idp_name,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            saml_name=self.saml_name,
            user_attribute=self.user_attribute)


def get_saml_attribute(id: Optional[str] = None,
                       idp_name: Optional[str] = None,
                       name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSAMLAttributeResult:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-saml-attributes)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-saml-attribute-details-using-api)

    Use the **zpa_saml_attribute** data source to get information about a SAML Attributes from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    email_user_sso = zpa.get_saml_attribute(idp_name="idp_name",
        name="Email_User SSO")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    department = zpa.get_saml_attribute(idp_name="idp_name",
        name="DepartmentName_IdP_Name_Users")
    ```
    <!--End PulumiCodeChooser -->
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['idpName'] = idp_name
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zpa:index/getSAMLAttribute:getSAMLAttribute', __args__, opts=opts, typ=GetSAMLAttributeResult).value

    return AwaitableGetSAMLAttributeResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        id=pulumi.get(__ret__, 'id'),
        idp_id=pulumi.get(__ret__, 'idp_id'),
        idp_name=pulumi.get(__ret__, 'idp_name'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        modifiedby=pulumi.get(__ret__, 'modifiedby'),
        name=pulumi.get(__ret__, 'name'),
        saml_name=pulumi.get(__ret__, 'saml_name'),
        user_attribute=pulumi.get(__ret__, 'user_attribute'))


@_utilities.lift_output_func(get_saml_attribute)
def get_saml_attribute_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                              idp_name: Optional[pulumi.Input[Optional[str]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSAMLAttributeResult]:
    """
    * [Official documentation](https://help.zscaler.com/zpa/about-saml-attributes)
    * [API documentation](https://help.zscaler.com/zpa/obtaining-saml-attribute-details-using-api)

    Use the **zpa_saml_attribute** data source to get information about a SAML Attributes from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    email_user_sso = zpa.get_saml_attribute(idp_name="idp_name",
        name="Email_User SSO")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zpa as zpa

    department = zpa.get_saml_attribute(idp_name="idp_name",
        name="DepartmentName_IdP_Name_Users")
    ```
    <!--End PulumiCodeChooser -->
    """
    ...
