# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PraCredentialControllerArgs', 'PraCredentialController']

@pulumi.input_type
class PraCredentialControllerArgs:
    def __init__(__self__, *,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_domain: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PraCredentialController resource.
        :param pulumi.Input[str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[str] description: The description of the privileged credential
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged credential
        :param pulumi.Input[str] passphrase: The password that is used to protect the SSH private key. This field is optional
        :param pulumi.Input[str] password: The password associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] private_key: The SSH private key associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] user_domain: The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
               console that is connected to an Active Directory Domain
        :param pulumi.Input[str] username: The username for the login you want to use for the privileged credential
        """
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if user_domain is not None:
            pulumi.set(__self__, "user_domain", user_domain)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged credential
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        The password that is used to protect the SSH private key. This field is optional
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSH private key associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        console that is connected to an Active Directory Domain
        """
        return pulumi.get(self, "user_domain")

    @user_domain.setter
    def user_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_domain", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _PraCredentialControllerState:
    def __init__(__self__, *,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_domain: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PraCredentialController resources.
        :param pulumi.Input[str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[str] description: The description of the privileged credential
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged credential
        :param pulumi.Input[str] passphrase: The password that is used to protect the SSH private key. This field is optional
        :param pulumi.Input[str] password: The password associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] private_key: The SSH private key associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] user_domain: The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
               console that is connected to an Active Directory Domain
        :param pulumi.Input[str] username: The username for the login you want to use for the privileged credential
        """
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microtenant_id is not None:
            pulumi.set(__self__, "microtenant_id", microtenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if user_domain is not None:
            pulumi.set(__self__, "user_domain", user_domain)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the privileged credential
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @microtenant_id.setter
    def microtenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microtenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        The password that is used to protect the SSH private key. This field is optional
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSH private key associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        console that is connected to an Active Directory Domain
        """
        return pulumi.get(self, "user_domain")

    @user_domain.setter
    def user_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_domain", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


warnings.warn("""zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential""", DeprecationWarning)


class PraCredentialController(pulumi.CustomResource):
    warnings.warn("""zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_domain: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PraCredentialController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[str] description: The description of the privileged credential
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged credential
        :param pulumi.Input[str] passphrase: The password that is used to protect the SSH private key. This field is optional
        :param pulumi.Input[str] password: The password associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] private_key: The SSH private key associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] user_domain: The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
               console that is connected to an Active Directory Domain
        :param pulumi.Input[str] username: The username for the login you want to use for the privileged credential
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PraCredentialControllerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PraCredentialController resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PraCredentialControllerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PraCredentialControllerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 microtenant_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 user_domain: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""PraCredentialController is deprecated: zpa.index/pracredentialcontroller.PraCredentialController has been deprecated in favor of zpa.index/pracredential.PRACredential""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PraCredentialControllerArgs.__new__(PraCredentialControllerArgs)

            __props__.__dict__["credential_type"] = credential_type
            __props__.__dict__["description"] = description
            __props__.__dict__["microtenant_id"] = microtenant_id
            __props__.__dict__["name"] = name
            __props__.__dict__["passphrase"] = None if passphrase is None else pulumi.Output.secret(passphrase)
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["user_domain"] = user_domain
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passphrase", "password", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PraCredentialController, __self__).__init__(
            'zpa:index/praCredentialController:PraCredentialController',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credential_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            microtenant_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passphrase: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            user_domain: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'PraCredentialController':
        """
        Get an existing PraCredentialController resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_type: The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
               and VNC. Each protocol type has its own credential requirements.
        :param pulumi.Input[str] description: The description of the privileged credential
        :param pulumi.Input[str] microtenant_id: The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
               microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        :param pulumi.Input[str] name: The name of the privileged credential
        :param pulumi.Input[str] passphrase: The password that is used to protect the SSH private key. This field is optional
        :param pulumi.Input[str] password: The password associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] private_key: The SSH private key associated with the username for the login you want to use for the privileged credential
        :param pulumi.Input[str] user_domain: The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
               console that is connected to an Active Directory Domain
        :param pulumi.Input[str] username: The username for the login you want to use for the privileged credential
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PraCredentialControllerState.__new__(_PraCredentialControllerState)

        __props__.__dict__["credential_type"] = credential_type
        __props__.__dict__["description"] = description
        __props__.__dict__["microtenant_id"] = microtenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["password"] = password
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["user_domain"] = user_domain
        __props__.__dict__["username"] = username
        return PraCredentialController(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Output[Optional[str]]:
        """
        The protocol type that was designated for that particular privileged credential. The protocol type options are SSH, RDP,
        and VNC. Each protocol type has its own credential requirements.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the privileged credential
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="microtenantId")
    def microtenant_id(self) -> pulumi.Output[str]:
        """
        The unique identifier of the Microtenant for the ZPA tenant. If you are within the Default Microtenant, pass
        microtenantId as 0 when making requests to retrieve data from the Default Microtenant.
        """
        return pulumi.get(self, "microtenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the privileged credential
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[Optional[str]]:
        """
        The password that is used to protect the SSH private key. This field is optional
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        The SSH private key associated with the username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="userDomain")
    def user_domain(self) -> pulumi.Output[Optional[str]]:
        """
        The domain name associated with the username. The domain name only needs to be specified with logging in to an RDP
        console that is connected to an Active Directory Domain
        """
        return pulumi.get(self, "user_domain")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        The username for the login you want to use for the privileged credential
        """
        return pulumi.get(self, "username")

