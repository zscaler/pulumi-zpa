{
    "name": "zpa",
    "displayName": "Zscaler Private Access",
    "description": "A Pulumi package for creating and managing Zscaler Private Access (ZPA) cloud resources.",
    "keywords": [
        "pulumi",
        "zpa",
        "zscaler",
        "category/cloud"
    ],
    "homepage": "https://www.zscaler.com",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`zpa` Terraform Provider](https://github.com/zscaler/terraform-provider-zpa).",
    "repository": "https://github.com/zscaler/pulumi-zpa",
    "logoUrl": "https://raw.githubusercontent.com/zscaler/pulumi-zpa/master/assets/zscaler.png",
    "pluginDownloadURL": "github://api.github.com/zscaler",
    "publisher": "Zscaler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Zscaler"
        },
        "go": {
            "importBasePath": "github.com/zscaler/pulumi-zpa/sdk/go/zpa",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@bdzscaler/pulumi-zpa",
            "packageDescription": "A Pulumi package for creating and managing Zscaler Private Access (ZPA) cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zpa)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zpa` repo](https://github.com/zscaler/pulumi-zpa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zpa` repo](https://github.com/zscaler/terraform-provider-zpa/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "zscaler_pulumi_zpa",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zpa)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zpa` repo](https://github.com/zscaler/pulumi-zpa/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zpa` repo](https://github.com/zscaler/terraform-provider-zpa/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_ID"
                    ]
                }
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_SECRET"
                    ]
                },
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLOUD"
                    ]
                }
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CUSTOMER_ID"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "zpa:index/ApplicationSegmentBrowserAccessClientlessApp:ApplicationSegmentBrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "description": "If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`\n"
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the BA app.\n",
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the BA app. Supported values: `HTTP` and `HTTPS`\n",
                    "willReplaceOnChanges": true
                },
                "certificateId": {
                    "type": "string",
                    "description": "ID of the BA certificate. Refer to the data source documentation for `zpa.BrowserCertificate`\n"
                },
                "cname": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name or IP address of the BA app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "id": {
                    "type": "string"
                },
                "localDomain": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "path": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                }
            },
            "type": "object",
            "required": [
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationPort",
                        "applicationProtocol",
                        "certificateId",
                        "cname",
                        "enabled",
                        "hidden",
                        "id",
                        "name",
                        "trustUntrustedCert"
                    ]
                }
            }
        },
        "zpa:index/ApplicationSegmentBrowserAccessServerGroup:ApplicationSegmentBrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentBrowserAccessTcpPortRange:ApplicationSegmentBrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentBrowserAccessUdpPortRange:ApplicationSegmentBrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentInspectionCommonAppsDto:ApplicationSegmentInspectionCommonAppsDto": {
            "properties": {
                "appsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionCommonAppsDtoAppsConfig:ApplicationSegmentInspectionCommonAppsDtoAppsConfig"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentInspectionCommonAppsDtoAppsConfig:ApplicationSegmentInspectionCommonAppsDtoAppsConfig": {
            "properties": {
                "appTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of application as inspection. Supported value: `INSPECT`\n",
                    "willReplaceOnChanges": true
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the Inspection Application Segment.\n",
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the Inspection Application Segment.. Supported values: `HTTP` and `HTTPS`\n",
                    "willReplaceOnChanges": true
                },
                "certificateId": {
                    "type": "string",
                    "description": "ID of the signing certificate. This field is required if the ``application_protocol`` is set to `HTTPS`. The ``certificate_id`` is **NOT** supported if the application_protocol is set to `HTTP`.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n",
                    "willReplaceOnChanges": true
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the Inspection Application Segment.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n",
                    "willReplaceOnChanges": true
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentInspectionServerGroup:ApplicationSegmentInspectionServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentInspectionTcpPortRange:ApplicationSegmentInspectionTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentInspectionUdpPortRange:ApplicationSegmentInspectionUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentPRACommonAppsDto:ApplicationSegmentPRACommonAppsDto": {
            "properties": {
                "appsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRACommonAppsDtoAppsConfig:ApplicationSegmentPRACommonAppsDtoAppsConfig"
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentPRACommonAppsDtoAppsConfig:ApplicationSegmentPRACommonAppsDtoAppsConfig": {
            "properties": {
                "appId": {
                    "type": "string"
                },
                "appTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the type of application as Privileged Remote Access. Supported value: `SECURE_REMOTE_ACCESS`\n",
                    "willReplaceOnChanges": true
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the Privileged Remote Access\n",
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`\n",
                    "willReplaceOnChanges": true
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "Parameter required when `application_protocol` is of type `RDP`\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n",
                    "willReplaceOnChanges": true
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the Privileged Remote Access\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appId"
                    ]
                }
            }
        },
        "zpa:index/ApplicationSegmentPRAServerGroup:ApplicationSegmentPRAServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentPRATcpPortRange:ApplicationSegmentPRATcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentPRAUdpPortRange:ApplicationSegmentPRAUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentServerGroup:ApplicationSegmentServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentTcpPortRange:ApplicationSegmentTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ApplicationSegmentUdpPortRange:ApplicationSegmentUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/BrowserAccessClientlessApp:BrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "description": "If you want ZPA to forward unauthenticated HTTP preflight OPTIONS requests from the browser to the app.. Supported values: `true` and `false`\n"
                },
                "applicationPort": {
                    "type": "string",
                    "description": "Port for the BA app.\n",
                    "willReplaceOnChanges": true
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "Protocol for the BA app. Supported values: `HTTP` and `HTTPS`\n",
                    "willReplaceOnChanges": true
                },
                "certificateId": {
                    "type": "string",
                    "description": "ID of the BA certificate. Refer to the data source documentation for `zpa.BrowserCertificate`\n"
                },
                "cname": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name or IP address of the BA app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "id": {
                    "type": "string"
                },
                "localDomain": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "path": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                }
            },
            "type": "object",
            "required": [
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationPort",
                        "applicationProtocol",
                        "certificateId",
                        "cname",
                        "enabled",
                        "hidden",
                        "id",
                        "name",
                        "trustUntrustedCert"
                    ]
                }
            }
        },
        "zpa:index/BrowserAccessServerGroup:BrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/BrowserAccessTcpPortRange:BrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/BrowserAccessUdpPortRange:BrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/CloudBrowserIsolationExternalProfileSecurityControl:CloudBrowserIsolationExternalProfileSecurityControl": {
            "properties": {
                "allowPrinting": {
                    "type": "boolean"
                },
                "copyPaste": {
                    "type": "string"
                },
                "documentViewer": {
                    "type": "boolean"
                },
                "localRender": {
                    "type": "boolean"
                },
                "restrictKeystrokes": {
                    "type": "boolean"
                },
                "uploadDownload": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowPrinting",
                        "documentViewer",
                        "localRender",
                        "restrictKeystrokes"
                    ]
                }
            }
        },
        "zpa:index/CloudBrowserIsolationExternalProfileUserExperience:CloudBrowserIsolationExternalProfileUserExperience": {
            "properties": {
                "browserInBrowser": {
                    "type": "boolean"
                },
                "sessionPersistence": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "zpa:index/InspectionCustomControlsAssociatedInspectionProfileName:InspectionCustomControlsAssociatedInspectionProfileName": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ids"
                    ]
                }
            }
        },
        "zpa:index/InspectionCustomControlsRule:InspectionCustomControlsRule": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/zpa:index/InspectionCustomControlsRuleConditions:InspectionCustomControlsRuleConditions"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type value for the rules.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "conditions",
                        "names",
                        "type"
                    ]
                }
            }
        },
        "zpa:index/InspectionCustomControlsRuleConditions:InspectionCustomControlsRuleConditions": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "Signifies the key for the object type\n"
                },
                "op": {
                    "type": "string",
                    "description": "Denotes the operation type.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "Denotes the value for the given object type. Its value depends on the key.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lhs",
                        "op",
                        "rhs"
                    ]
                }
            }
        },
        "zpa:index/InspectionProfileControlsInfo:InspectionProfileControlsInfo": {
            "properties": {
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "controlType"
                    ]
                }
            }
        },
        "zpa:index/InspectionProfileCustomControl:InspectionProfileCustomControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the predefined control\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zpa:index/InspectionProfilePredefinedControl:InspectionProfilePredefinedControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n"
                },
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the predefined control\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "The protocol type of the predefined control\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id"
                    ]
                }
            }
        },
        "zpa:index/LSSConfigControllerConfig:LSSConfigControllerConfig": {
            "properties": {
                "auditMessage": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the LSS configuration\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this LSS configuration is enabled or not. Supported values: true, false\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter for the LSS configuration. Format given by the following API to get status codes: /mgmtconfig/v2/admin/lssConfig/statusCodes\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format of the log type. Format given by the following API to get formats: /mgmtconfig/v2/admin/lssConfig/logType/formats\n"
                },
                "id": {
                    "type": "string"
                },
                "lssHost": {
                    "type": "string",
                    "description": "Host of the LSS configuration\n"
                },
                "lssPort": {
                    "type": "string",
                    "description": "Port of the LSS configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the LSS configuration\n"
                },
                "sourceLogType": {
                    "type": "string",
                    "description": "Log type of the LSS configuration\n"
                },
                "useTls": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "format",
                "lssHost",
                "lssPort",
                "name",
                "sourceLogType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "auditMessage",
                        "format",
                        "id",
                        "lssHost",
                        "lssPort",
                        "name",
                        "sourceLogType"
                    ]
                }
            }
        },
        "zpa:index/LSSConfigControllerConnectorGroup:LSSConfigControllerConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/LSSConfigControllerPolicyRuleResource:LSSConfigControllerPolicyRuleResource": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResourceCondition:LSSConfigControllerPolicyRuleResourceCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "id": {
                    "type": "string"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "name",
                        "operator",
                        "policyType",
                        "priority",
                        "ruleOrder",
                        "zpnCbiProfileId",
                        "zpnInspectionProfileId",
                        "zpnIsolationProfileId"
                    ]
                }
            }
        },
        "zpa:index/LSSConfigControllerPolicyRuleResourceCondition:LSSConfigControllerPolicyRuleResourceCondition": {
            "properties": {
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResourceConditionOperand:LSSConfigControllerPolicyRuleResourceConditionOperand"
                    },
                    "description": "This signifies the various policy criteria.\n"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "zpa:index/LSSConfigControllerPolicyRuleResourceConditionOperand:LSSConfigControllerPolicyRuleResourceConditionOperand": {
            "properties": {
                "entryValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue:LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue"
                    }
                },
                "objectType": {
                    "type": "string",
                    "description": "This is for specifying the policy critiera.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "objectType"
            ]
        },
        "zpa:index/LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue:LSSConfigControllerPolicyRuleResourceConditionOperandEntryValue": {
            "properties": {
                "lhs": {
                    "type": "string"
                },
                "rhs": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/MicrotenantUser:MicrotenantUser": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "microtenantId",
                        "password",
                        "username"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessForwardingRuleCondition:PolicyAccessForwardingRuleCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessForwardingRuleConditionOperand:PolicyAccessForwardingRuleConditionOperand"
                    },
                    "description": "This signifies the various policy criteria.\n"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "negated",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessForwardingRuleConditionOperand:PolicyAccessForwardingRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string",
                    "description": "This signifies the key for the object type. String ID example: id\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "name": {
                    "type": "string"
                },
                "objectType": {
                    "type": "string",
                    "description": "This is for specifying the policy critiera.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "microtenantId",
                        "name",
                        "objectType",
                        "rhs",
                        "rhsLists"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessInspectionRuleCondition:PolicyAccessInspectionRuleCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessInspectionRuleConditionOperand:PolicyAccessInspectionRuleConditionOperand"
                    },
                    "description": "This signifies the various policy criteria.\n"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "negated",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessInspectionRuleConditionOperand:PolicyAccessInspectionRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string",
                    "description": "This signifies the key for the object type. String ID example: id\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "name": {
                    "type": "string"
                },
                "objectType": {
                    "type": "string",
                    "description": "This is for specifying the policy critiera.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "microtenantId",
                        "name",
                        "objectType",
                        "rhs",
                        "rhsLists"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessIsolationRuleCondition:PolicyAccessIsolationRuleCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessIsolationRuleConditionOperand:PolicyAccessIsolationRuleConditionOperand"
                    },
                    "description": "This signifies the various policy criteria.\n"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "negated",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessIsolationRuleConditionOperand:PolicyAccessIsolationRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string",
                    "description": "This signifies the key for the object type. String ID example: id\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "name": {
                    "type": "string"
                },
                "objectType": {
                    "type": "string",
                    "description": "This is for specifying the policy critiera.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "microtenantId",
                        "name",
                        "objectType",
                        "rhs",
                        "rhsLists"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessReorderRuleRule:PolicyAccessReorderRuleRule": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Required) - The ID of the rule to which the order number will be applied.\n"
                },
                "order": {
                    "type": "string",
                    "description": "(Required) - The order number that should be applied to the respective rule ID.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "order"
            ]
        },
        "zpa:index/PolicyAccessRuleAppConnectorGroup:PolicyAccessRuleAppConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) The ID of a server group resource\n"
                }
            },
            "type": "object"
        },
        "zpa:index/PolicyAccessRuleAppServerGroup:PolicyAccessRuleAppServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) The ID of a server group resource\n"
                }
            },
            "type": "object"
        },
        "zpa:index/PolicyAccessRuleCondition:PolicyAccessRuleCondition": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Optional) The ID of a server group resource\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "negated": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: ``true`` or ``false``\n"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleConditionOperand:PolicyAccessRuleConditionOperand"
                    },
                    "description": "(Optional) - Operands block must be repeated if multiple per `object_type` conditions are to be added to the rule.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "negated",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessRuleConditionOperand:PolicyAccessRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Optional) The ID of a server group resource\n"
                },
                "idpId": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "lhs": {
                    "type": "string",
                    "description": "(Optional) LHS must always carry the string value ``id`` or the attribute ID of the resource being associated with the rule.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "(Optional) This is for specifying the policy critiera. Supported values: `APP`, `APP_GROUP`, `SAML`, `IDP`, `CLIENT_TYPE`, `TRUSTED_NETWORK`, `POSTURE`, `SCIM`, `SCIM_GROUP`, and `CLOUD_CONNECTOR_GROUP`. `TRUSTED_NETWORK`, `CLIENT_TYPE`, `PLATFORM`, `COUNTRY_CODE`.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "(Optional) RHS is either the ID attribute of a resource or fixed string value. Refer to the chart below for further details.\n"
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "microtenantId",
                        "name",
                        "objectType",
                        "rhs",
                        "rhsLists"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessTimeOutRuleCondition:PolicyAccessTimeOutRuleCondition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessTimeOutRuleConditionOperand:PolicyAccessTimeOutRuleConditionOperand"
                    },
                    "description": "This signifies the various policy criteria.\n"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "microtenantId",
                        "negated",
                        "operator"
                    ]
                }
            }
        },
        "zpa:index/PolicyAccessTimeOutRuleConditionOperand:PolicyAccessTimeOutRuleConditionOperand": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string",
                    "description": "This signifies the key for the object type. String ID example: id\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "name": {
                    "type": "string"
                },
                "objectType": {
                    "type": "string",
                    "description": "This is for specifying the policy critiera.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "This denotes the value for the given object type. Its value depends upon the key.\n"
                },
                "rhsLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This denotes a list of values for the given object type. The value depend upon the key. If rhs is defined this list will be ignored\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "objectType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "idpId",
                        "lhs",
                        "microtenantId",
                        "name",
                        "objectType",
                        "rhs",
                        "rhsLists"
                    ]
                }
            }
        },
        "zpa:index/SegmentGroupApplication:SegmentGroupApplication": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/ServerGroupAppConnectorGroup:ServerGroupAppConnectorGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ServerGroupApplication:ServerGroupApplication": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ServerGroupServer:ServerGroupServer": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/ServiceEdgeGroupServiceEdge:ServiceEdgeGroupServiceEdge": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ids"
                    ]
                }
            }
        },
        "zpa:index/ServiceEdgeGroupTrustedNetwork:ServiceEdgeGroupTrustedNetwork": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "zpa:index/getAppConnectorGroupConnector:getAppConnectorGroupConnector": {
            "properties": {
                "appconnectorGroupId": {
                    "type": "string"
                },
                "appconnectorGroupName": {
                    "type": "string"
                },
                "applicationStartTime": {
                    "type": "string"
                },
                "controlChannelStatus": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string"
                },
                "ctrlBrokerName": {
                    "type": "string"
                },
                "currentVersion": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(String) Description of the App Connector Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "enrollmentCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "expectedUpgradeTime": {
                    "type": "string"
                },
                "expectedVersion": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the App Connector Group.\n"
                },
                "ipacl": {
                    "type": "string"
                },
                "issuedCertId": {
                    "type": "string"
                },
                "lastBrokerConnectTime": {
                    "type": "string"
                },
                "lastBrokerConnectTimeDuration": {
                    "type": "string"
                },
                "lastBrokerDisconnectTime": {
                    "type": "string"
                },
                "lastBrokerDisconnectTimeDuration": {
                    "type": "string"
                },
                "lastUpgradeTime": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string",
                    "description": "(String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "(String) Location of the App Connector Group.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "(String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                },
                "platform": {
                    "type": "string"
                },
                "previousVersion": {
                    "type": "string"
                },
                "privateIp": {
                    "type": "string"
                },
                "provisioningKeyId": {
                    "type": "string"
                },
                "provisioningKeyName": {
                    "type": "string"
                },
                "publicIp": {
                    "type": "string"
                },
                "sargeVersion": {
                    "type": "string"
                },
                "upgradeAttempt": {
                    "type": "string"
                },
                "upgradeStatus": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appconnectorGroupId",
                "appconnectorGroupName",
                "applicationStartTime",
                "controlChannelStatus",
                "creationTime",
                "ctrlBrokerName",
                "currentVersion",
                "description",
                "enabled",
                "enrollmentCert",
                "expectedUpgradeTime",
                "expectedVersion",
                "fingerprint",
                "id",
                "ipacl",
                "issuedCertId",
                "lastBrokerConnectTime",
                "lastBrokerConnectTimeDuration",
                "lastBrokerDisconnectTime",
                "lastBrokerDisconnectTimeDuration",
                "lastUpgradeTime",
                "latitude",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "platform",
                "previousVersion",
                "privateIp",
                "provisioningKeyId",
                "provisioningKeyName",
                "publicIp",
                "sargeVersion",
                "upgradeAttempt",
                "upgradeStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getAppConnectorGroupServerGroup:getAppConnectorGroupServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(String) Description of the App Connector Group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the App Connector Group.\n"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentBrowserAccessClientlessApp:getApplicationSegmentBrowserAccessClientlessApp": {
            "properties": {
                "allowOptions": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "appId": {
                    "type": "string"
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "certificateName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "cname": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "domain": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the application server.\n"
                },
                "localDomain": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server.\n"
                },
                "path": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "trustUntrustedCert": {
                    "type": "boolean",
                    "description": "(bool)\n"
                }
            },
            "type": "object",
            "required": [
                "allowOptions",
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "cname",
                "description",
                "domain",
                "enabled",
                "hidden",
                "id",
                "localDomain",
                "name",
                "path",
                "trustUntrustedCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentBrowserAccessServerGroup:getApplicationSegmentBrowserAccessServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This field defines the id of the application server.\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentBrowserAccessTcpPortRange:getApplicationSegmentBrowserAccessTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentBrowserAccessUdpPortRange:getApplicationSegmentBrowserAccessUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentInspectionInspectionApp:getApplicationSegmentInspectionInspectionApp": {
            "properties": {
                "appId": {
                    "type": "string"
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string) TCP/UDP Port for ZPA Inspection.\n"
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string) Protocol for the Inspection Application. Supported values: `HTTP` and `HTTPS`\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "(string) - ID of the signing certificate. This field is required if the applicationProtocol is set to `HTTPS`. The certificateId is not supported if the applicationProtocol is set to `HTTP`.\n"
                },
                "certificateName": {
                    "type": "string",
                    "description": "(string) - Parameter required when `application_protocol` is of type `HTTPS`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the application.\n"
                },
                "domain": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this application is enabled or not\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Inspection Application Segment to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Inspection Application Segment to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "description",
                "domain",
                "enabled",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentInspectionServerGroup:getApplicationSegmentInspectionServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the Inspection Application Segment to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentInspectionTcpPortRange:getApplicationSegmentInspectionTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentInspectionUdpPortRange:getApplicationSegmentInspectionUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentPRAServerGroup:getApplicationSegmentPRAServerGroup": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentPRASraApp:getApplicationSegmentPRASraApp": {
            "properties": {
                "appId": {
                    "type": "string"
                },
                "applicationPort": {
                    "type": "string",
                    "description": "(string) Port for the Privileged Remote Accessvalues: `RDP` and `SSH`\n"
                },
                "applicationProtocol": {
                    "type": "string",
                    "description": "(string) Protocol for the Privileged Remote Access. Supported values: `RDP` and `SSH`\n"
                },
                "certificateId": {
                    "type": "string"
                },
                "certificateName": {
                    "type": "string"
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "(string) - Parameter required when `application_protocol` is of type `RDP`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the application.\n"
                },
                "domain": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this application is enabled or not\n"
                },
                "hidden": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                },
                "microtenantName": {
                    "type": "string",
                    "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PRA Application Segment to be exported.\n"
                },
                "portal": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "appId",
                "applicationPort",
                "applicationProtocol",
                "certificateId",
                "certificateName",
                "connectionSecurity",
                "description",
                "domain",
                "enabled",
                "hidden",
                "id",
                "microtenantId",
                "microtenantName",
                "name",
                "portal"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentPRATcpPortRange:getApplicationSegmentPRATcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentPRAUdpPortRange:getApplicationSegmentPRAUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentServerGroup:getApplicationSegmentServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "description": "Supported values: `DEFAULT`, `SIEM`.\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the application.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not. Default: false. Supported values: `true`, `false`.\n"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getApplicationSegmentTcpPortRange:getApplicationSegmentTcpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getApplicationSegmentUdpPortRange:getApplicationSegmentUdpPortRange": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "zpa:index/getCloudBrowserIsolationExternalProfileRegion:getCloudBrowserIsolationExternalProfileRegion": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CBI banner to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getCloudBrowserIsolationExternalProfileSecurityControl:getCloudBrowserIsolationExternalProfileSecurityControl": {
            "properties": {
                "allowPrinting": {
                    "type": "boolean"
                },
                "copyPaste": {
                    "type": "string"
                },
                "documentViewer": {
                    "type": "boolean"
                },
                "localRender": {
                    "type": "boolean"
                },
                "restrictKeystrokes": {
                    "type": "boolean"
                },
                "uploadDownload": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "allowPrinting",
                "copyPaste",
                "documentViewer",
                "localRender",
                "restrictKeystrokes",
                "uploadDownload"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getCloudBrowserIsolationExternalProfileUserExperience:getCloudBrowserIsolationExternalProfileUserExperience": {
            "properties": {
                "browserInBrowser": {
                    "type": "boolean"
                },
                "sessionPersistence": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "browserInBrowser",
                "sessionPersistence"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getCloudConnectorGroupCloudConnector:getCloudConnectorGroupCloudConnector": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the cloud connector group.\n"
                },
                "ipacls": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the cloud connector group.\n"
                },
                "signingCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "enabled",
                "fingerprint",
                "id",
                "ipacls",
                "issuedCertId",
                "modifiedTime",
                "modifiedby",
                "name",
                "signingCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getCustomerVersionProfileCustomScopeCustomerId:getCustomerVersionProfileCustomScopeCustomerId": {
            "properties": {
                "customerId": {
                    "type": "string"
                },
                "excludeConstellation": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the enrollment certificate to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "customerId",
                "excludeConstellation",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getCustomerVersionProfileVersion:getCustomerVersionProfileVersion": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "customerId": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The id of the enrollment certificate to be exported.\n"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "platform": {
                    "type": "string"
                },
                "restartAfterUptimeInDays": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "versionProfileGid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "customerId",
                "id",
                "modifiedBy",
                "modifiedTime",
                "platform",
                "restartAfterUptimeInDays",
                "role",
                "version",
                "versionProfileGid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getIdPControllerAdminMetadata:getIdPControllerAdminMetadata": {
            "properties": {
                "certificateUrl": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spBaseUrl": {
                    "type": "string"
                },
                "spEntityId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spMetadataUrl": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spPostUrl": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "certificateUrl",
                "spBaseUrl",
                "spEntityId",
                "spMetadataUrl",
                "spPostUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getIdPControllerUserMetadata:getIdPControllerUserMetadata": {
            "properties": {
                "certificateUrl": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spBaseUrl": {
                    "type": "string"
                },
                "spEntityId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spMetadataUrl": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "spPostUrl": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "certificateUrl",
                "spBaseUrl",
                "spEntityId",
                "spMetadataUrl",
                "spPostUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionAllPredefinedControlsList:getInspectionAllPredefinedControlsList": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionAllPredefinedControlsListAssociatedInspectionProfileName:getInspectionAllPredefinedControlsListAssociatedInspectionProfileName"
                    },
                    "description": "(string)\n"
                },
                "attachment": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "controlGroup": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "controlNumber": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "controlType": {
                    "type": "string",
                    "description": "(string) Returned values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `ZSCALER`, `CUSTOM`, `PREDEFINED`\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "defaultAction": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "protocolType": {
                    "type": "string",
                    "description": "(string) Returned values: `HTTP`, `HTTPS`, `FTP`, `RDP`, `SSH`, `WEBSOCKET`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "attachment",
                "controlGroup",
                "controlNumber",
                "controlType",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedTime",
                "modifiedby",
                "name",
                "paranoiaLevel",
                "protocolType",
                "severity",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionAllPredefinedControlsListAssociatedInspectionProfileName:getInspectionAllPredefinedControlsListAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionCustomControlsRule:getInspectionCustomControlsRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionCustomControlsRuleCondition:getInspectionCustomControlsRuleCondition"
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Name of the rules. If rules.type is set to REQUEST_HEADERS, REQUEST_COOKIES, or RESPONSE_HEADERS, the rules.name field is required.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "names",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionCustomControlsRuleCondition:getInspectionCustomControlsRuleCondition": {
            "properties": {
                "lhs": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "rhs": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionPredefinedControlsAssociatedInspectionProfileName:getInspectionPredefinedControlsAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Computed)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the predefined control.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileControlsInfo:getInspectionProfileControlsInfo": {
            "properties": {
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`\n"
                },
                "count": {
                    "type": "string",
                    "description": "(string) Control information counts `Long`\n"
                }
            },
            "type": "object",
            "required": [
                "controlType",
                "count"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileCustomControl:getInspectionProfileCustomControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionProfileCustomControlAssociatedInspectionProfileName:getInspectionProfileCustomControlAssociatedInspectionProfileName"
                    },
                    "description": "(string) Name of the inspection profile\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "(string) Custom controls string in JSON format\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "defaultAction": {
                    "type": "string"
                },
                "defaultActionValue": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the inspection profile.\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionProfileCustomControlRule:getInspectionProfileCustomControlRule"
                    },
                    "description": "(string) Rules of the custom controls applied as conditions `JSON`\n"
                },
                "severity": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type value for the rules\n"
                },
                "version": {
                    "type": "string",
                    "description": "(string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "controlNumber",
                "controlRuleJson",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name",
                "paranoiaLevel",
                "rules",
                "severity",
                "type",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileCustomControlAssociatedInspectionProfileName:getInspectionProfileCustomControlAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileCustomControlRule:getInspectionProfileCustomControlRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionProfileCustomControlRuleCondition:getInspectionProfileCustomControlRuleCondition"
                    },
                    "description": "(string)\n"
                },
                "names": {
                    "type": "string",
                    "description": "(string) Name of the rules. If rules.type is set to `REQUEST_HEADERS`, `REQUEST_COOKIES`, or `RESPONSE_HEADERS`, the rules.name field is required.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type value for the rules\n"
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "names",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileCustomControlRuleCondition:getInspectionProfileCustomControlRuleCondition": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "(string) Signifies the key for the object type Supported values: `SIZE`, `VALUE`\n"
                },
                "op": {
                    "type": "string",
                    "description": "(string) If lhs is set to SIZE, then the user may pass one of the following: `EQ: Equals`, `LE: Less than or equal to`, `GE: Greater than or equal to`. If the lhs is set to `VALUE`, then the user may pass one of the following: `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `RX`.\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "(string) Denotes the value for the given object type. Its value depends on the key. If rules.type is set to REQUEST_METHOD, the conditions.rhs field must have one of the following values: `GET`,`HEAD`, `POST`, `OPTIONS`, `PUT`, `DELETE`, `TRACE`\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfilePredefinedControl:getInspectionProfilePredefinedControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionProfilePredefinedControlAssociatedInspectionProfileName:getInspectionProfilePredefinedControlAssociatedInspectionProfileName"
                    },
                    "description": "(string) Name of the inspection profile\n"
                },
                "attachment": {
                    "type": "string",
                    "description": "(string) Control attachment\n"
                },
                "controlGroup": {
                    "type": "string",
                    "description": "(string) Control group\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "defaultAction": {
                    "type": "string"
                },
                "defaultActionValue": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the inspection profile.\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "severity": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "(string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "attachment",
                "controlGroup",
                "controlNumber",
                "controlType",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name",
                "paranoiaLevel",
                "severity",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfilePredefinedControlAssociatedInspectionProfileName:getInspectionProfilePredefinedControlAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileWebSocketControl:getInspectionProfileWebSocketControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(string) The action of the predefined control. Supported values: `PASS`, `BLOCK` and `REDIRECT`\n"
                },
                "actionValue": {
                    "type": "string",
                    "description": "(string) Value for the predefined controls action. This field is only required if the action is set to REDIRECT. This field is only required if the action is set to `REDIRECT`.\n"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getInspectionProfileWebSocketControlAssociatedInspectionProfileName:getInspectionProfileWebSocketControlAssociatedInspectionProfileName"
                    },
                    "description": "(string) Name of the inspection profile\n"
                },
                "attachment": {
                    "type": "string",
                    "description": "(string) Control attachment\n"
                },
                "controlGroup": {
                    "type": "string",
                    "description": "(string) Control group\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlType": {
                    "type": "string",
                    "description": "(string) Control types. Supported Values: `WEBSOCKET_PREDEFINED`, `WEBSOCKET_CUSTOM`, `CUSTOM`, `PREDEFINED`, `ZSCALER`\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "defaultAction": {
                    "type": "string"
                },
                "defaultActionValue": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the inspection profile.\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "protocolType": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "description": "(string) The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "attachment",
                "controlGroup",
                "controlNumber",
                "controlType",
                "creationTime",
                "defaultAction",
                "defaultActionValue",
                "description",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name",
                "paranoiaLevel",
                "protocolType",
                "severity",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getInspectionProfileWebSocketControlAssociatedInspectionProfileName:getInspectionProfileWebSocketControlAssociatedInspectionProfileName": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the id of the inspection profile.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the inspection profile.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getLSSConfigControllerConfig:getLSSConfigControllerConfig": {
            "properties": {
                "auditMessage": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                },
                "format": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "lssHost": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lssPort": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "sourceLogType": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "useTls": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "auditMessage",
                "description",
                "enabled",
                "filters",
                "format",
                "id",
                "lssHost",
                "lssPort",
                "name",
                "sourceLogType",
                "useTls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getLSSConfigControllerConnectorGroup:getLSSConfigControllerConnectorGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getLSSConfigControllerPolicyRule:getLSSConfigControllerPolicyRule": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "actionId": {
                    "type": "string"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getLSSConfigControllerPolicyRuleCondition:getLSSConfigControllerPolicyRuleCondition"
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "customMsg": {
                    "type": "string"
                },
                "defaultRule": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "isolationDefaultRule": {
                    "type": "boolean"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionId",
                "bypassDefaultRule",
                "conditions",
                "creationTime",
                "customMsg",
                "defaultRule",
                "description",
                "id",
                "isolationDefaultRule",
                "lssDefaultRule",
                "modifiedTime",
                "modifiedby",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "reauthDefaultRule",
                "reauthIdleTimeout",
                "reauthTimeout",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnInspectionProfileName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getLSSConfigControllerPolicyRuleCondition:getLSSConfigControllerPolicyRuleCondition": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getLSSConfigControllerPolicyRuleConditionOperand:getLSSConfigControllerPolicyRuleConditionOperand"
                    }
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "modifiedTime",
                "modifiedby",
                "negated",
                "operands",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getLSSConfigControllerPolicyRuleConditionOperand:getLSSConfigControllerPolicyRuleConditionOperand": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the log streaming resource.\n"
                },
                "objectType": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "rhs": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "idpId",
                "lhs",
                "modifiedTime",
                "modifiedby",
                "name",
                "objectType",
                "operator",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getMachineGroupMachine:getMachineGroupMachine": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the machine group to be exported.\n"
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "machineGroupId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "machineGroupName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "machineTokenId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                },
                "microtenantName": {
                    "type": "string",
                    "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the machine group to be exported.\n"
                },
                "signingCert": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "fingerprint",
                "id",
                "issuedCertId",
                "machineGroupId",
                "machineGroupName",
                "machineTokenId",
                "modifiedBy",
                "modifiedTime",
                "name",
                "signingCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getMicrotenantRole:getMicrotenantRole": {
            "properties": {
                "customRole": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the microtenant controller.\n"
                }
            },
            "type": "object",
            "required": [
                "customRole",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getMicrotenantUser:getMicrotenantUser": {
            "properties": {
                "comments": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the microtenant controller.\n"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this microtenant resource is enabled or not.\n"
                },
                "eula": {
                    "type": "string"
                },
                "forcePwdChange": {
                    "type": "boolean"
                },
                "groupIds": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isEnabled": {
                    "type": "boolean"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "languageCode": {
                    "type": "string"
                },
                "localLoginDisabled": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "microtenantName": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "integer"
                },
                "modifiedby": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the microtenant controller.\n"
                },
                "password": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "boolean"
                },
                "pinSession": {
                    "type": "string"
                },
                "roleId": {
                    "type": "boolean"
                },
                "timezone": {
                    "type": "string"
                },
                "tmpPassword": {
                    "type": "string"
                },
                "tokenId": {
                    "type": "string"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean"
                },
                "twoFactorAuthType": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "creationTime",
                "customerId",
                "description",
                "displayName",
                "email",
                "enabled",
                "eula",
                "forcePwdChange",
                "groupIds",
                "id",
                "isEnabled",
                "isLocked",
                "languageCode",
                "localLoginDisabled",
                "microtenantId",
                "microtenantName",
                "modifiedTime",
                "modifiedby",
                "name",
                "password",
                "phoneNumber",
                "pinSession",
                "roleId",
                "timezone",
                "tmpPassword",
                "tokenId",
                "twoFactorAuthEnabled",
                "twoFactorAuthType",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getPolicyTypeRule:getPolicyTypeRule": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "actionId": {
                    "type": "string"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getPolicyTypeRuleCondition:getPolicyTypeRuleCondition"
                    }
                },
                "creationTime": {
                    "type": "string"
                },
                "customMsg": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isolationDefaultRule": {
                    "type": "boolean"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string",
                    "description": "The ID of the global policy set.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The value for differentiating the policy types.\n"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "actionId",
                "bypassDefaultRule",
                "conditions",
                "creationTime",
                "customMsg",
                "description",
                "id",
                "isolationDefaultRule",
                "modifiedBy",
                "modifiedTime",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "reauthDefaultRule",
                "reauthIdleTimeout",
                "reauthTimeout",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getPolicyTypeRuleCondition:getPolicyTypeRuleCondition": {
            "properties": {
                "creationTime": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "negated": {
                    "type": "boolean"
                },
                "operands": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getPolicyTypeRuleConditionOperand:getPolicyTypeRuleConditionOperand"
                    }
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "modifiedBy",
                "modifiedTime",
                "negated",
                "operands",
                "operator"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getPolicyTypeRuleConditionOperand:getPolicyTypeRuleConditionOperand": {
            "properties": {
                "creationTime": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idpId": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectType": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "rhs": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "id",
                "idpId",
                "lhs",
                "modifiedBy",
                "modifiedTime",
                "name",
                "objectType",
                "operator",
                "rhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getSegmentGroupApplication:getSegmentGroupApplication": {
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "defaultIdleTimeout": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "defaultMaxAge": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the segment group to be exported.\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "logFeatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the segment group to be exported.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getSegmentGroupApplicationServerGroup:getSegmentGroupApplicationServerGroup"
                    },
                    "description": "(Computed)\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                },
                "tcpPortsIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                },
                "tcpPortsOuts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "bypassType",
                "configSpace",
                "creationTime",
                "defaultIdleTimeout",
                "defaultMaxAge",
                "description",
                "domainName",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "healthCheckType",
                "id",
                "ipAnchored",
                "logFeatures",
                "modifiedBy",
                "modifiedTime",
                "name",
                "passiveHealthEnabled",
                "serverGroups",
                "tcpPortRanges",
                "tcpPortsIns",
                "tcpPortsOuts",
                "udpPortRanges"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getSegmentGroupApplicationServerGroup:getSegmentGroupApplicationServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the segment group to be exported.\n"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the segment group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedBy",
                "modifiedTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServerGroupAppConnectorGroup:getServerGroupAppConnectorGroup": {
            "properties": {
                "cityCountry": {
                    "type": "string"
                },
                "connectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getServerGroupAppConnectorGroupConnector:getServerGroupAppConnectorGroupConnector"
                    }
                },
                "countryCode": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n"
                },
                "dnsQueryType": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                },
                "geolocationId": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n"
                },
                "latitude": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getServerGroupAppConnectorGroupServerGroup:getServerGroupAppConnectorGroupServerGroup"
                    }
                },
                "siemAppConnectorGroup": {
                    "type": "boolean"
                },
                "upgradeDay": {
                    "type": "string"
                },
                "upgradeTimeInSecs": {
                    "type": "string"
                },
                "versionProfileId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cityCountry",
                "connectors",
                "countryCode",
                "creationTime",
                "description",
                "dnsQueryType",
                "enabled",
                "geolocationId",
                "id",
                "latitude",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "serverGroups",
                "siemAppConnectorGroup",
                "upgradeDay",
                "upgradeTimeInSecs",
                "versionProfileId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServerGroupAppConnectorGroupConnector:getServerGroupAppConnectorGroupConnector": {
            "properties": {
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n"
                },
                "issuedCertId": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n"
                },
                "upgradeAttempt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "enabled",
                "fingerprint",
                "id",
                "issuedCertId",
                "modifiedTime",
                "modifiedby",
                "upgradeAttempt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServerGroupAppConnectorGroupServerGroup:getServerGroupAppConnectorGroupServerGroup": {
            "properties": {
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(bool) This field controls dynamic discovery of the servers.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "configSpace",
                "creationTime",
                "description",
                "dynamicDiscovery",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServerGroupApplication:getServerGroupApplication": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServerGroupServer:getServerGroupServer": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "creationTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(string) This field is the description of the server group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the server group to be exported.\n"
                },
                "modifiedTime": {
                    "type": "string"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the server group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "appServerGroupIds",
                "configSpace",
                "creationTime",
                "description",
                "enabled",
                "id",
                "modifiedTime",
                "modifiedby",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServiceEdgeControllerZpnSubModuleUpgradeList:getServiceEdgeControllerZpnSubModuleUpgradeList": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "currentVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "entityGid": {
                    "type": "string"
                },
                "expectedVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge controllerto be exported.\n"
                },
                "modifiedBy": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "role": {
                    "type": "string"
                },
                "upgradeStatus": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "upgradeTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "currentVersion",
                "entityGid",
                "expectedVersion",
                "id",
                "modifiedBy",
                "modifiedTime",
                "role",
                "upgradeStatus",
                "upgradeTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServiceEdgeGroupServiceEdge:getServiceEdgeGroupServiceEdge": {
            "properties": {
                "applicationStartTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "controlChannelStatus": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "ctrlBrokerName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "currentVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) Description of the Service Edge Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "enrollmentCert": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(string)\n"
                },
                "expectedUpgradeTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "expectedVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge group to be exported.\n"
                },
                "ipacl": {
                    "type": "string"
                },
                "issuedCertId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lastBrokerConnectTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lastBrokerConnectTimeDuration": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lastBrokerDisconnectTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lastBrokerDisconnectTimeDuration": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lastUpgradeTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "listenIps": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "location": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service edge group to be exported.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "previousVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "privateIp": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "provisioningKeyId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "provisioningKeyName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "publishIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(string)\n"
                },
                "sargeVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "serviceEdgeGroupId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "serviceEdgeGroupName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "upgradeAttempt": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "upgradeStatus": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "zpnSubModuleUpgradeLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/getServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList:getServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList"
                    }
                }
            },
            "type": "object",
            "required": [
                "applicationStartTime",
                "controlChannelStatus",
                "creationTime",
                "ctrlBrokerName",
                "currentVersion",
                "description",
                "enabled",
                "enrollmentCert",
                "expectedUpgradeTime",
                "expectedVersion",
                "fingerprint",
                "id",
                "ipacl",
                "issuedCertId",
                "lastBrokerConnectTime",
                "lastBrokerConnectTimeDuration",
                "lastBrokerDisconnectTime",
                "lastBrokerDisconnectTimeDuration",
                "lastUpgradeTime",
                "latitude",
                "listenIps",
                "location",
                "longitude",
                "modifiedTime",
                "modifiedby",
                "name",
                "platform",
                "previousVersion",
                "privateIp",
                "provisioningKeyId",
                "provisioningKeyName",
                "publicIp",
                "publishIps",
                "sargeVersion",
                "serviceEdgeGroupId",
                "serviceEdgeGroupName",
                "upgradeAttempt",
                "upgradeStatus",
                "zpnSubModuleUpgradeLists"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList:getServiceEdgeGroupServiceEdgeZpnSubModuleUpgradeList": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "currentVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "entityGid": {
                    "type": "string"
                },
                "expectedVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge group to be exported.\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "upgradeStatus": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "upgradeTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "currentVersion",
                "entityGid",
                "expectedVersion",
                "id",
                "modifiedTime",
                "modifiedby",
                "role",
                "upgradeStatus",
                "upgradeTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zpa:index/getServiceEdgeGroupTrustedNetwork:getServiceEdgeGroupTrustedNetwork": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "domain": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the service edge group to be exported.\n"
                },
                "masterCustomerId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedTime": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "modifiedby": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service edge group to be exported.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "zscalerCloud": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "domain",
                "id",
                "masterCustomerId",
                "modifiedTime",
                "modifiedby",
                "name",
                "networkId",
                "zscalerCloud"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the zpa package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n"
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2\n"
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "secret": true
            }
        },
        "inputProperties": {
            "zpaClientId": {
                "type": "string",
                "description": "zpa client id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_ID"
                    ]
                }
            },
            "zpaClientSecret": {
                "type": "string",
                "description": "zpa client secret\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLIENT_SECRET"
                    ]
                },
                "secret": true
            },
            "zpaCloud": {
                "type": "string",
                "description": "Cloud to use PRODUCTION, BETA, GOV, GOVUS, PREVIEW, DEV, QA, QA2\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CLOUD"
                    ]
                }
            },
            "zpaCustomerId": {
                "type": "string",
                "description": "zpa customer id\n",
                "defaultInfo": {
                    "environment": [
                        "ZPA_CUSTOMER_ID"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "zpa:index/applicationSegment:ApplicationSegment": {
            "description": "\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nApplication Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n$ pulumi import zpa:index/applicationSegment:ApplicationSegment example \u003capplication_segment_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/applicationSegment:ApplicationSegment example \u003capplication_segment_name\u003e\n```\n\n",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Supported values: `ALWAYS`, `NEVER`, `ON_NET`.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Supported values: `DEFAULT`, `SIEM`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this application is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Supported values: `DEFAULT`, `NONE`.\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional) Supported values: `NONE`, `PING_TRACEROUTING`, `PING`.\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the App Connector Group to be exported.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentServerGroup:ApplicationSegmentServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentTcpPortRange:ApplicationSegmentTcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentUdpPortRange:ApplicationSegmentUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "required": [
                "bypassType",
                "domainNames",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpKeepAlive",
                "tcpPortRange",
                "tcpPortRanges",
                "udpPortRange",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Supported values: `ALWAYS`, `NEVER`, `ON_NET`.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Supported values: `DEFAULT`, `SIEM`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this application is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Supported values: `DEFAULT`, `NONE`.\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional) Supported values: `NONE`, `PING_TRACEROUTING`, `PING`.\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the App Connector Group to be exported.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentServerGroup:ApplicationSegmentServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentTcpPortRange:ApplicationSegmentTcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentUdpPortRange:ApplicationSegmentUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "requiredInputs": [
                "domainNames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSegment resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Supported values: `ALWAYS`, `NEVER`, `ON_NET`.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional) Supported values: `DEFAULT`, `SIEM`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) Whether this application is enabled or not.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional) Supported values: `DEFAULT`, `NONE`.\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional) Supported values: `NONE`, `PING_TRACEROUTING`, `PING`.\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the App Connector Group to be exported.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentServerGroup:ApplicationSegmentServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpKeepAlive": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentTcpPortRange:ApplicationSegmentTcpPortRange"
                        },
                        "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentUdpPortRange:ApplicationSegmentUdpPortRange"
                        },
                        "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst testCert = zpa.getBaCertificate({\n    name: \"sales.acme.com\",\n});\n// ZPA Segment Group resource\nconst exampleSegmentGroup = new zpa.SegmentGroup(\"exampleSegmentGroup\", {\n    description: \"Example\",\n    enabled: true,\n});\nconst exampleAppConnectorGroup = zpa.getAppConnectorGroup({\n    name: \"AWS-Connector\",\n});\n// ZPA Server Group resource\nconst exampleServerGroup = new zpa.ServerGroup(\"exampleServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: true,\n    appConnectorGroups: [{\n        ids: [exampleAppConnectorGroup.then(exampleAppConnectorGroup =\u003e exampleAppConnectorGroup.id)],\n    }],\n});\n// Create Browser Access Application\nconst browserAccessApps = new zpa.ApplicationSegmentBrowserAccess(\"browserAccessApps\", {\n    description: \"Browser Access Apps\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    tcpPortRanges: [\n        \"80\",\n        \"80\",\n    ],\n    domainNames: [\"sales.acme.com\"],\n    segmentGroupId: exampleSegmentGroup.id,\n    clientlessApps: [{\n        name: \"sales.acme.com\",\n        applicationProtocol: \"HTTP\",\n        applicationPort: \"80\",\n        certificateId: testCert.then(testCert =\u003e testCert.id),\n        trustUntrustedCert: true,\n        enabled: true,\n        domain: \"sales.acme.com\",\n    }],\n    serverGroups: [{\n        ids: [exampleServerGroup.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\ntest_cert = zpa.get_ba_certificate(name=\"sales.acme.com\")\n# ZPA Segment Group resource\nexample_segment_group = zpa.SegmentGroup(\"exampleSegmentGroup\",\n    description=\"Example\",\n    enabled=True)\nexample_app_connector_group = zpa.get_app_connector_group(name=\"AWS-Connector\")\n# ZPA Server Group resource\nexample_server_group = zpa.ServerGroup(\"exampleServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=True,\n    app_connector_groups=[zpa.ServerGroupAppConnectorGroupArgs(\n        ids=[example_app_connector_group.id],\n    )])\n# Create Browser Access Application\nbrowser_access_apps = zpa.ApplicationSegmentBrowserAccess(\"browserAccessApps\",\n    description=\"Browser Access Apps\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    tcp_port_ranges=[\n        \"80\",\n        \"80\",\n    ],\n    domain_names=[\"sales.acme.com\"],\n    segment_group_id=example_segment_group.id,\n    clientless_apps=[zpa.ApplicationSegmentBrowserAccessClientlessAppArgs(\n        name=\"sales.acme.com\",\n        application_protocol=\"HTTP\",\n        application_port=\"80\",\n        certificate_id=test_cert.id,\n        trust_untrusted_cert=True,\n        enabled=True,\n        domain=\"sales.acme.com\",\n    )],\n    server_groups=[zpa.ApplicationSegmentBrowserAccessServerGroupArgs(\n        ids=[example_server_group.id],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testCert = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Name = \"sales.acme.com\",\n    });\n\n    // ZPA Segment Group resource\n    var exampleSegmentGroup = new Zpa.SegmentGroup(\"exampleSegmentGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n    });\n\n    var exampleAppConnectorGroup = Zpa.GetAppConnectorGroup.Invoke(new()\n    {\n        Name = \"AWS-Connector\",\n    });\n\n    // ZPA Server Group resource\n    var exampleServerGroup = new Zpa.ServerGroup(\"exampleServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = true,\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleAppConnectorGroup.Apply(getAppConnectorGroupResult =\u003e getAppConnectorGroupResult.Id),\n                },\n            },\n        },\n    });\n\n    // Create Browser Access Application\n    var browserAccessApps = new Zpa.ApplicationSegmentBrowserAccess(\"browserAccessApps\", new()\n    {\n        Description = \"Browser Access Apps\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        TcpPortRanges = new[]\n        {\n            \"80\",\n            \"80\",\n        },\n        DomainNames = new[]\n        {\n            \"sales.acme.com\",\n        },\n        SegmentGroupId = exampleSegmentGroup.Id,\n        ClientlessApps = new[]\n        {\n            new Zpa.Inputs.ApplicationSegmentBrowserAccessClientlessAppArgs\n            {\n                Name = \"sales.acme.com\",\n                ApplicationProtocol = \"HTTP\",\n                ApplicationPort = \"80\",\n                CertificateId = testCert.Apply(getBaCertificateResult =\u003e getBaCertificateResult.Id),\n                TrustUntrustedCert = true,\n                Enabled = true,\n                Domain = \"sales.acme.com\",\n            },\n        },\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ApplicationSegmentBrowserAccessServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleServerGroup.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestCert, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"sales.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZPA Segment Group resource\n\t\texampleSegmentGroup, err := zpa.NewSegmentGroup(ctx, \"exampleSegmentGroup\", \u0026zpa.SegmentGroupArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAppConnectorGroup, err := zpa.GetAppConnectorGroup(ctx, \u0026zpa.GetAppConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZPA Server Group resource\n\t\texampleServerGroup, err := zpa.NewServerGroup(ctx, \"exampleServerGroup\", \u0026zpa.ServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(true),\n\t\t\tAppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(exampleAppConnectorGroup.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create Browser Access Application\n\t\t_, err = zpa.NewApplicationSegmentBrowserAccess(ctx, \"browserAccessApps\", \u0026zpa.ApplicationSegmentBrowserAccessArgs{\n\t\t\tDescription:     pulumi.String(\"Browser Access Apps\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sales.acme.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: exampleSegmentGroup.ID(),\n\t\t\tClientlessApps: zpa.ApplicationSegmentBrowserAccessClientlessAppArray{\n\t\t\t\t\u0026zpa.ApplicationSegmentBrowserAccessClientlessAppArgs{\n\t\t\t\t\tName:                pulumi.String(\"sales.acme.com\"),\n\t\t\t\t\tApplicationProtocol: pulumi.String(\"HTTP\"),\n\t\t\t\t\tApplicationPort:     pulumi.String(\"80\"),\n\t\t\t\t\tCertificateId:       pulumi.String(testCert.Id),\n\t\t\t\t\tTrustUntrustedCert:  pulumi.Bool(true),\n\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\tDomain:              pulumi.String(\"sales.acme.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServerGroups: zpa.ApplicationSegmentBrowserAccessServerGroupArray{\n\t\t\t\t\u0026zpa.ApplicationSegmentBrowserAccessServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleServerGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport com.pulumi.zpa.SegmentGroup;\nimport com.pulumi.zpa.SegmentGroupArgs;\nimport com.pulumi.zpa.inputs.GetAppConnectorGroupArgs;\nimport com.pulumi.zpa.ServerGroup;\nimport com.pulumi.zpa.ServerGroupArgs;\nimport com.pulumi.zpa.inputs.ServerGroupAppConnectorGroupArgs;\nimport com.pulumi.zpa.ApplicationSegmentBrowserAccess;\nimport com.pulumi.zpa.ApplicationSegmentBrowserAccessArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentBrowserAccessClientlessAppArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentBrowserAccessServerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testCert = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .name(\"sales.acme.com\")\n            .build());\n\n        var exampleSegmentGroup = new SegmentGroup(\"exampleSegmentGroup\", SegmentGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .build());\n\n        final var exampleAppConnectorGroup = ZpaFunctions.getAppConnectorGroup(GetAppConnectorGroupArgs.builder()\n            .name(\"AWS-Connector\")\n            .build());\n\n        var exampleServerGroup = new ServerGroup(\"exampleServerGroup\", ServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(true)\n            .appConnectorGroups(ServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleAppConnectorGroup.applyValue(getAppConnectorGroupResult -\u003e getAppConnectorGroupResult.id()))\n                .build())\n            .build());\n\n        var browserAccessApps = new ApplicationSegmentBrowserAccess(\"browserAccessApps\", ApplicationSegmentBrowserAccessArgs.builder()        \n            .description(\"Browser Access Apps\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .tcpPortRanges(            \n                \"80\",\n                \"80\")\n            .domainNames(\"sales.acme.com\")\n            .segmentGroupId(exampleSegmentGroup.id())\n            .clientlessApps(ApplicationSegmentBrowserAccessClientlessAppArgs.builder()\n                .name(\"sales.acme.com\")\n                .applicationProtocol(\"HTTP\")\n                .applicationPort(\"80\")\n                .certificateId(testCert.applyValue(getBaCertificateResult -\u003e getBaCertificateResult.id()))\n                .trustUntrustedCert(true)\n                .enabled(true)\n                .domain(\"sales.acme.com\")\n                .build())\n            .serverGroups(ApplicationSegmentBrowserAccessServerGroupArgs.builder()\n                .ids(exampleServerGroup.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Browser Access Application\n  browserAccessApps:\n    type: zpa:ApplicationSegmentBrowserAccess\n    properties:\n      description: Browser Access Apps\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      tcpPortRanges:\n        - '80'\n        - '80'\n      domainNames:\n        - sales.acme.com\n      segmentGroupId: ${exampleSegmentGroup.id}\n      clientlessApps:\n        - name: sales.acme.com\n          applicationProtocol: HTTP\n          applicationPort: '80'\n          certificateId: ${testCert.id}\n          trustUntrustedCert: true\n          enabled: true\n          domain: sales.acme.com\n      serverGroups:\n        - ids:\n            - ${exampleServerGroup.id}\n  # ZPA Segment Group resource\n  exampleSegmentGroup:\n    type: zpa:SegmentGroup\n    properties:\n      description: Example\n      enabled: true\n  # ZPA Server Group resource\n  exampleServerGroup:\n    type: zpa:ServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: true\n      appConnectorGroups:\n        - ids:\n            - ${exampleAppConnectorGroup.id}\nvariables:\n  testCert:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        name: sales.acme.com\n  exampleAppConnectorGroup:\n    fn::invoke:\n      Function: zpa:getAppConnectorGroup\n      Arguments:\n        name: AWS-Connector\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zpa_application_segment_browser_access** Application Segment Browser Access can be imported by using \u003c`BROWSER ACCESS ID`\u003e or `\u003c\u003cBROWSER ACCESS NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example \u003cbrowser_access_id\u003e.\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess example \u003cbrowser_access_name\u003e\n```\n\n",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessClientlessApp:ApplicationSegmentBrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessServerGroup:ApplicationSegmentBrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessTcpPortRange:ApplicationSegmentBrowserAccessTcpPortRange"
                    },
                    "description": "tcp port range\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessUdpPortRange:ApplicationSegmentBrowserAccessUdpPortRange"
                    },
                    "description": "udp port range\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "required": [
                "clientlessApps",
                "domainNames",
                "enabled",
                "healthCheckType",
                "healthReporting",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpKeepAlive",
                "tcpPortRange",
                "tcpPortRanges",
                "udpPortRange",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessClientlessApp:ApplicationSegmentBrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n",
                    "willReplaceOnChanges": true
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessServerGroup:ApplicationSegmentBrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessTcpPortRange:ApplicationSegmentBrowserAccessTcpPortRange"
                    },
                    "description": "tcp port range\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessUdpPortRange:ApplicationSegmentBrowserAccessUdpPortRange"
                    },
                    "description": "udp port range\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "requiredInputs": [
                "clientlessApps",
                "domainNames",
                "segmentGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSegmentBrowserAccess resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessClientlessApp:ApplicationSegmentBrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) - Whether this app is enabled or not.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of BA app.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessServerGroup:ApplicationSegmentBrowserAccessServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpKeepAlive": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessTcpPortRange:ApplicationSegmentBrowserAccessTcpPortRange"
                        },
                        "description": "tcp port range\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentBrowserAccessUdpPortRange:ApplicationSegmentBrowserAccessUdpPortRange"
                        },
                        "description": "udp port range\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/applicationSegmentInspection:ApplicationSegmentInspection": {
            "description": "The **zpa_application_segment_inspection** resource creates an inspection application segment in the Zscaler Private Access cloud. This resource can then be referenced in an access policy inspection rule. This resource supports Inspection for both `HTTP` and `HTTPS`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst jenkins = zpa.getBaCertificate({\n    name: \"jenkins.securitygeek.io\",\n});\nconst _this = new zpa.ApplicationSegmentInspection(\"this\", {\n    description: \"ZPA_Inspection_Example\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    isCnameEnabled: true,\n    tcpPortRanges: [\n        \"443\",\n        \"443\",\n    ],\n    domainNames: [\"jenkins.example.com\"],\n    segmentGroupId: zpa_segment_group[\"this\"].id,\n    serverGroups: [{\n        ids: [zpa_server_group[\"this\"].id],\n    }],\n    commonAppsDto: {\n        appsConfigs: [{\n            name: \"jenkins.example.com\",\n            domain: \"jenkins.example.com\",\n            applicationProtocol: \"HTTPS\",\n            applicationPort: \"443\",\n            certificateId: jenkins.then(jenkins =\u003e jenkins.id),\n            enabled: true,\n            appTypes: [\"INSPECT\"],\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\njenkins = zpa.get_ba_certificate(name=\"jenkins.securitygeek.io\")\nthis = zpa.ApplicationSegmentInspection(\"this\",\n    description=\"ZPA_Inspection_Example\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    is_cname_enabled=True,\n    tcp_port_ranges=[\n        \"443\",\n        \"443\",\n    ],\n    domain_names=[\"jenkins.example.com\"],\n    segment_group_id=zpa_segment_group[\"this\"][\"id\"],\n    server_groups=[zpa.ApplicationSegmentInspectionServerGroupArgs(\n        ids=[zpa_server_group[\"this\"][\"id\"]],\n    )],\n    common_apps_dto=zpa.ApplicationSegmentInspectionCommonAppsDtoArgs(\n        apps_configs=[zpa.ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs(\n            name=\"jenkins.example.com\",\n            domain=\"jenkins.example.com\",\n            application_protocol=\"HTTPS\",\n            application_port=\"443\",\n            certificate_id=jenkins.id,\n            enabled=True,\n            app_types=[\"INSPECT\"],\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jenkins = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Name = \"jenkins.securitygeek.io\",\n    });\n\n    var @this = new Zpa.ApplicationSegmentInspection(\"this\", new()\n    {\n        Description = \"ZPA_Inspection_Example\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        IsCnameEnabled = true,\n        TcpPortRanges = new[]\n        {\n            \"443\",\n            \"443\",\n        },\n        DomainNames = new[]\n        {\n            \"jenkins.example.com\",\n        },\n        SegmentGroupId = zpa_segment_group.This.Id,\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ApplicationSegmentInspectionServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_server_group.This.Id,\n                },\n            },\n        },\n        CommonAppsDto = new Zpa.Inputs.ApplicationSegmentInspectionCommonAppsDtoArgs\n        {\n            AppsConfigs = new[]\n            {\n                new Zpa.Inputs.ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"jenkins.example.com\",\n                    Domain = \"jenkins.example.com\",\n                    ApplicationProtocol = \"HTTPS\",\n                    ApplicationPort = \"443\",\n                    CertificateId = jenkins.Apply(getBaCertificateResult =\u003e getBaCertificateResult.Id),\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"INSPECT\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjenkins, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"jenkins.securitygeek.io\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewApplicationSegmentInspection(ctx, \"this\", \u0026zpa.ApplicationSegmentInspectionArgs{\n\t\t\tDescription:     pulumi.String(\"ZPA_Inspection_Example\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tIsCnameEnabled:  pulumi.Bool(true),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"443\"),\n\t\t\t\tpulumi.String(\"443\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"jenkins.example.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),\n\t\t\tServerGroups: zpa.ApplicationSegmentInspectionServerGroupArray{\n\t\t\t\t\u0026zpa.ApplicationSegmentInspectionServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_server_group.This.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCommonAppsDto: \u0026zpa.ApplicationSegmentInspectionCommonAppsDtoArgs{\n\t\t\t\tAppsConfigs: zpa.ApplicationSegmentInspectionCommonAppsDtoAppsConfigArray{\n\t\t\t\t\t\u0026zpa.ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"jenkins.example.com\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"jenkins.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"HTTPS\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"443\"),\n\t\t\t\t\t\tCertificateId:       pulumi.String(jenkins.Id),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"INSPECT\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport com.pulumi.zpa.ApplicationSegmentInspection;\nimport com.pulumi.zpa.ApplicationSegmentInspectionArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentInspectionServerGroupArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentInspectionCommonAppsDtoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var jenkins = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .name(\"jenkins.securitygeek.io\")\n            .build());\n\n        var this_ = new ApplicationSegmentInspection(\"this\", ApplicationSegmentInspectionArgs.builder()        \n            .description(\"ZPA_Inspection_Example\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .isCnameEnabled(true)\n            .tcpPortRanges(            \n                \"443\",\n                \"443\")\n            .domainNames(\"jenkins.example.com\")\n            .segmentGroupId(zpa_segment_group.this().id())\n            .serverGroups(ApplicationSegmentInspectionServerGroupArgs.builder()\n                .ids(zpa_server_group.this().id())\n                .build())\n            .commonAppsDto(ApplicationSegmentInspectionCommonAppsDtoArgs.builder()\n                .appsConfigs(ApplicationSegmentInspectionCommonAppsDtoAppsConfigArgs.builder()\n                    .name(\"jenkins.example.com\")\n                    .domain(\"jenkins.example.com\")\n                    .applicationProtocol(\"HTTPS\")\n                    .applicationPort(\"443\")\n                    .certificateId(jenkins.applyValue(getBaCertificateResult -\u003e getBaCertificateResult.id()))\n                    .enabled(true)\n                    .appTypes(\"INSPECT\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:ApplicationSegmentInspection\n    properties:\n      description: ZPA_Inspection_Example\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      isCnameEnabled: true\n      tcpPortRanges:\n        - '443'\n        - '443'\n      domainNames:\n        - jenkins.example.com\n      segmentGroupId: ${zpa_segment_group.this.id}\n      serverGroups:\n        - ids:\n            - ${zpa_server_group.this.id}\n      commonAppsDto:\n        appsConfigs:\n          - name: jenkins.example.com\n            domain: jenkins.example.com\n            applicationProtocol: HTTPS\n            applicationPort: '443'\n            certificateId: ${jenkins.id}\n            enabled: true\n            appTypes:\n              - INSPECT\nvariables:\n  jenkins:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        name: jenkins.securitygeek.io\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nInspection Application Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n$ pulumi import zpa:index/applicationSegmentInspection:ApplicationSegmentInspection example \u003capplication_segment_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/applicationSegmentInspection:ApplicationSegmentInspection example \u003capplication_segment_name\u003e\n```\n\n",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ApplicationSegmentInspectionCommonAppsDto:ApplicationSegmentInspectionCommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionServerGroup:ApplicationSegmentInspectionServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionTcpPortRange:ApplicationSegmentInspectionTcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionUdpPortRange:ApplicationSegmentInspectionUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "required": [
                "bypassType",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "icmpAccessType",
                "ipAnchored",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpKeepAlive",
                "tcpPortRange",
                "tcpPortRanges",
                "udpPortRange",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ApplicationSegmentInspectionCommonAppsDto:ApplicationSegmentInspectionCommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n",
                    "willReplaceOnChanges": true
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Inspection Application Segment.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n",
                    "willReplaceOnChanges": true
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionServerGroup:ApplicationSegmentInspectionServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionTcpPortRange:ApplicationSegmentInspectionTcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionUdpPortRange:ApplicationSegmentInspectionUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "requiredInputs": [
                "segmentGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSegmentInspection resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "commonAppsDto": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentInspectionCommonAppsDto:ApplicationSegmentInspectionCommonAppsDto",
                        "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n",
                        "willReplaceOnChanges": true
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Inspection Application Segment.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentInspectionServerGroup:ApplicationSegmentInspectionServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpKeepAlive": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentInspectionTcpPortRange:ApplicationSegmentInspectionTcpPortRange"
                        },
                        "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentInspectionUdpPortRange:ApplicationSegmentInspectionUdpPortRange"
                        },
                        "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n\u003e **NOTE:** When removing TCP and/or UDP ports, parameter must be defined but set as empty due to current API behavior.\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/applicationSegmentPRA:ApplicationSegmentPRA": {
            "description": "The **zpa_application_segment_pra** resource creates an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\nconst _this = new zpa.ApplicationSegmentPRA(\"this\", {\n    description: \"PRA_Example\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    isCnameEnabled: true,\n    tcpPortRanges: [\n        \"22\",\n        \"22\",\n        \"3389\",\n        \"3389\",\n    ],\n    domainNames: [\n        \"ssh_pra.example.com\",\n        \"rdp_pra.example.com\",\n    ],\n    segmentGroupId: zpa_segment_group[\"this\"].id,\n    serverGroups: [{\n        ids: [zpa_server_group[\"this\"].id],\n    }],\n    commonAppsDto: {\n        appsConfigs: [\n            {\n                name: \"ssh_pra\",\n                domain: \"ssh_pra.example.com\",\n                applicationProtocol: \"SSH\",\n                applicationPort: \"22\",\n                enabled: true,\n                appTypes: [\"SECURE_REMOTE_ACCESS\"],\n            },\n            {\n                name: \"rdp_pra\",\n                domain: \"rdp_pra.example.com\",\n                applicationProtocol: \"RDP\",\n                connectionSecurity: \"ANY\",\n                applicationPort: \"3389\",\n                enabled: true,\n                appTypes: [\"SECURE_REMOTE_ACCESS\"],\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\nthis = zpa.ApplicationSegmentPRA(\"this\",\n    description=\"PRA_Example\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    is_cname_enabled=True,\n    tcp_port_ranges=[\n        \"22\",\n        \"22\",\n        \"3389\",\n        \"3389\",\n    ],\n    domain_names=[\n        \"ssh_pra.example.com\",\n        \"rdp_pra.example.com\",\n    ],\n    segment_group_id=zpa_segment_group[\"this\"][\"id\"],\n    server_groups=[zpa.ApplicationSegmentPRAServerGroupArgs(\n        ids=[zpa_server_group[\"this\"][\"id\"]],\n    )],\n    common_apps_dto=zpa.ApplicationSegmentPRACommonAppsDtoArgs(\n        apps_configs=[\n            zpa.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs(\n                name=\"ssh_pra\",\n                domain=\"ssh_pra.example.com\",\n                application_protocol=\"SSH\",\n                application_port=\"22\",\n                enabled=True,\n                app_types=[\"SECURE_REMOTE_ACCESS\"],\n            ),\n            zpa.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs(\n                name=\"rdp_pra\",\n                domain=\"rdp_pra.example.com\",\n                application_protocol=\"RDP\",\n                connection_security=\"ANY\",\n                application_port=\"3389\",\n                enabled=True,\n                app_types=[\"SECURE_REMOTE_ACCESS\"],\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Zpa.ApplicationSegmentPRA(\"this\", new()\n    {\n        Description = \"PRA_Example\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        IsCnameEnabled = true,\n        TcpPortRanges = new[]\n        {\n            \"22\",\n            \"22\",\n            \"3389\",\n            \"3389\",\n        },\n        DomainNames = new[]\n        {\n            \"ssh_pra.example.com\",\n            \"rdp_pra.example.com\",\n        },\n        SegmentGroupId = zpa_segment_group.This.Id,\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.ApplicationSegmentPRAServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    zpa_server_group.This.Id,\n                },\n            },\n        },\n        CommonAppsDto = new Zpa.Inputs.ApplicationSegmentPRACommonAppsDtoArgs\n        {\n            AppsConfigs = new[]\n            {\n                new Zpa.Inputs.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"ssh_pra\",\n                    Domain = \"ssh_pra.example.com\",\n                    ApplicationProtocol = \"SSH\",\n                    ApplicationPort = \"22\",\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"SECURE_REMOTE_ACCESS\",\n                    },\n                },\n                new Zpa.Inputs.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs\n                {\n                    Name = \"rdp_pra\",\n                    Domain = \"rdp_pra.example.com\",\n                    ApplicationProtocol = \"RDP\",\n                    ConnectionSecurity = \"ANY\",\n                    ApplicationPort = \"3389\",\n                    Enabled = true,\n                    AppTypes = new[]\n                    {\n                        \"SECURE_REMOTE_ACCESS\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewApplicationSegmentPRA(ctx, \"this\", \u0026zpa.ApplicationSegmentPRAArgs{\n\t\t\tDescription:     pulumi.String(\"PRA_Example\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tIsCnameEnabled:  pulumi.Bool(true),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"22\"),\n\t\t\t\tpulumi.String(\"22\"),\n\t\t\t\tpulumi.String(\"3389\"),\n\t\t\t\tpulumi.String(\"3389\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh_pra.example.com\"),\n\t\t\t\tpulumi.String(\"rdp_pra.example.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: pulumi.Any(zpa_segment_group.This.Id),\n\t\t\tServerGroups: zpa.ApplicationSegmentPRAServerGroupArray{\n\t\t\t\t\u0026zpa.ApplicationSegmentPRAServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tzpa_server_group.This.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tCommonAppsDto: \u0026zpa.ApplicationSegmentPRACommonAppsDtoArgs{\n\t\t\t\tAppsConfigs: zpa.ApplicationSegmentPRACommonAppsDtoAppsConfigArray{\n\t\t\t\t\t\u0026zpa.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"ssh_pra\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"ssh_pra.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"SSH\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"22\"),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"SECURE_REMOTE_ACCESS\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026zpa.ApplicationSegmentPRACommonAppsDtoAppsConfigArgs{\n\t\t\t\t\t\tName:                pulumi.String(\"rdp_pra\"),\n\t\t\t\t\t\tDomain:              pulumi.String(\"rdp_pra.example.com\"),\n\t\t\t\t\t\tApplicationProtocol: pulumi.String(\"RDP\"),\n\t\t\t\t\t\tConnectionSecurity:  pulumi.String(\"ANY\"),\n\t\t\t\t\t\tApplicationPort:     pulumi.String(\"3389\"),\n\t\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\t\tAppTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"SECURE_REMOTE_ACCESS\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ApplicationSegmentPRA;\nimport com.pulumi.zpa.ApplicationSegmentPRAArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentPRAServerGroupArgs;\nimport com.pulumi.zpa.inputs.ApplicationSegmentPRACommonAppsDtoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new ApplicationSegmentPRA(\"this\", ApplicationSegmentPRAArgs.builder()        \n            .description(\"PRA_Example\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .isCnameEnabled(true)\n            .tcpPortRanges(            \n                \"22\",\n                \"22\",\n                \"3389\",\n                \"3389\")\n            .domainNames(            \n                \"ssh_pra.example.com\",\n                \"rdp_pra.example.com\")\n            .segmentGroupId(zpa_segment_group.this().id())\n            .serverGroups(ApplicationSegmentPRAServerGroupArgs.builder()\n                .ids(zpa_server_group.this().id())\n                .build())\n            .commonAppsDto(ApplicationSegmentPRACommonAppsDtoArgs.builder()\n                .appsConfigs(                \n                    ApplicationSegmentPRACommonAppsDtoAppsConfigArgs.builder()\n                        .name(\"ssh_pra\")\n                        .domain(\"ssh_pra.example.com\")\n                        .applicationProtocol(\"SSH\")\n                        .applicationPort(\"22\")\n                        .enabled(true)\n                        .appTypes(\"SECURE_REMOTE_ACCESS\")\n                        .build(),\n                    ApplicationSegmentPRACommonAppsDtoAppsConfigArgs.builder()\n                        .name(\"rdp_pra\")\n                        .domain(\"rdp_pra.example.com\")\n                        .applicationProtocol(\"RDP\")\n                        .connectionSecurity(\"ANY\")\n                        .applicationPort(\"3389\")\n                        .enabled(true)\n                        .appTypes(\"SECURE_REMOTE_ACCESS\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:ApplicationSegmentPRA\n    properties:\n      description: PRA_Example\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      isCnameEnabled: true\n      tcpPortRanges:\n        - '22'\n        - '22'\n        - '3389'\n        - '3389'\n      domainNames:\n        - ssh_pra.example.com\n        - rdp_pra.example.com\n      segmentGroupId: ${zpa_segment_group.this.id}\n      serverGroups:\n        - ids:\n            - ${zpa_server_group.this.id}\n      commonAppsDto:\n        appsConfigs:\n          - name: ssh_pra\n            domain: ssh_pra.example.com\n            applicationProtocol: SSH\n            applicationPort: '22'\n            enabled: true\n            appTypes:\n              - SECURE_REMOTE_ACCESS\n          - name: rdp_pra\n            domain: rdp_pra.example.com\n            applicationProtocol: RDP\n            connectionSecurity: ANY\n            applicationPort: '3389'\n            enabled: true\n            appTypes:\n              - SECURE_REMOTE_ACCESS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nApplication Segment can be imported by using `\u003cAPPLICATION SEGMENT ID\u003e` or `\u003cAPPLICATION SEGMENT NAME\u003e` as the import ID.\n\n```sh\n$ pulumi import zpa:index/applicationSegmentPRA:ApplicationSegmentPRA example \u003capplication_segment_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/applicationSegmentPRA:ApplicationSegmentPRA example \u003capplication_segment_name\u003e\n```\n\n",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ApplicationSegmentPRACommonAppsDto:ApplicationSegmentPRACommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRAServerGroup:ApplicationSegmentPRAServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRATcpPortRange:ApplicationSegmentPRATcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRAUdpPortRange:ApplicationSegmentPRAUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n!\u003e **WARNING:** Removing PRA applications from the `common_apps_dto.apps_config` block will cause the provider to force a replacement of the application segment.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "required": [
                "bypassType",
                "domainNames",
                "doubleEncrypt",
                "enabled",
                "icmpAccessType",
                "ipAnchored",
                "isCnameEnabled",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpKeepAlive",
                "tcpPortRange",
                "tcpPortRanges",
                "udpPortRange",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                },
                "commonAppsDto": {
                    "$ref": "#/types/zpa:index/ApplicationSegmentPRACommonAppsDto:ApplicationSegmentPRACommonAppsDto",
                    "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n",
                    "willReplaceOnChanges": true
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this application is enabled or not\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                },
                "icmpAccessType": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional)\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Privileged Remote Access\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n",
                    "willReplaceOnChanges": true
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRAServerGroup:ApplicationSegmentPRAServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRATcpPortRange:ApplicationSegmentPRATcpPortRange"
                    },
                    "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRAUdpPortRange:ApplicationSegmentPRAUdpPortRange"
                    },
                    "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n\n!\u003e **WARNING:** Removing PRA applications from the `common_apps_dto.apps_config` block will cause the provider to force a replacement of the application segment.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "(Optional) Supported values: `true`, `false`\n"
                }
            },
            "requiredInputs": [
                "domainNames",
                "segmentGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSegmentPRA resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "commonAppsDto": {
                        "$ref": "#/types/zpa:index/ApplicationSegmentPRACommonAppsDto:ApplicationSegmentPRACommonAppsDto",
                        "description": "List of applications (e.g., Inspection, Browser Access or Privileged Remote Access)\n* `apps_config:` - (Required) List of applications to be configured\n",
                        "willReplaceOnChanges": true
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Privileged Remote Access\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentPRAServerGroup:ApplicationSegmentPRAServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpKeepAlive": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``1`` for Enabled and ``0`` for Disabled\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentPRATcpPortRange:ApplicationSegmentPRATcpPortRange"
                        },
                        "description": "TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ApplicationSegmentPRAUdpPortRange:ApplicationSegmentPRAUdpPortRange"
                        },
                        "description": "UDP port ranges used to access the app.\n* `from:`\n* `to:`\n\n\u003e **NOTE:** Application segments must have unique ports and cannot have overlapping domain names using the same tcp/udp ports across multiple application segments.\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n\n!\u003e **WARNING:** Removing PRA applications from the `common_apps_dto.apps_config` block will cause the provider to force a replacement of the application segment.\n\n\u003e **NOTE:**  TCP and UDP ports can also be defined using the following model:\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/applicationServer:ApplicationServer": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Application Server resource (IP Address)\nconst testAppServer = new zpa.ApplicationServer(\"testAppServer\", {\n    address: \"192.168.1.1\",\n    description: \"test1-app-server\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Application Server resource (IP Address)\ntest_app_server = zpa.ApplicationServer(\"testAppServer\",\n    address=\"192.168.1.1\",\n    description=\"test1-app-server\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Application Server resource (IP Address)\n    var testAppServer = new Zpa.ApplicationServer(\"testAppServer\", new()\n    {\n        Address = \"192.168.1.1\",\n        Description = \"test1-app-server\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Application Server resource (IP Address)\n\t\t_, err := zpa.NewApplicationServer(ctx, \"testAppServer\", \u0026zpa.ApplicationServerArgs{\n\t\t\tAddress:     pulumi.String(\"192.168.1.1\"),\n\t\t\tDescription: pulumi.String(\"test1-app-server\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ApplicationServer;\nimport com.pulumi.zpa.ApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAppServer = new ApplicationServer(\"testAppServer\", ApplicationServerArgs.builder()        \n            .address(\"192.168.1.1\")\n            .description(\"test1-app-server\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Application Server resource (IP Address)\n  testAppServer:\n    type: zpa:ApplicationServer\n    properties:\n      address: 192.168.1.1\n      description: test1-app-server\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Application Server resource (FQDN Address)\nconst testAppServer = new zpa.ApplicationServer(\"testAppServer\", {\n    address: \"server1.acme.com\",\n    description: \"test1-app-server\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Application Server resource (FQDN Address)\ntest_app_server = zpa.ApplicationServer(\"testAppServer\",\n    address=\"server1.acme.com\",\n    description=\"test1-app-server\",\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Application Server resource (FQDN Address)\n    var testAppServer = new Zpa.ApplicationServer(\"testAppServer\", new()\n    {\n        Address = \"server1.acme.com\",\n        Description = \"test1-app-server\",\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Application Server resource (FQDN Address)\n\t\t_, err := zpa.NewApplicationServer(ctx, \"testAppServer\", \u0026zpa.ApplicationServerArgs{\n\t\t\tAddress:     pulumi.String(\"server1.acme.com\"),\n\t\t\tDescription: pulumi.String(\"test1-app-server\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ApplicationServer;\nimport com.pulumi.zpa.ApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAppServer = new ApplicationServer(\"testAppServer\", ApplicationServerArgs.builder()        \n            .address(\"server1.acme.com\")\n            .description(\"test1-app-server\")\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Application Server resource (FQDN Address)\n  testAppServer:\n    type: zpa:ApplicationServer\n    properties:\n      address: server1.acme.com\n      description: test1-app-server\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nApplication Server can be imported by using `\u003cAPPLICATION SERVER ID\u003e` or `\u003cAPPLICATION SERVER NAME\u003e` as the import ID\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/applicationServer:ApplicationServer example \u003capplication_server_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/applicationServer:ApplicationServer example \u003capplication_server_name\u003e\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address. The address of the application server to be exported.\n"
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) This field defines the list of server group IDs.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field defines the description of the server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines the status of the server.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the application server to be exported.\n"
                }
            },
            "required": [
                "address",
                "appServerGroupIds",
                "description",
                "enabled",
                "microtenantId",
                "name"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "Address. The address of the application server to be exported.\n"
                },
                "appServerGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) This field defines the list of server group IDs.\n"
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field defines the description of the server.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines the status of the server.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name. The name of the application server to be exported.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationServer resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "Address. The address of the application server to be exported.\n"
                    },
                    "appServerGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) This field defines the list of server group IDs.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This field defines the description of the server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) This field defines the status of the server.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the application server to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/assistantSchedule:AssistantSchedule": {
            "description": "Use the **zpa_app_connector_assistant_schedule** resource sets the scheduled frequency at which the disconnected App Connectors are eligible for deletion. The supported value for frequency is days. The frequencyInterval field is the number of days after an App Connector disconnects for it to become eligible for deletion. The minimum supported value for frequencyInterval is 5.\n\n\u003e **NOTE** - When enabling the Assistant Schedule for the first time, you must provide the `customer_id` information. If you authenticated using environment variables and used `ZPA_CUSTOMER_ID` environment variable, you don't have to define the customer_id attribute in the HCL configuration, and the provider will automatically use the value from the environment variable `ZPA_CUSTOMER_ID`\n\n## Example Usage\n\n### Defined Customer ID Value\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\nconst _this = new zpa.AssistantSchedule(\"this\", {\n    customerId: \"123456789101112\",\n    deleteDisabled: true,\n    enabled: true,\n    frequency: \"days\",\n    frequencyInterval: \"5\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\nthis = zpa.AssistantSchedule(\"this\",\n    customer_id=\"123456789101112\",\n    delete_disabled=True,\n    enabled=True,\n    frequency=\"days\",\n    frequency_interval=\"5\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Zpa.AssistantSchedule(\"this\", new()\n    {\n        CustomerId = \"123456789101112\",\n        DeleteDisabled = true,\n        Enabled = true,\n        Frequency = \"days\",\n        FrequencyInterval = \"5\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewAssistantSchedule(ctx, \"this\", \u0026zpa.AssistantScheduleArgs{\n\t\t\tCustomerId:        pulumi.String(\"123456789101112\"),\n\t\t\tDeleteDisabled:    pulumi.Bool(true),\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\tFrequency:         pulumi.String(\"days\"),\n\t\t\tFrequencyInterval: pulumi.String(\"5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.AssistantSchedule;\nimport com.pulumi.zpa.AssistantScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new AssistantSchedule(\"this\", AssistantScheduleArgs.builder()        \n            .customerId(\"123456789101112\")\n            .deleteDisabled(true)\n            .enabled(true)\n            .frequency(\"days\")\n            .frequencyInterval(\"5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:AssistantSchedule\n    properties:\n      customerId: '123456789101112'\n      deleteDisabled: true\n      enabled: true\n      frequency: days\n      frequencyInterval: '5'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Customer ID Via Environment Variable\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\nconst _this = new zpa.AssistantSchedule(\"this\", {\n    deleteDisabled: true,\n    enabled: true,\n    frequency: \"days\",\n    frequencyInterval: \"5\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\nthis = zpa.AssistantSchedule(\"this\",\n    delete_disabled=True,\n    enabled=True,\n    frequency=\"days\",\n    frequency_interval=\"5\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Zpa.AssistantSchedule(\"this\", new()\n    {\n        DeleteDisabled = true,\n        Enabled = true,\n        Frequency = \"days\",\n        FrequencyInterval = \"5\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.NewAssistantSchedule(ctx, \"this\", \u0026zpa.AssistantScheduleArgs{\n\t\t\tDeleteDisabled:    pulumi.Bool(true),\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t\tFrequency:         pulumi.String(\"days\"),\n\t\t\tFrequencyInterval: pulumi.String(\"5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.AssistantSchedule;\nimport com.pulumi.zpa.AssistantScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new AssistantSchedule(\"this\", AssistantScheduleArgs.builder()        \n            .deleteDisabled(true)\n            .enabled(true)\n            .frequency(\"days\")\n            .frequencyInterval(\"5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zpa:AssistantSchedule\n    properties:\n      deleteDisabled: true\n      enabled: true\n      frequency: days\n      frequencyInterval: '5'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customerId": {
                    "type": "string",
                    "description": "When enabling the Assistant Schedule for the first time, you must provide the `customer_id` information. If you authenticated using environment variables and used `ZPA_CUSTOMER_ID` environment variable, you don't have to define the customer_id attribute in the HCL configuration, and the provider will automatically use the value from the environment variable `ZPA_CUSTOMER_ID`\n"
                },
                "deleteDisabled": {
                    "type": "boolean",
                    "description": "(Optional) - Indicates if the App Connectors are included for deletion if they are in a disconnected state based on frequencyInterval and frequency values. Supported values are: `true` or `false`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Indicates if the setting for deleting App Connectors is enabled or disabled. Supported values are: `true` or `false`\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The scheduled frequency at which the disconnected App Connectors are deleted. Supported value is: `days`\n"
                },
                "frequencyInterval": {
                    "type": "string",
                    "description": "The interval for the configured frequency value. The minimum supported value is 5. Supported values are: `5`, `7`, `14`, `30`, `60` and `90`\n"
                }
            },
            "required": [
                "customerId"
            ],
            "inputProperties": {
                "customerId": {
                    "type": "string",
                    "description": "When enabling the Assistant Schedule for the first time, you must provide the `customer_id` information. If you authenticated using environment variables and used `ZPA_CUSTOMER_ID` environment variable, you don't have to define the customer_id attribute in the HCL configuration, and the provider will automatically use the value from the environment variable `ZPA_CUSTOMER_ID`\n"
                },
                "deleteDisabled": {
                    "type": "boolean",
                    "description": "(Optional) - Indicates if the App Connectors are included for deletion if they are in a disconnected state based on frequencyInterval and frequency values. Supported values are: `true` or `false`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Indicates if the setting for deleting App Connectors is enabled or disabled. Supported values are: `true` or `false`\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The scheduled frequency at which the disconnected App Connectors are deleted. Supported value is: `days`\n"
                },
                "frequencyInterval": {
                    "type": "string",
                    "description": "The interval for the configured frequency value. The minimum supported value is 5. Supported values are: `5`, `7`, `14`, `30`, `60` and `90`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AssistantSchedule resources.\n",
                "properties": {
                    "customerId": {
                        "type": "string",
                        "description": "When enabling the Assistant Schedule for the first time, you must provide the `customer_id` information. If you authenticated using environment variables and used `ZPA_CUSTOMER_ID` environment variable, you don't have to define the customer_id attribute in the HCL configuration, and the provider will automatically use the value from the environment variable `ZPA_CUSTOMER_ID`\n"
                    },
                    "deleteDisabled": {
                        "type": "boolean",
                        "description": "(Optional) - Indicates if the App Connectors are included for deletion if they are in a disconnected state based on frequencyInterval and frequency values. Supported values are: `true` or `false`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) - Indicates if the setting for deleting App Connectors is enabled or disabled. Supported values are: `true` or `false`\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The scheduled frequency at which the disconnected App Connectors are deleted. Supported value is: `days`\n"
                    },
                    "frequencyInterval": {
                        "type": "string",
                        "description": "The interval for the configured frequency value. The minimum supported value is 5. Supported values are: `5`, `7`, `14`, `30`, `60` and `90`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/browserAccess:BrowserAccess": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst testCert = zpa.getBaCertificate({\n    name: \"sales.acme.com\",\n});\n// ZPA Segment Group resource\nconst exampleSegmentGroup = new zpa.SegmentGroup(\"exampleSegmentGroup\", {\n    description: \"Example\",\n    enabled: true,\n});\nconst exampleAppConnectorGroup = zpa.getAppConnectorGroup({\n    name: \"AWS-Connector\",\n});\n// ZPA Server Group resource\nconst exampleServerGroup = new zpa.ServerGroup(\"exampleServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: true,\n    appConnectorGroups: [{\n        ids: [exampleAppConnectorGroup.then(exampleAppConnectorGroup =\u003e exampleAppConnectorGroup.id)],\n    }],\n});\n// Create Browser Access Application\nconst browserAccessApps = new zpa.BrowserAccess(\"browserAccessApps\", {\n    description: \"Browser Access Apps\",\n    enabled: true,\n    healthReporting: \"ON_ACCESS\",\n    bypassType: \"NEVER\",\n    tcpPortRanges: [\n        \"80\",\n        \"80\",\n    ],\n    domainNames: [\"sales.acme.com\"],\n    segmentGroupId: exampleSegmentGroup.id,\n    clientlessApps: [{\n        name: \"sales.acme.com\",\n        applicationProtocol: \"HTTP\",\n        applicationPort: \"80\",\n        certificateId: testCert.then(testCert =\u003e testCert.id),\n        trustUntrustedCert: true,\n        enabled: true,\n        domain: \"sales.acme.com\",\n    }],\n    serverGroups: [{\n        ids: [exampleServerGroup.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\ntest_cert = zpa.get_ba_certificate(name=\"sales.acme.com\")\n# ZPA Segment Group resource\nexample_segment_group = zpa.SegmentGroup(\"exampleSegmentGroup\",\n    description=\"Example\",\n    enabled=True)\nexample_app_connector_group = zpa.get_app_connector_group(name=\"AWS-Connector\")\n# ZPA Server Group resource\nexample_server_group = zpa.ServerGroup(\"exampleServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=True,\n    app_connector_groups=[zpa.ServerGroupAppConnectorGroupArgs(\n        ids=[example_app_connector_group.id],\n    )])\n# Create Browser Access Application\nbrowser_access_apps = zpa.BrowserAccess(\"browserAccessApps\",\n    description=\"Browser Access Apps\",\n    enabled=True,\n    health_reporting=\"ON_ACCESS\",\n    bypass_type=\"NEVER\",\n    tcp_port_ranges=[\n        \"80\",\n        \"80\",\n    ],\n    domain_names=[\"sales.acme.com\"],\n    segment_group_id=example_segment_group.id,\n    clientless_apps=[zpa.BrowserAccessClientlessAppArgs(\n        name=\"sales.acme.com\",\n        application_protocol=\"HTTP\",\n        application_port=\"80\",\n        certificate_id=test_cert.id,\n        trust_untrusted_cert=True,\n        enabled=True,\n        domain=\"sales.acme.com\",\n    )],\n    server_groups=[zpa.BrowserAccessServerGroupArgs(\n        ids=[example_server_group.id],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testCert = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Name = \"sales.acme.com\",\n    });\n\n    // ZPA Segment Group resource\n    var exampleSegmentGroup = new Zpa.SegmentGroup(\"exampleSegmentGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n    });\n\n    var exampleAppConnectorGroup = Zpa.GetAppConnectorGroup.Invoke(new()\n    {\n        Name = \"AWS-Connector\",\n    });\n\n    // ZPA Server Group resource\n    var exampleServerGroup = new Zpa.ServerGroup(\"exampleServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = true,\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleAppConnectorGroup.Apply(getAppConnectorGroupResult =\u003e getAppConnectorGroupResult.Id),\n                },\n            },\n        },\n    });\n\n    // Create Browser Access Application\n    var browserAccessApps = new Zpa.BrowserAccess(\"browserAccessApps\", new()\n    {\n        Description = \"Browser Access Apps\",\n        Enabled = true,\n        HealthReporting = \"ON_ACCESS\",\n        BypassType = \"NEVER\",\n        TcpPortRanges = new[]\n        {\n            \"80\",\n            \"80\",\n        },\n        DomainNames = new[]\n        {\n            \"sales.acme.com\",\n        },\n        SegmentGroupId = exampleSegmentGroup.Id,\n        ClientlessApps = new[]\n        {\n            new Zpa.Inputs.BrowserAccessClientlessAppArgs\n            {\n                Name = \"sales.acme.com\",\n                ApplicationProtocol = \"HTTP\",\n                ApplicationPort = \"80\",\n                CertificateId = testCert.Apply(getBaCertificateResult =\u003e getBaCertificateResult.Id),\n                TrustUntrustedCert = true,\n                Enabled = true,\n                Domain = \"sales.acme.com\",\n            },\n        },\n        ServerGroups = new[]\n        {\n            new Zpa.Inputs.BrowserAccessServerGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleServerGroup.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestCert, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"sales.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZPA Segment Group resource\n\t\texampleSegmentGroup, err := zpa.NewSegmentGroup(ctx, \"exampleSegmentGroup\", \u0026zpa.SegmentGroupArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleAppConnectorGroup, err := zpa.GetAppConnectorGroup(ctx, \u0026zpa.GetAppConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZPA Server Group resource\n\t\texampleServerGroup, err := zpa.NewServerGroup(ctx, \"exampleServerGroup\", \u0026zpa.ServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(true),\n\t\t\tAppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(exampleAppConnectorGroup.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create Browser Access Application\n\t\t_, err = zpa.NewBrowserAccess(ctx, \"browserAccessApps\", \u0026zpa.BrowserAccessArgs{\n\t\t\tDescription:     pulumi.String(\"Browser Access Apps\"),\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tHealthReporting: pulumi.String(\"ON_ACCESS\"),\n\t\t\tBypassType:      pulumi.String(\"NEVER\"),\n\t\t\tTcpPortRanges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t\tpulumi.String(\"80\"),\n\t\t\t},\n\t\t\tDomainNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sales.acme.com\"),\n\t\t\t},\n\t\t\tSegmentGroupId: exampleSegmentGroup.ID(),\n\t\t\tClientlessApps: zpa.BrowserAccessClientlessAppArray{\n\t\t\t\t\u0026zpa.BrowserAccessClientlessAppArgs{\n\t\t\t\t\tName:                pulumi.String(\"sales.acme.com\"),\n\t\t\t\t\tApplicationProtocol: pulumi.String(\"HTTP\"),\n\t\t\t\t\tApplicationPort:     pulumi.String(\"80\"),\n\t\t\t\t\tCertificateId:       pulumi.String(testCert.Id),\n\t\t\t\t\tTrustUntrustedCert:  pulumi.Bool(true),\n\t\t\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\t\t\tDomain:              pulumi.String(\"sales.acme.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServerGroups: zpa.BrowserAccessServerGroupArray{\n\t\t\t\t\u0026zpa.BrowserAccessServerGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleServerGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport com.pulumi.zpa.SegmentGroup;\nimport com.pulumi.zpa.SegmentGroupArgs;\nimport com.pulumi.zpa.inputs.GetAppConnectorGroupArgs;\nimport com.pulumi.zpa.ServerGroup;\nimport com.pulumi.zpa.ServerGroupArgs;\nimport com.pulumi.zpa.inputs.ServerGroupAppConnectorGroupArgs;\nimport com.pulumi.zpa.BrowserAccess;\nimport com.pulumi.zpa.BrowserAccessArgs;\nimport com.pulumi.zpa.inputs.BrowserAccessClientlessAppArgs;\nimport com.pulumi.zpa.inputs.BrowserAccessServerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testCert = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .name(\"sales.acme.com\")\n            .build());\n\n        var exampleSegmentGroup = new SegmentGroup(\"exampleSegmentGroup\", SegmentGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .build());\n\n        final var exampleAppConnectorGroup = ZpaFunctions.getAppConnectorGroup(GetAppConnectorGroupArgs.builder()\n            .name(\"AWS-Connector\")\n            .build());\n\n        var exampleServerGroup = new ServerGroup(\"exampleServerGroup\", ServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(true)\n            .appConnectorGroups(ServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleAppConnectorGroup.applyValue(getAppConnectorGroupResult -\u003e getAppConnectorGroupResult.id()))\n                .build())\n            .build());\n\n        var browserAccessApps = new BrowserAccess(\"browserAccessApps\", BrowserAccessArgs.builder()        \n            .description(\"Browser Access Apps\")\n            .enabled(true)\n            .healthReporting(\"ON_ACCESS\")\n            .bypassType(\"NEVER\")\n            .tcpPortRanges(            \n                \"80\",\n                \"80\")\n            .domainNames(\"sales.acme.com\")\n            .segmentGroupId(exampleSegmentGroup.id())\n            .clientlessApps(BrowserAccessClientlessAppArgs.builder()\n                .name(\"sales.acme.com\")\n                .applicationProtocol(\"HTTP\")\n                .applicationPort(\"80\")\n                .certificateId(testCert.applyValue(getBaCertificateResult -\u003e getBaCertificateResult.id()))\n                .trustUntrustedCert(true)\n                .enabled(true)\n                .domain(\"sales.acme.com\")\n                .build())\n            .serverGroups(BrowserAccessServerGroupArgs.builder()\n                .ids(exampleServerGroup.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create Browser Access Application\n  browserAccessApps:\n    type: zpa:BrowserAccess\n    properties:\n      description: Browser Access Apps\n      enabled: true\n      healthReporting: ON_ACCESS\n      bypassType: NEVER\n      tcpPortRanges:\n        - '80'\n        - '80'\n      domainNames:\n        - sales.acme.com\n      segmentGroupId: ${exampleSegmentGroup.id}\n      clientlessApps:\n        - name: sales.acme.com\n          applicationProtocol: HTTP\n          applicationPort: '80'\n          certificateId: ${testCert.id}\n          trustUntrustedCert: true\n          enabled: true\n          domain: sales.acme.com\n      serverGroups:\n        - ids:\n            - ${exampleServerGroup.id}\n  # ZPA Segment Group resource\n  exampleSegmentGroup:\n    type: zpa:SegmentGroup\n    properties:\n      description: Example\n      enabled: true\n  # ZPA Server Group resource\n  exampleServerGroup:\n    type: zpa:ServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: true\n      appConnectorGroups:\n        - ids:\n            - ${exampleAppConnectorGroup.id}\nvariables:\n  testCert:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        name: sales.acme.com\n  exampleAppConnectorGroup:\n    fn::invoke:\n      Function: zpa:getAppConnectorGroup\n      Arguments:\n        name: AWS-Connector\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zpa_application_segment_browser_access** Application Segment Browser Access can be imported by using \u003c`BROWSER ACCESS ID`\u003e or `\u003c\u003cBROWSER ACCESS NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/browserAccess:BrowserAccess example \u003cbrowser_access_id\u003e.\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/browserAccess:BrowserAccess example \u003cbrowser_access_name\u003e\n```\n\n",
            "properties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessClientlessApp:BrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean"
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessServerGroup:BrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessTcpPortRange:BrowserAccessTcpPortRange"
                    },
                    "description": "tcp port range\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessUdpPortRange:BrowserAccessUdpPortRange"
                    },
                    "description": "udp port range\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                },
                "useInDrMode": {
                    "type": "boolean"
                }
            },
            "required": [
                "clientlessApps",
                "domainNames",
                "enabled",
                "healthCheckType",
                "healthReporting",
                "name",
                "passiveHealthEnabled",
                "segmentGroupId",
                "segmentGroupName",
                "serverGroups",
                "tcpKeepAlive",
                "tcpPortRange",
                "tcpPortRanges",
                "udpPortRange",
                "udpPortRanges"
            ],
            "inputProperties": {
                "bypassType": {
                    "type": "string",
                    "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                },
                "clientlessApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessClientlessApp:BrowserAccessClientlessApp"
                    }
                },
                "configSpace": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the application.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains and IPs.\n"
                },
                "doubleEncrypt": {
                    "type": "boolean",
                    "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) - Whether this app is enabled or not.\n"
                },
                "healthCheckType": {
                    "type": "string",
                    "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                },
                "healthReporting": {
                    "type": "string",
                    "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                },
                "icmpAccessType": {
                    "type": "string"
                },
                "ipAnchored": {
                    "type": "boolean",
                    "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                },
                "isCnameEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                },
                "isIncompleteDrConfig": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Name of BA app.\n"
                },
                "passiveHealthEnabled": {
                    "type": "boolean"
                },
                "segmentGroupId": {
                    "type": "string",
                    "description": "List of Segment Group IDs\n"
                },
                "segmentGroupName": {
                    "type": "string"
                },
                "selectConnectorCloseToApp": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "serverGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessServerGroup:BrowserAccessServerGroup"
                    },
                    "description": "List of Server Group IDs\n"
                },
                "tcpKeepAlive": {
                    "type": "string"
                },
                "tcpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessTcpPortRange:BrowserAccessTcpPortRange"
                    },
                    "description": "tcp port range\n"
                },
                "tcpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "TCP port ranges used to access the app.\n"
                },
                "udpPortRange": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/BrowserAccessUdpPortRange:BrowserAccessUdpPortRange"
                    },
                    "description": "udp port range\n"
                },
                "udpPortRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "UDP port ranges used to access the app.\n"
                },
                "useInDrMode": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "clientlessApps",
                "domainNames",
                "segmentGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserAccess resources.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(Optional) Indicates whether users can bypass ZPA to access applications. Default value is: `NEVER` and supported values are: `ALWAYS`, `NEVER` and `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/BrowserAccessClientlessApp:BrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `SIEM`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(Optional) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) - Whether this app is enabled or not.\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(Optional) Default: `DEFAULT`. Supported values: `DEFAULT`, `NONE`\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(Optional) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(Optional) - If Source IP Anchoring for use with ZIA, is enabled or disabled for the app. Supported values are `true` and `false`\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of BA app.\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "List of Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/BrowserAccessServerGroup:BrowserAccessServerGroup"
                        },
                        "description": "List of Server Group IDs\n"
                    },
                    "tcpKeepAlive": {
                        "type": "string"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/BrowserAccessTcpPortRange:BrowserAccessTcpPortRange"
                        },
                        "description": "tcp port range\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/BrowserAccessUdpPortRange:BrowserAccessUdpPortRange"
                        },
                        "description": "udp port range\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UDP port ranges used to access the app.\n"
                    },
                    "useInDrMode": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/browserCertificate:BrowserCertificate": {
            "description": "Use the **zpa_ba_certificate** creates a browser access certificate with a private key in the Zscaler Private Access cloud. This resource is required when creating a browser access application segment resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getBaCertificate({\n    name: \"example.acme.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_ba_certificate(name=\"example.acme.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Name = \"example.acme.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"example.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .name(\"example.acme.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        name: example.acme.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Browser Access resource\nconst _this = new zpa.BrowserCertificate(\"this\", {\n    certBlob: `-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\nBQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\nEAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n-----END CERTIFICATE-----\n\n`,\n    description: \"server.example.com\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Browser Access resource\nthis = zpa.BrowserCertificate(\"this\",\n    cert_blob=\"\"\"-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\nBQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\nEAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n-----END CERTIFICATE-----\n\n\"\"\",\n    description=\"server.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Browser Access resource\n    var @this = new Zpa.BrowserCertificate(\"this\", new()\n    {\n        CertBlob = @\"-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\nBQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\nEAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n-----END CERTIFICATE-----\n\n\",\n        Description = \"server.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Browser Access resource\n\t\t_, err := zpa.NewBrowserCertificate(ctx, \"this\", \u0026zpa.BrowserCertificateArgs{\n\t\t\tCertBlob: pulumi.String(`-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\nBQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\nEAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n-----END CERTIFICATE-----\n\n`),\n\t\t\tDescription: pulumi.String(\"server.example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.BrowserCertificate;\nimport com.pulumi.zpa.BrowserCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new BrowserCertificate(\"this\", BrowserCertificateArgs.builder()        \n            .certBlob(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\nBQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\nEAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n-----END CERTIFICATE-----\n\n            \"\"\")\n            .description(\"server.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Browser Access resource\n  this:\n    type: zpa:BrowserCertificate\n    properties:\n      certBlob: |+\n        -----BEGIN CERTIFICATE-----\n        MIIDyzCCArOgAwIBAgIUekBD+iu64583B3u5ew7Bqj2O5cQwDQYJKoZIhvcNAQEL\n        BQAwgY0xCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENvbHVtYmlhMRIw\n        EAYDVQQHDAlWYW5jb3V2ZXIxFTATBgNVBAoMDEJELUhhc2hpQ29ycDEVMBMGA1UE\n        -----END CERTIFICATE-----\n\n      description: server.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "certBlob": {
                    "type": "string",
                    "description": "The content of the certificate in PEM format.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The certificate text in PEM format\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) - The description of the certificate.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The unique identifier of the Microtenant\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the browser access certificate to be created.\n"
                }
            },
            "required": [
                "certBlob",
                "certificate",
                "microtenantId",
                "name"
            ],
            "inputProperties": {
                "certBlob": {
                    "type": "string",
                    "description": "The content of the certificate in PEM format.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) - The description of the certificate.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The unique identifier of the Microtenant\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the browser access certificate to be created.\n"
                }
            },
            "requiredInputs": [
                "certBlob"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserCertificate resources.\n",
                "properties": {
                    "certBlob": {
                        "type": "string",
                        "description": "The content of the certificate in PEM format.\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The certificate text in PEM format\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - The description of the certificate.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "The unique identifier of the Microtenant\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the browser access certificate to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner": {
            "description": "The **zpa_cloud_browser_isolation_banner** resource creates a Cloud Browser Isolation banner. This resource is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nApplication Segment can be imported by using `\u003cBANNER ID\u003e` or `\u003cBANNER NAME\u003e` as the import ID.\n\n```sh\n$ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example \u003cbanner_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner example \u003cbanner_name\u003e\n```\n\n",
            "properties": {
                "banner": {
                    "type": "boolean",
                    "description": "(Optional) - Show Welcome Notification\n"
                },
                "logo": {
                    "type": "string",
                    "description": "The Logo Image (.jpeg or .png; Maximum file size is 100KB.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CBI banner to be exported.\n"
                },
                "notificationText": {
                    "type": "string",
                    "description": "The Banner Notification Text\n"
                },
                "notificationTitle": {
                    "type": "string",
                    "description": "The Banner Notification Title\n"
                },
                "persist": {
                    "type": "boolean"
                },
                "primaryColor": {
                    "type": "string",
                    "description": "The Banner Primary Color code in hexadecimal way to represent the color of the banner in RGB format\n"
                },
                "textColor": {
                    "type": "string",
                    "description": "The Banner Text Color code in hexadecimal way to represent the color of the text in RGB format\n"
                }
            },
            "required": [
                "banner",
                "logo",
                "name",
                "persist"
            ],
            "inputProperties": {
                "banner": {
                    "type": "boolean",
                    "description": "(Optional) - Show Welcome Notification\n"
                },
                "logo": {
                    "type": "string",
                    "description": "The Logo Image (.jpeg or .png; Maximum file size is 100KB.)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CBI banner to be exported.\n"
                },
                "notificationText": {
                    "type": "string",
                    "description": "The Banner Notification Text\n"
                },
                "notificationTitle": {
                    "type": "string",
                    "description": "The Banner Notification Title\n"
                },
                "persist": {
                    "type": "boolean"
                },
                "primaryColor": {
                    "type": "string",
                    "description": "The Banner Primary Color code in hexadecimal way to represent the color of the banner in RGB format\n"
                },
                "textColor": {
                    "type": "string",
                    "description": "The Banner Text Color code in hexadecimal way to represent the color of the text in RGB format\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudBrowserIsolationBanner resources.\n",
                "properties": {
                    "banner": {
                        "type": "boolean",
                        "description": "(Optional) - Show Welcome Notification\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "The Logo Image (.jpeg or .png; Maximum file size is 100KB.)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI banner to be exported.\n"
                    },
                    "notificationText": {
                        "type": "string",
                        "description": "The Banner Notification Text\n"
                    },
                    "notificationTitle": {
                        "type": "string",
                        "description": "The Banner Notification Title\n"
                    },
                    "persist": {
                        "type": "boolean"
                    },
                    "primaryColor": {
                        "type": "string",
                        "description": "The Banner Primary Color code in hexadecimal way to represent the color of the banner in RGB format\n"
                    },
                    "textColor": {
                        "type": "string",
                        "description": "The Banner Text Color code in hexadecimal way to represent the color of the text in RGB format\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/cloudBrowserIsolationCertificate:CloudBrowserIsolationCertificate": {
            "description": "The **zpa_cloud_browser_isolation_certificate** resource creates a Cloud Browser Isolation certificate. This resource can then be used when creating a CBI External Profile `zpa.CloudBrowserIsolationExternalProfile`.`\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// Retrieve CBI Banner ID\nconst thisCloudBrowserIsolationCertificate = new zpa.CloudBrowserIsolationCertificate(\"thisCloudBrowserIsolationCertificate\", {pem: fs.readFileSync(\"cert.pem\", \"utf8\")});\nconst thisIndex_cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate = new zpa.CloudBrowserIsolationCertificate(\"thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate\", {pem: `    -----BEGIN CERTIFICATE-----\n    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\n`});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Retrieve CBI Banner ID\nthis_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate(\"thisCloudBrowserIsolationCertificate\", pem=(lambda path: open(path).read())(\"cert.pem\"))\nthis_index_cloud_browser_isolation_certificate_cloud_browser_isolation_certificate = zpa.CloudBrowserIsolationCertificate(\"thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate\", pem=\"\"\"    -----BEGIN CERTIFICATE-----\n    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve CBI Banner ID\n    var thisCloudBrowserIsolationCertificate = new Zpa.CloudBrowserIsolationCertificate(\"thisCloudBrowserIsolationCertificate\", new()\n    {\n        Pem = File.ReadAllText(\"cert.pem\"),\n    });\n\n    var thisIndex_cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate = new Zpa.CloudBrowserIsolationCertificate(\"thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate\", new()\n    {\n        Pem = @\"    -----BEGIN CERTIFICATE-----\n    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve CBI Banner ID\n\t\t_, err := zpa.NewCloudBrowserIsolationCertificate(ctx, \"thisCloudBrowserIsolationCertificate\", \u0026zpa.CloudBrowserIsolationCertificateArgs{\n\t\t\tPem: readFileOrPanic(\"cert.pem\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewCloudBrowserIsolationCertificate(ctx, \"thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate\", \u0026zpa.CloudBrowserIsolationCertificateArgs{\n\t\t\tPem: pulumi.String(\"    -----BEGIN CERTIFICATE-----\\n    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.CloudBrowserIsolationCertificate;\nimport com.pulumi.zpa.CloudBrowserIsolationCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thisCloudBrowserIsolationCertificate = new CloudBrowserIsolationCertificate(\"thisCloudBrowserIsolationCertificate\", CloudBrowserIsolationCertificateArgs.builder()        \n            .pem(Files.readString(Paths.get(\"cert.pem\")))\n            .build());\n\n        var thisIndex_cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate = new CloudBrowserIsolationCertificate(\"thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate\", CloudBrowserIsolationCertificateArgs.builder()        \n            .pem(\"\"\"\n    -----BEGIN CERTIFICATE-----\n    MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Retrieve CBI Banner ID\n  thisCloudBrowserIsolationCertificate:\n    type: zpa:CloudBrowserIsolationCertificate\n    properties:\n      pem:\n        fn::readFile: cert.pem\n  thisIndex/cloudBrowserIsolationCertificateCloudBrowserIsolationCertificate:\n    type: zpa:CloudBrowserIsolationCertificate\n    properties:\n      pem: |2\n            -----BEGIN CERTIFICATE-----\n            MIIFYDCCBEigAwIBAgIQQAF3ITfU6UK47naqPGQKtzANBgkqhkiG9w0BAQsFADA/\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the CBI certificate.\n"
                },
                "pem": {
                    "type": "string",
                    "description": "The certificate in PEM format.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the CBI certificate.\n"
                },
                "pem": {
                    "type": "string",
                    "description": "The certificate in PEM format.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudBrowserIsolationCertificate resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI certificate.\n"
                    },
                    "pem": {
                        "type": "string",
                        "description": "The certificate in PEM format.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/cloudBrowserIsolationExternalProfile:CloudBrowserIsolationExternalProfile": {
            "description": "The **zpa_cloud_browser_isolation_external_profile** resource creates a Cloud Browser Isolation external profile. This resource can then be used in as part of `zpa.PolicyAccessIsolationRule` when the `action` attribute is set to `ISOLATE`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst thisCloudBrowserIsolationBanner = zpa.getCloudBrowserIsolationBanner({\n    name: \"Default\",\n});\nconst singapore = zpa.getCloudBrowserIsolationRegion({\n    name: \"Singapore\",\n});\nconst frankfurt = zpa.getCloudBrowserIsolationRegion({\n    name: \"Frankfurt\",\n});\nconst thisCloudBrowserIsolationCertificate = zpa.getCloudBrowserIsolationCertificate({\n    name: \"Zscaler Root Certificate\",\n});\nconst thisCloudBrowserIsolationExternalProfile = new zpa.CloudBrowserIsolationExternalProfile(\"thisCloudBrowserIsolationExternalProfile\", {\n    description: \"CBI_Profile_Example\",\n    bannerId: thisCloudBrowserIsolationBanner.then(thisCloudBrowserIsolationBanner =\u003e thisCloudBrowserIsolationBanner.id),\n    regionIds: [singapore.then(singapore =\u003e singapore.id)],\n    certificateIds: [thisCloudBrowserIsolationCertificate.then(thisCloudBrowserIsolationCertificate =\u003e thisCloudBrowserIsolationCertificate.id)],\n    userExperiences: [{\n        sessionPersistence: true,\n        browserInBrowser: true,\n    }],\n    securityControls: [{\n        copyPaste: \"all\",\n        uploadDownload: \"all\",\n        documentViewer: true,\n        localRender: true,\n        allowPrinting: true,\n        restrictKeystrokes: false,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\nthis_cloud_browser_isolation_banner = zpa.get_cloud_browser_isolation_banner(name=\"Default\")\nsingapore = zpa.get_cloud_browser_isolation_region(name=\"Singapore\")\nfrankfurt = zpa.get_cloud_browser_isolation_region(name=\"Frankfurt\")\nthis_cloud_browser_isolation_certificate = zpa.get_cloud_browser_isolation_certificate(name=\"Zscaler Root Certificate\")\nthis_cloud_browser_isolation_external_profile = zpa.CloudBrowserIsolationExternalProfile(\"thisCloudBrowserIsolationExternalProfile\",\n    description=\"CBI_Profile_Example\",\n    banner_id=this_cloud_browser_isolation_banner.id,\n    region_ids=[singapore.id],\n    certificate_ids=[this_cloud_browser_isolation_certificate.id],\n    user_experiences=[zpa.CloudBrowserIsolationExternalProfileUserExperienceArgs(\n        session_persistence=True,\n        browser_in_browser=True,\n    )],\n    security_controls=[zpa.CloudBrowserIsolationExternalProfileSecurityControlArgs(\n        copy_paste=\"all\",\n        upload_download=\"all\",\n        document_viewer=True,\n        local_render=True,\n        allow_printing=True,\n        restrict_keystrokes=False,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisCloudBrowserIsolationBanner = Zpa.GetCloudBrowserIsolationBanner.Invoke(new()\n    {\n        Name = \"Default\",\n    });\n\n    var singapore = Zpa.GetCloudBrowserIsolationRegion.Invoke(new()\n    {\n        Name = \"Singapore\",\n    });\n\n    var frankfurt = Zpa.GetCloudBrowserIsolationRegion.Invoke(new()\n    {\n        Name = \"Frankfurt\",\n    });\n\n    var thisCloudBrowserIsolationCertificate = Zpa.GetCloudBrowserIsolationCertificate.Invoke(new()\n    {\n        Name = \"Zscaler Root Certificate\",\n    });\n\n    var thisCloudBrowserIsolationExternalProfile = new Zpa.CloudBrowserIsolationExternalProfile(\"thisCloudBrowserIsolationExternalProfile\", new()\n    {\n        Description = \"CBI_Profile_Example\",\n        BannerId = thisCloudBrowserIsolationBanner.Apply(getCloudBrowserIsolationBannerResult =\u003e getCloudBrowserIsolationBannerResult.Id),\n        RegionIds = new[]\n        {\n            singapore.Apply(getCloudBrowserIsolationRegionResult =\u003e getCloudBrowserIsolationRegionResult.Id),\n        },\n        CertificateIds = new[]\n        {\n            thisCloudBrowserIsolationCertificate.Apply(getCloudBrowserIsolationCertificateResult =\u003e getCloudBrowserIsolationCertificateResult.Id),\n        },\n        UserExperiences = new[]\n        {\n            new Zpa.Inputs.CloudBrowserIsolationExternalProfileUserExperienceArgs\n            {\n                SessionPersistence = true,\n                BrowserInBrowser = true,\n            },\n        },\n        SecurityControls = new[]\n        {\n            new Zpa.Inputs.CloudBrowserIsolationExternalProfileSecurityControlArgs\n            {\n                CopyPaste = \"all\",\n                UploadDownload = \"all\",\n                DocumentViewer = true,\n                LocalRender = true,\n                AllowPrinting = true,\n                RestrictKeystrokes = false,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisCloudBrowserIsolationBanner, err := zpa.LookupCloudBrowserIsolationBanner(ctx, \u0026zpa.LookupCloudBrowserIsolationBannerArgs{\n\t\t\tName: pulumi.StringRef(\"Default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsingapore, err := zpa.GetCloudBrowserIsolationRegion(ctx, \u0026zpa.GetCloudBrowserIsolationRegionArgs{\n\t\t\tName: pulumi.StringRef(\"Singapore\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetCloudBrowserIsolationRegion(ctx, \u0026zpa.GetCloudBrowserIsolationRegionArgs{\n\t\t\tName: pulumi.StringRef(\"Frankfurt\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisCloudBrowserIsolationCertificate, err := zpa.LookupCloudBrowserIsolationCertificate(ctx, \u0026zpa.LookupCloudBrowserIsolationCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"Zscaler Root Certificate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.NewCloudBrowserIsolationExternalProfile(ctx, \"thisCloudBrowserIsolationExternalProfile\", \u0026zpa.CloudBrowserIsolationExternalProfileArgs{\n\t\t\tDescription: pulumi.String(\"CBI_Profile_Example\"),\n\t\t\tBannerId:    pulumi.String(thisCloudBrowserIsolationBanner.Id),\n\t\t\tRegionIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(singapore.Id),\n\t\t\t},\n\t\t\tCertificateIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(thisCloudBrowserIsolationCertificate.Id),\n\t\t\t},\n\t\t\tUserExperiences: zpa.CloudBrowserIsolationExternalProfileUserExperienceArray{\n\t\t\t\t\u0026zpa.CloudBrowserIsolationExternalProfileUserExperienceArgs{\n\t\t\t\t\tSessionPersistence: pulumi.Bool(true),\n\t\t\t\t\tBrowserInBrowser:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecurityControls: zpa.CloudBrowserIsolationExternalProfileSecurityControlArray{\n\t\t\t\t\u0026zpa.CloudBrowserIsolationExternalProfileSecurityControlArgs{\n\t\t\t\t\tCopyPaste:          pulumi.String(\"all\"),\n\t\t\t\t\tUploadDownload:     pulumi.String(\"all\"),\n\t\t\t\t\tDocumentViewer:     pulumi.Bool(true),\n\t\t\t\t\tLocalRender:        pulumi.Bool(true),\n\t\t\t\t\tAllowPrinting:      pulumi.Bool(true),\n\t\t\t\t\tRestrictKeystrokes: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationBannerArgs;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationRegionArgs;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationCertificateArgs;\nimport com.pulumi.zpa.CloudBrowserIsolationExternalProfile;\nimport com.pulumi.zpa.CloudBrowserIsolationExternalProfileArgs;\nimport com.pulumi.zpa.inputs.CloudBrowserIsolationExternalProfileUserExperienceArgs;\nimport com.pulumi.zpa.inputs.CloudBrowserIsolationExternalProfileSecurityControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisCloudBrowserIsolationBanner = ZpaFunctions.getCloudBrowserIsolationBanner(GetCloudBrowserIsolationBannerArgs.builder()\n            .name(\"Default\")\n            .build());\n\n        final var singapore = ZpaFunctions.getCloudBrowserIsolationRegion(GetCloudBrowserIsolationRegionArgs.builder()\n            .name(\"Singapore\")\n            .build());\n\n        final var frankfurt = ZpaFunctions.getCloudBrowserIsolationRegion(GetCloudBrowserIsolationRegionArgs.builder()\n            .name(\"Frankfurt\")\n            .build());\n\n        final var thisCloudBrowserIsolationCertificate = ZpaFunctions.getCloudBrowserIsolationCertificate(GetCloudBrowserIsolationCertificateArgs.builder()\n            .name(\"Zscaler Root Certificate\")\n            .build());\n\n        var thisCloudBrowserIsolationExternalProfile = new CloudBrowserIsolationExternalProfile(\"thisCloudBrowserIsolationExternalProfile\", CloudBrowserIsolationExternalProfileArgs.builder()        \n            .description(\"CBI_Profile_Example\")\n            .bannerId(thisCloudBrowserIsolationBanner.applyValue(getCloudBrowserIsolationBannerResult -\u003e getCloudBrowserIsolationBannerResult.id()))\n            .regionIds(singapore.applyValue(getCloudBrowserIsolationRegionResult -\u003e getCloudBrowserIsolationRegionResult.id()))\n            .certificateIds(thisCloudBrowserIsolationCertificate.applyValue(getCloudBrowserIsolationCertificateResult -\u003e getCloudBrowserIsolationCertificateResult.id()))\n            .userExperiences(CloudBrowserIsolationExternalProfileUserExperienceArgs.builder()\n                .sessionPersistence(true)\n                .browserInBrowser(true)\n                .build())\n            .securityControls(CloudBrowserIsolationExternalProfileSecurityControlArgs.builder()\n                .copyPaste(\"all\")\n                .uploadDownload(\"all\")\n                .documentViewer(true)\n                .localRender(true)\n                .allowPrinting(true)\n                .restrictKeystrokes(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisCloudBrowserIsolationExternalProfile:\n    type: zpa:CloudBrowserIsolationExternalProfile\n    properties:\n      description: CBI_Profile_Example\n      bannerId: ${thisCloudBrowserIsolationBanner.id}\n      regionIds:\n        - ${singapore.id}\n      certificateIds:\n        - ${thisCloudBrowserIsolationCertificate.id}\n      userExperiences:\n        - sessionPersistence: true\n          browserInBrowser: true\n      securityControls:\n        - copyPaste: all\n          uploadDownload: all\n          documentViewer: true\n          localRender: true\n          allowPrinting: true\n          restrictKeystrokes: false\nvariables:\n  thisCloudBrowserIsolationBanner:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationBanner\n      Arguments:\n        name: Default\n  singapore:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationRegion\n      Arguments:\n        name: Singapore\n  frankfurt:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationRegion\n      Arguments:\n        name: Frankfurt\n  thisCloudBrowserIsolationCertificate:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationCertificate\n      Arguments:\n        name: Zscaler Root Certificate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "bannerId": {
                    "type": "string",
                    "description": "The ID of the CBI banner to be exported.\n"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CBI security controls enabled for the profile\n* `id:` - (Optional) The ID of the CBI Certificate to be associated with the profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) - The description of the CBI profile\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CBI banner to be exported.\n"
                },
                "regionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CBI region\n* `id:` - (Optional) The ID of CBI region where the profile must be deployed. At least 2 regions are required.\n"
                },
                "securityControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileSecurityControl:CloudBrowserIsolationExternalProfileSecurityControl"
                    },
                    "description": "(Optional) The CBI security controls enabled for the profile\n* `copy_paste:` - (Optional) Enable or disable copy \u0026 paste for local computer to isolation. Supported values are: `none` or `all`\n* `document_viewer:` - (Optional) Enable or disable to view Microsoft Office files in isolation.\n* `local_render:` - (Optional) Enables non-isolated hyperlinks to be opened on the user's native browser.\n* `upload_download:` - (Optional) Enable or disable file transfer from local computer to isolation. Supported values are: `none` or `all`\n* `allow_printing:` - (Optional) Enables the user to print web pages and documents rendered within the isolation browser. Supported values are: `true` or `false`\n* `restrict_keystrokes:` - (Optional) Prevents keyboard and text input to isolated web pages. Supported values are: `true` or `false`\n"
                },
                "userExperiences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileUserExperience:CloudBrowserIsolationExternalProfileUserExperience"
                    },
                    "description": "The CBI security controls enabled for the profile\n* `session_persistence:` - (Optional) Save user cookies between sessions. If disabled, all cookies will be discarded when isolation session ends. Supported values are: `true` or `false`\n* `browser_in_browser:` - (Optional) Enable or disable browser-in-browser or native browser experience. Supported values are: `true` or `false`\n"
                }
            },
            "required": [
                "bannerId",
                "certificateIds",
                "name",
                "regionIds"
            ],
            "inputProperties": {
                "bannerId": {
                    "type": "string",
                    "description": "The ID of the CBI banner to be exported.\n"
                },
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CBI security controls enabled for the profile\n* `id:` - (Optional) The ID of the CBI Certificate to be associated with the profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) - The description of the CBI profile\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CBI banner to be exported.\n"
                },
                "regionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The CBI region\n* `id:` - (Optional) The ID of CBI region where the profile must be deployed. At least 2 regions are required.\n"
                },
                "securityControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileSecurityControl:CloudBrowserIsolationExternalProfileSecurityControl"
                    },
                    "description": "(Optional) The CBI security controls enabled for the profile\n* `copy_paste:` - (Optional) Enable or disable copy \u0026 paste for local computer to isolation. Supported values are: `none` or `all`\n* `document_viewer:` - (Optional) Enable or disable to view Microsoft Office files in isolation.\n* `local_render:` - (Optional) Enables non-isolated hyperlinks to be opened on the user's native browser.\n* `upload_download:` - (Optional) Enable or disable file transfer from local computer to isolation. Supported values are: `none` or `all`\n* `allow_printing:` - (Optional) Enables the user to print web pages and documents rendered within the isolation browser. Supported values are: `true` or `false`\n* `restrict_keystrokes:` - (Optional) Prevents keyboard and text input to isolated web pages. Supported values are: `true` or `false`\n"
                },
                "userExperiences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileUserExperience:CloudBrowserIsolationExternalProfileUserExperience"
                    },
                    "description": "The CBI security controls enabled for the profile\n* `session_persistence:` - (Optional) Save user cookies between sessions. If disabled, all cookies will be discarded when isolation session ends. Supported values are: `true` or `false`\n* `browser_in_browser:` - (Optional) Enable or disable browser-in-browser or native browser experience. Supported values are: `true` or `false`\n"
                }
            },
            "requiredInputs": [
                "bannerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudBrowserIsolationExternalProfile resources.\n",
                "properties": {
                    "bannerId": {
                        "type": "string",
                        "description": "The ID of the CBI banner to be exported.\n"
                    },
                    "certificateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The CBI security controls enabled for the profile\n* `id:` - (Optional) The ID of the CBI Certificate to be associated with the profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) - The description of the CBI profile\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI banner to be exported.\n"
                    },
                    "regionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The CBI region\n* `id:` - (Optional) The ID of CBI region where the profile must be deployed. At least 2 regions are required.\n"
                    },
                    "securityControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileSecurityControl:CloudBrowserIsolationExternalProfileSecurityControl"
                        },
                        "description": "(Optional) The CBI security controls enabled for the profile\n* `copy_paste:` - (Optional) Enable or disable copy \u0026 paste for local computer to isolation. Supported values are: `none` or `all`\n* `document_viewer:` - (Optional) Enable or disable to view Microsoft Office files in isolation.\n* `local_render:` - (Optional) Enables non-isolated hyperlinks to be opened on the user's native browser.\n* `upload_download:` - (Optional) Enable or disable file transfer from local computer to isolation. Supported values are: `none` or `all`\n* `allow_printing:` - (Optional) Enables the user to print web pages and documents rendered within the isolation browser. Supported values are: `true` or `false`\n* `restrict_keystrokes:` - (Optional) Prevents keyboard and text input to isolated web pages. Supported values are: `true` or `false`\n"
                    },
                    "userExperiences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/CloudBrowserIsolationExternalProfileUserExperience:CloudBrowserIsolationExternalProfileUserExperience"
                        },
                        "description": "The CBI security controls enabled for the profile\n* `session_persistence:` - (Optional) Save user cookies between sessions. If disabled, all cookies will be discarded when isolation session ends. Supported values are: `true` or `false`\n* `browser_in_browser:` - (Optional) Enable or disable browser-in-browser or native browser experience. Supported values are: `true` or `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/connectorGroup:ConnectorGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// Create a App Connector Group\nconst example = new zpa.ConnectorGroup(\"example\", {\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    description: \"Example\",\n    dnsQueryType: \"IPV4_IPV6\",\n    enabled: true,\n    latitude: \"37.338\",\n    location: \"San Jose, CA, US\",\n    longitude: \"-121.8863\",\n    overrideVersionProfile: true,\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    useInDrMode: true,\n    versionProfileName: \"New Release\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create a App Connector Group\nexample = zpa.ConnectorGroup(\"example\",\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    description=\"Example\",\n    dns_query_type=\"IPV4_IPV6\",\n    enabled=True,\n    latitude=\"37.338\",\n    location=\"San Jose, CA, US\",\n    longitude=\"-121.8863\",\n    override_version_profile=True,\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    use_in_dr_mode=True,\n    version_profile_name=\"New Release\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a App Connector Group\n    var example = new Zpa.ConnectorGroup(\"example\", new()\n    {\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Description = \"Example\",\n        DnsQueryType = \"IPV4_IPV6\",\n        Enabled = true,\n        Latitude = \"37.338\",\n        Location = \"San Jose, CA, US\",\n        Longitude = \"-121.8863\",\n        OverrideVersionProfile = true,\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        UseInDrMode = true,\n        VersionProfileName = \"New Release\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a App Connector Group\n\t\t_, err := zpa.NewConnectorGroup(ctx, \"example\", \u0026zpa.ConnectorGroupArgs{\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4_IPV6\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tUseInDrMode:            pulumi.Bool(true),\n\t\t\tVersionProfileName:     pulumi.String(\"New Release\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ConnectorGroup;\nimport com.pulumi.zpa.ConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConnectorGroup(\"example\", ConnectorGroupArgs.builder()        \n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .description(\"Example\")\n            .dnsQueryType(\"IPV4_IPV6\")\n            .enabled(true)\n            .latitude(\"37.338\")\n            .location(\"San Jose, CA, US\")\n            .longitude(\"-121.8863\")\n            .overrideVersionProfile(true)\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .useInDrMode(true)\n            .versionProfileName(\"New Release\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a App Connector Group\n  example:\n    type: zpa:ConnectorGroup\n    properties:\n      cityCountry: San Jose, CA\n      countryCode: US\n      description: Example\n      dnsQueryType: IPV4_IPV6\n      enabled: true\n      latitude: '37.338'\n      location: San Jose, CA, US\n      longitude: '-121.8863'\n      overrideVersionProfile: true\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      useInDrMode: true\n      versionProfileName: New Release\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nApp Connector Group can be imported by using `\u003cAPP CONNECTOR GROUP ID\u003e` or `\u003cAPP CONNECTOR GROUP NAME\u003e`as the import ID.\n\n```sh\n$ pulumi import zpa:index/connectorGroup:ConnectorGroup example \u003capp_connector_group_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/connectorGroup:ConnectorGroup example \u003capp_connector_group_name\u003e\n```\n\n",
            "properties": {
                "cityCountry": {
                    "type": "string",
                    "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the App Connector Group.\n"
                },
                "dnsQueryType": {
                    "type": "string",
                    "description": "Supported values are:\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                },
                "lssAppConnectorGroup": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "praEnabled": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "tcpQuickAckApp": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckReadAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                },
                "wafDisabled": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                }
            },
            "required": [
                "cityCountry",
                "countryCode",
                "enabled",
                "latitude",
                "location",
                "longitude",
                "lssAppConnectorGroup",
                "microtenantId",
                "name",
                "overrideVersionProfile",
                "praEnabled",
                "tcpQuickAckApp",
                "tcpQuickAckAssistant",
                "tcpQuickAckReadAssistant",
                "useInDrMode",
                "versionProfileId",
                "versionProfileName",
                "wafDisabled"
            ],
            "inputProperties": {
                "cityCountry": {
                    "type": "string",
                    "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the App Connector Group.\n"
                },
                "dnsQueryType": {
                    "type": "string",
                    "description": "Supported values are:\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                },
                "lssAppConnectorGroup": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the App Connector Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "praEnabled": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "tcpQuickAckApp": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "tcpQuickAckReadAssistant": {
                    "type": "boolean",
                    "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                },
                "useInDrMode": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                },
                "wafDisabled": {
                    "type": "boolean",
                    "description": "Supported values: `true`, `false`\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "location",
                "longitude"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectorGroup resources.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "Whether Double Encryption is enabled or disabled for the app. i.e ``\"San Jose, US\"``\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "i.e ``\"US\"``, ``\"CA\"``\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the App Connector Group.\n"
                    },
                    "dnsQueryType": {
                        "type": "string",
                        "description": "Supported values are:\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the App Connector Group. i.e ``\"San Jose, CA, USA\"``\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "lssAppConnectorGroup": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the App Connector Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "praEnabled": {
                        "type": "boolean",
                        "description": "Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckApp": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckAssistant": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "tcpQuickAckReadAssistant": {
                        "type": "boolean",
                        "description": "Whether TCP Quick Acknowledgement is enabled or disabled for the application. The tcpQuickAckApp, tcpQuickAckAssistant, and tcpQuickAckReadAssistant fields must all share the same value. Supported values: `true`, `false`\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified day i.e ``SUNDAY``\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "Supported values: `true`, `false`\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "Name of the version profile. To learn more, see Version Profile Use Cases. This value is required, if the value for\noverrideVersionProfile is set to true\n"
                    },
                    "wafDisabled": {
                        "type": "boolean",
                        "description": "Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/inspectionCustomControls:InspectionCustomControls": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "actionValue": {
                    "type": "string"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionCustomControlsAssociatedInspectionProfileName:InspectionCustomControlsAssociatedInspectionProfileName"
                    },
                    "description": "Name of the inspection profile\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                },
                "controlType": {
                    "type": "string"
                },
                "defaultAction": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom control\n"
                },
                "name": {
                    "type": "string"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "protocolType": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionCustomControlsRule:InspectionCustomControlsRule"
                    },
                    "description": "Rules of the custom controls applied as conditions (JSON)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of the control number\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rules to be applied to the request or response type\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "actionValue",
                "associatedInspectionProfileNames",
                "controlNumber",
                "controlRuleJson",
                "controlType",
                "defaultAction",
                "defaultActionValue",
                "description",
                "name",
                "paranoiaLevel",
                "protocolType",
                "rules",
                "severity",
                "type",
                "version"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "actionValue": {
                    "type": "string"
                },
                "associatedInspectionProfileNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionCustomControlsAssociatedInspectionProfileName:InspectionCustomControlsAssociatedInspectionProfileName"
                    },
                    "description": "Name of the inspection profile\n"
                },
                "controlNumber": {
                    "type": "string"
                },
                "controlRuleJson": {
                    "type": "string",
                    "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                },
                "controlType": {
                    "type": "string"
                },
                "defaultAction": {
                    "type": "string",
                    "description": "The performed action\n"
                },
                "defaultActionValue": {
                    "type": "string",
                    "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom control\n"
                },
                "name": {
                    "type": "string"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "protocolType": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionCustomControlsRule:InspectionCustomControlsRule"
                    },
                    "description": "Rules of the custom controls applied as conditions (JSON)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of the control number\n"
                },
                "type": {
                    "type": "string",
                    "description": "Rules to be applied to the request or response type\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "defaultAction",
                "severity",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InspectionCustomControls resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The performed action\n"
                    },
                    "actionValue": {
                        "type": "string"
                    },
                    "associatedInspectionProfileNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/InspectionCustomControlsAssociatedInspectionProfileName:InspectionCustomControlsAssociatedInspectionProfileName"
                        },
                        "description": "Name of the inspection profile\n"
                    },
                    "controlNumber": {
                        "type": "string"
                    },
                    "controlRuleJson": {
                        "type": "string",
                        "description": "The control rule in JSON format that has the conditions and type of control for the inspection control\n"
                    },
                    "controlType": {
                        "type": "string"
                    },
                    "defaultAction": {
                        "type": "string",
                        "description": "The performed action\n"
                    },
                    "defaultActionValue": {
                        "type": "string",
                        "description": "This is used to provide the redirect URL if the default action is set to REDIRECT\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom control\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "protocolType": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/InspectionCustomControlsRule:InspectionCustomControlsRule"
                        },
                        "description": "Rules of the custom controls applied as conditions (JSON)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "Severity of the control number\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Rules to be applied to the request or response type\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/inspectionProfile:InspectionProfile": {
            "description": "The  **zpa_inspection_profile** resource creates an inspection profile in the Zscaler Private Access cloud. This resource can then be referenced in an inspection custom control resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetInspectionAllPredefinedControlsArgs;\nimport com.pulumi.zpa.inputs.GetInspectionPredefinedControlsArgs;\nimport com.pulumi.zpa.InspectionProfile;\nimport com.pulumi.zpa.InspectionProfileArgs;\nimport com.pulumi.zpa.inputs.InspectionProfileControlsInfoArgs;\nimport com.pulumi.zpa.inputs.InspectionProfilePredefinedControlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisInspectionAllPredefinedControls = ZpaFunctions.getInspectionAllPredefinedControls(GetInspectionAllPredefinedControlsArgs.builder()\n            .version(\"OWASP_CRS/3.3.0\")\n            .groupName(\"Preprocessors\")\n            .build());\n\n        final var thisInspectionPredefinedControls = ZpaFunctions.getInspectionPredefinedControls(GetInspectionPredefinedControlsArgs.builder()\n            .name(\"Failed to parse request body\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n        var thisInspectionProfile = new InspectionProfile(\"thisInspectionProfile\", InspectionProfileArgs.builder()        \n            .description(\"Example\")\n            .paranoiaLevel(\"1\")\n            .predefinedControlsVersion(\"OWASP_CRS/3.3.0\")\n            .incarnationNumber(\"6\")\n            .controlsInfos(InspectionProfileControlsInfoArgs.builder()\n                .controlType(\"PREDEFINED\")\n                .build())\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .predefinedControls(InspectionProfilePredefinedControlArgs.builder()\n                .id(thisInspectionPredefinedControls.applyValue(getInspectionPredefinedControlsResult -\u003e getInspectionPredefinedControlsResult.id()))\n                .action(\"BLOCK\")\n                .build())\n            .globalControlActions(            \n                \"PREDEFINED:PASS\",\n                \"CUSTOM:NONE\",\n                \"OVERRIDE_ACTION:COMMON\")\n            .commonGlobalOverrideActionsConfig(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n",
            "properties": {
                "associateAllControls": {
                    "type": "boolean"
                },
                "controlsInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfileControlsInfo:InspectionProfileControlsInfo"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "customControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfileCustomControl:InspectionProfileCustomControl"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the inspection profile.\n"
                },
                "globalControlActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions of the predefined, custom, or override controls\n"
                },
                "incarnationNumber": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "predefinedControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfilePredefinedControl:InspectionProfilePredefinedControl"
                    },
                    "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getInspectionAllPredefinedControls`.\n"
                },
                "predefinedControlsVersion": {
                    "type": "string",
                    "description": "The protocol for the AppProtection application\n"
                },
                "zsDefinedControlChoice": {
                    "type": "string",
                    "description": "Indicates the user's choice for the ThreatLabZ Controls. Supported values: ALL and SPECIFIC\n"
                }
            },
            "required": [
                "controlsInfos",
                "name",
                "predefinedControls"
            ],
            "inputProperties": {
                "associateAllControls": {
                    "type": "boolean"
                },
                "controlsInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfileControlsInfo:InspectionProfileControlsInfo"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "customControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfileCustomControl:InspectionProfileCustomControl"
                    },
                    "description": "(Optional) Types for custom controls\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the inspection profile.\n"
                },
                "globalControlActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions of the predefined, custom, or override controls\n"
                },
                "incarnationNumber": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the inspection profile.\n"
                },
                "paranoiaLevel": {
                    "type": "string",
                    "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                },
                "predefinedControls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/InspectionProfilePredefinedControl:InspectionProfilePredefinedControl"
                    },
                    "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getInspectionAllPredefinedControls`.\n"
                },
                "predefinedControlsVersion": {
                    "type": "string",
                    "description": "The protocol for the AppProtection application\n"
                },
                "zsDefinedControlChoice": {
                    "type": "string",
                    "description": "Indicates the user's choice for the ThreatLabZ Controls. Supported values: ALL and SPECIFIC\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InspectionProfile resources.\n",
                "properties": {
                    "associateAllControls": {
                        "type": "boolean"
                    },
                    "controlsInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/InspectionProfileControlsInfo:InspectionProfileControlsInfo"
                        },
                        "description": "(Optional) Types for custom controls\n"
                    },
                    "customControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/InspectionProfileCustomControl:InspectionProfileCustomControl"
                        },
                        "description": "(Optional) Types for custom controls\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the inspection profile.\n"
                    },
                    "globalControlActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The actions of the predefined, custom, or override controls\n"
                    },
                    "incarnationNumber": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the inspection profile.\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "predefinedControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/InspectionProfilePredefinedControl:InspectionProfilePredefinedControl"
                        },
                        "description": "The predefined controls. The default predefined control `Preprocessors` are mandatory and injected in the request by default. Individual `predefined_controls` can be set by using the data source `data_source_zpa_predefined_controls` or by group using the data source `zpa.getInspectionAllPredefinedControls`.\n"
                    },
                    "predefinedControlsVersion": {
                        "type": "string",
                        "description": "The protocol for the AppProtection application\n"
                    },
                    "zsDefinedControlChoice": {
                        "type": "string",
                        "description": "Indicates the user's choice for the ThreatLabZ Controls. Supported values: ALL and SPECIFIC\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/lSSConfigController:LSSConfigController": {
            "properties": {
                "config": {
                    "$ref": "#/types/zpa:index/LSSConfigControllerConfig:LSSConfigControllerConfig"
                },
                "connectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerConnectorGroup:LSSConfigControllerConnectorGroup"
                    },
                    "description": "App Connector Group(s) to be added to the LSS configuration\n"
                },
                "policyRuleId": {
                    "type": "string"
                },
                "policyRuleResource": {
                    "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResource:LSSConfigControllerPolicyRuleResource"
                }
            },
            "required": [
                "policyRuleId"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/zpa:index/LSSConfigControllerConfig:LSSConfigControllerConfig"
                },
                "connectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerConnectorGroup:LSSConfigControllerConnectorGroup"
                    },
                    "description": "App Connector Group(s) to be added to the LSS configuration\n"
                },
                "policyRuleResource": {
                    "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResource:LSSConfigControllerPolicyRuleResource"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LSSConfigController resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerConfig:LSSConfigControllerConfig"
                    },
                    "connectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/LSSConfigControllerConnectorGroup:LSSConfigControllerConnectorGroup"
                        },
                        "description": "App Connector Group(s) to be added to the LSS configuration\n"
                    },
                    "policyRuleId": {
                        "type": "string"
                    },
                    "policyRuleResource": {
                        "$ref": "#/types/zpa:index/LSSConfigControllerPolicyRuleResource:LSSConfigControllerPolicyRuleResource"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/microtenant:Microtenant": {
            "description": "The **zpa_microtenant_controller** resource creates a microtenant controller in the Zscaler Private Access cloud. This resource allows organizations to delegate responsibilities of admins directly to the acquired or merged company admins so that they can manage their configurations independently\n\n⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Microtenant Controller resource\nconst _this = new zpa.Microtenant(\"this\", {\n    description: \"Microtenant_A\",\n    enabled: true,\n    criteriaAttribute: \"AuthDomain\",\n    criteriaAttributeValues: [\"acme.com\"],\n});\nexport const zpaMicrotenantController1 = _this.users.apply(users =\u003e users.map(u =\u003e ({\n    microtenant_id: u.microtenantId,\n    username: u.username,\n    password: u.password,\n})));\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Microtenant Controller resource\nthis = zpa.Microtenant(\"this\",\n    description=\"Microtenant_A\",\n    enabled=True,\n    criteria_attribute=\"AuthDomain\",\n    criteria_attribute_values=[\"acme.com\"])\npulumi.export(\"zpaMicrotenantController1\", this.users.apply(lambda users: [{\n    \"microtenant_id\": u.microtenant_id,\n    \"username\": u.username,\n    \"password\": u.password,\n} for u in users]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Microtenant Controller resource\n    var @this = new Zpa.Microtenant(\"this\", new()\n    {\n        Description = \"Microtenant_A\",\n        Enabled = true,\n        CriteriaAttribute = \"AuthDomain\",\n        CriteriaAttributeValues = new[]\n        {\n            \"acme.com\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaMicrotenantController1\"] = @this.Users.Apply(users =\u003e users.Select(u =\u003e \n        {\n            return \n            {\n                { \"microtenant_id\", u.MicrotenantId },\n                { \"username\", u.Username },\n                { \"password\", u.Password },\n            };\n        }).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n// ZPA Microtenant Controller resource\nthis, err := zpa.NewMicrotenant(ctx, \"this\", \u0026zpa.MicrotenantArgs{\nDescription: pulumi.String(\"Microtenant_A\"),\nEnabled: pulumi.Bool(true),\nCriteriaAttribute: pulumi.String(\"AuthDomain\"),\nCriteriaAttributeValues: pulumi.StringArray{\npulumi.String(\"acme.com\"),\n},\n})\nif err != nil {\nreturn err\n}\nctx.Export(\"zpaMicrotenantController1\", this.Users.ApplyT(func(users []zpa.MicrotenantUser) ([]map[string]interface{}, error) {\nreturn \"TODO: For expression\", nil\n}).(pulumi.[]map[string]interface{}Output))\nreturn nil\n})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**microtenant_controller** can be imported by using `\u003cMICROTENANT ID\u003e` or `\u003cMICROTENANT NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/microtenant:Microtenant example \u003cmicrotenant_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/microtenant:Microtenant example \u003cmicrotenant_name\u003e\n```\n\n",
            "properties": {
                "criteriaAttribute": {
                    "type": "string",
                    "description": "(Required) Type of authentication criteria for the microtenant\n"
                },
                "criteriaAttributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required) The domain associated with the respective microtenant controller resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the microtenant controller.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this microtenant resource is enabled or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the microtenant controller.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/MicrotenantUser:MicrotenantUser"
                    }
                }
            },
            "required": [
                "criteriaAttributeValues",
                "enabled",
                "name",
                "users"
            ],
            "inputProperties": {
                "criteriaAttribute": {
                    "type": "string",
                    "description": "(Required) Type of authentication criteria for the microtenant\n"
                },
                "criteriaAttributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required) The domain associated with the respective microtenant controller resource\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the microtenant controller.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this microtenant resource is enabled or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the microtenant controller.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/MicrotenantUser:MicrotenantUser"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Microtenant resources.\n",
                "properties": {
                    "criteriaAttribute": {
                        "type": "string",
                        "description": "(Required) Type of authentication criteria for the microtenant\n"
                    },
                    "criteriaAttributeValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Required) The domain associated with the respective microtenant controller resource\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the microtenant controller.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) Whether this microtenant resource is enabled or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the microtenant controller.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/MicrotenantUser:MicrotenantUser"
                        }
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessForwardingRule:PolicyAccessForwardingRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessForwardingRuleCondition:PolicyAccessForwardingRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "microtenantId",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnIsolationProfileId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessForwardingRuleCondition:PolicyAccessForwardingRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessForwardingRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessForwardingRuleCondition:PolicyAccessForwardingRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                    },
                    "zpnCbiProfileId": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    },
                    "zpnIsolationProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessInspectionRule:PolicyAccessInspectionRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessInspectionRuleCondition:PolicyAccessInspectionRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "microtenantId",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnIsolationProfileId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessInspectionRuleCondition:PolicyAccessInspectionRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessInspectionRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessInspectionRuleCondition:PolicyAccessInspectionRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                    },
                    "zpnCbiProfileId": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    },
                    "zpnIsolationProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessIsolationRule:PolicyAccessIsolationRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessIsolationRuleCondition:PolicyAccessIsolationRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "microtenantId",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnIsolationProfileId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessIsolationRuleCondition:PolicyAccessIsolationRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessIsolationRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessIsolationRuleCondition:PolicyAccessIsolationRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                    },
                    "zpnCbiProfileId": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    },
                    "zpnIsolationProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessReorderRule:PolicyAccessReorderRule": {
            "description": "The **zpa_policy_access_rule_reorder** is a dedicated resource to manage and update rule_orders in any of the supported ZPA Policy Access types Zscaler Private Access cloud.\n\n⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of this resource for all ZPA policy types.\n\n## Example Usage\n\n### 1\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport com.pulumi.zpa.PolicyAccessRule;\nimport com.pulumi.zpa.PolicyAccessRuleArgs;\nimport com.pulumi.zpa.PolicyAccessReorderRule;\nimport com.pulumi.zpa.PolicyAccessReorderRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accessPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"ACCESS_POLICY\")\n            .build());\n\n        var example001 = new PolicyAccessRule(\"example001\", PolicyAccessRuleArgs.builder()        \n            .description(\"example001\")\n            .action(\"ALLOW\")\n            .operator(\"AND\")\n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .build());\n\n        var example002 = new PolicyAccessRule(\"example002\", PolicyAccessRuleArgs.builder()        \n            .description(\"example002\")\n            .action(\"ALLOW\")\n            .operator(\"AND\")\n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .build());\n\n        final var ruleOrders =         \n            Map.ofEntries(\n                Map.entry(\"id\", example001.id()),\n                Map.entry(\"order\", 1)\n            ),\n            Map.ofEntries(\n                Map.entry(\"id\", example002.id()),\n                Map.entry(\"order\", 2)\n            );\n\n        var accessPolicyReorder = new PolicyAccessReorderRule(\"accessPolicyReorder\", PolicyAccessReorderRuleArgs.builder()        \n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .policyType(\"ACCESS_POLICY\")\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example001:\n    type: zpa:PolicyAccessRule\n    properties:\n      description: example001\n      action: ALLOW\n      operator: AND\n      policySetId: ${accessPolicy.id}\n  example002:\n    type: zpa:PolicyAccessRule\n    properties:\n      description: example002\n      action: ALLOW\n      operator: AND\n      policySetId: ${accessPolicy.id}\n  accessPolicyReorder:\n    type: zpa:PolicyAccessReorderRule\n    properties:\n      policySetId: ${accessPolicy.id}\n      policyType: ACCESS_POLICY\n      dynamic:\n        - forEach: ${ruleOrders}\n          content:\n            - id: ${rules.value.id}\n              order: ${rules.value.order}\nvariables:\n  accessPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: ACCESS_POLICY\n  ruleOrders:\n    - id: ${example001.id}\n      order: 1\n    - id: ${example002.id}\n      order: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### 2\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport com.pulumi.zpa.PolicyAccessRule;\nimport com.pulumi.zpa.PolicyAccessRuleArgs;\nimport com.pulumi.zpa.PolicyAccessReorderRule;\nimport com.pulumi.zpa.PolicyAccessReorderRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accessPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"ACCESS_POLICY\")\n            .build());\n\n        var example001 = new PolicyAccessRule(\"example001\", PolicyAccessRuleArgs.builder()        \n            .description(\"example001\")\n            .action(\"ALLOW\")\n            .operator(\"AND\")\n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .build());\n\n        var example002 = new PolicyAccessRule(\"example002\", PolicyAccessRuleArgs.builder()        \n            .description(\"example002\")\n            .action(\"ALLOW\")\n            .operator(\"AND\")\n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .build());\n\n        final var ruleOrderMap = Map.ofEntries(\n            Map.entry(\"example001\", 1),\n            Map.entry(\"example002\", 2)\n        );\n\n        final var ruleOrders =         \n            Map.ofEntries(\n                Map.entry(\"id\", example001.id()),\n                Map.entry(\"order\", ruleOrderMap[\"example001\"])\n            ),\n            Map.ofEntries(\n                Map.entry(\"id\", example002.id()),\n                Map.entry(\"order\", ruleOrderMap[\"example002\"])\n            );\n\n        var accessPolicyReorder = new PolicyAccessReorderRule(\"accessPolicyReorder\", PolicyAccessReorderRuleArgs.builder()        \n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .policyType(\"ACCESS_POLICY\")\n            .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Required\n\n* `name` - (Required) This is the name of the policy rule.\n* `policy_type` (Required) - Supported values:\n  * ``ACCESS_POLICY or GLOBAL_POLICY``\n  * ``TIMEOUT_POLICY or REAUTH_POLICY``\n  * ``BYPASS_POLICY or CLIENT_FORWARDING_POLICY``\n  * ``INSPECTION_POLICY``\n  * ``ISOLATION_POLICY``\n  * ``CREDENTIAL_POLICY``\n  * ``CAPABILITIES_POLICY``\n  * ``CLIENTLESS_SESSION_PROTECTION_POLICY``\n",
            "properties": {
                "policyType": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessReorderRuleRule:PolicyAccessReorderRuleRule"
                    },
                    "description": "(Required)\n"
                }
            },
            "required": [
                "policyType",
                "rules"
            ],
            "inputProperties": {
                "policyType": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessReorderRuleRule:PolicyAccessReorderRuleRule"
                    },
                    "description": "(Required)\n"
                }
            },
            "requiredInputs": [
                "policyType",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessReorderRule resources.\n",
                "properties": {
                    "policyType": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessReorderRuleRule:PolicyAccessReorderRuleRule"
                        },
                        "description": "(Required)\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessRule:PolicyAccessRule": {
            "description": "The **zpa_policy_access_rule** resource creates and manages policy access rule in the Zscaler Private Access cloud.\n\n  ⚠️ **WARNING:**: The attribute ``rule_order`` is now deprecated in favor of the new resource  ``policy_access_rule_reorder``\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst accessPolicy = zpa.getPolicyType({\n    policyType: \"ACCESS_POLICY\",\n});\nconst idpName = zpa.getIdPController({\n    name: \"IdP_Name\",\n});\nconst engineering = zpa.getSCIMGroups({\n    name: \"Engineering\",\n    idpName: \"IdP_Name\",\n});\n//Create Policy Access Rule\nconst _this = new zpa.PolicyAccessRule(\"this\", {\n    description: \"Example\",\n    action: \"ALLOW\",\n    operator: \"AND\",\n    policySetId: accessPolicy.then(accessPolicy =\u003e accessPolicy.id),\n    conditions: [\n        {\n            negated: false,\n            operator: \"OR\",\n            operands: [{\n                objectType: \"APP\",\n                lhs: \"id\",\n                rhs: zpa_application_segment[\"this\"].id,\n            }],\n        },\n        {\n            negated: false,\n            operator: \"OR\",\n            operands: [{\n                objectType: \"SCIM_GROUP\",\n                lhs: idpName.then(idpName =\u003e idpName.id),\n                rhs: engineering.then(engineering =\u003e engineering.id),\n            }],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zpa as zpa\n\naccess_policy = zpa.get_policy_type(policy_type=\"ACCESS_POLICY\")\nidp_name = zpa.get_id_p_controller(name=\"IdP_Name\")\nengineering = zpa.get_scim_groups(name=\"Engineering\",\n    idp_name=\"IdP_Name\")\n#Create Policy Access Rule\nthis = zpa.PolicyAccessRule(\"this\",\n    description=\"Example\",\n    action=\"ALLOW\",\n    operator=\"AND\",\n    policy_set_id=access_policy.id,\n    conditions=[\n        zpa.PolicyAccessRuleConditionArgs(\n            negated=False,\n            operator=\"OR\",\n            operands=[zpa.PolicyAccessRuleConditionOperandArgs(\n                object_type=\"APP\",\n                lhs=\"id\",\n                rhs=zpa_application_segment[\"this\"][\"id\"],\n            )],\n        ),\n        zpa.PolicyAccessRuleConditionArgs(\n            negated=False,\n            operator=\"OR\",\n            operands=[zpa.PolicyAccessRuleConditionOperandArgs(\n                object_type=\"SCIM_GROUP\",\n                lhs=idp_name.id,\n                rhs=engineering.id,\n            )],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var accessPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"ACCESS_POLICY\",\n    });\n\n    var idpName = Zpa.GetIdPController.Invoke(new()\n    {\n        Name = \"IdP_Name\",\n    });\n\n    var engineering = Zpa.GetSCIMGroups.Invoke(new()\n    {\n        Name = \"Engineering\",\n        IdpName = \"IdP_Name\",\n    });\n\n    //Create Policy Access Rule\n    var @this = new Zpa.PolicyAccessRule(\"this\", new()\n    {\n        Description = \"Example\",\n        Action = \"ALLOW\",\n        Operator = \"AND\",\n        PolicySetId = accessPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n        Conditions = new[]\n        {\n            new Zpa.Inputs.PolicyAccessRuleConditionArgs\n            {\n                Negated = false,\n                Operator = \"OR\",\n                Operands = new[]\n                {\n                    new Zpa.Inputs.PolicyAccessRuleConditionOperandArgs\n                    {\n                        ObjectType = \"APP\",\n                        Lhs = \"id\",\n                        Rhs = zpa_application_segment.This.Id,\n                    },\n                },\n            },\n            new Zpa.Inputs.PolicyAccessRuleConditionArgs\n            {\n                Negated = false,\n                Operator = \"OR\",\n                Operands = new[]\n                {\n                    new Zpa.Inputs.PolicyAccessRuleConditionOperandArgs\n                    {\n                        ObjectType = \"SCIM_GROUP\",\n                        Lhs = idpName.Apply(getIdPControllerResult =\u003e getIdPControllerResult.Id),\n                        Rhs = engineering.Apply(getSCIMGroupsResult =\u003e getSCIMGroupsResult.Id),\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taccessPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"ACCESS_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tidpName, err := zpa.GetIdPController(ctx, \u0026zpa.GetIdPControllerArgs{\n\t\t\tName: pulumi.StringRef(\"IdP_Name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := zpa.GetSCIMGroups(ctx, \u0026zpa.GetSCIMGroupsArgs{\n\t\t\tName:    pulumi.StringRef(\"Engineering\"),\n\t\t\tIdpName: pulumi.StringRef(\"IdP_Name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create Policy Access Rule\n\t\t_, err = zpa.NewPolicyAccessRule(ctx, \"this\", \u0026zpa.PolicyAccessRuleArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tAction:      pulumi.String(\"ALLOW\"),\n\t\t\tOperator:    pulumi.String(\"AND\"),\n\t\t\tPolicySetId: pulumi.String(accessPolicy.Id),\n\t\t\tConditions: zpa.PolicyAccessRuleConditionArray{\n\t\t\t\t\u0026zpa.PolicyAccessRuleConditionArgs{\n\t\t\t\t\tNegated:  pulumi.Bool(false),\n\t\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t\t\tOperands: zpa.PolicyAccessRuleConditionOperandArray{\n\t\t\t\t\t\t\u0026zpa.PolicyAccessRuleConditionOperandArgs{\n\t\t\t\t\t\t\tObjectType: pulumi.String(\"APP\"),\n\t\t\t\t\t\t\tLhs:        pulumi.String(\"id\"),\n\t\t\t\t\t\t\tRhs:        pulumi.Any(zpa_application_segment.This.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026zpa.PolicyAccessRuleConditionArgs{\n\t\t\t\t\tNegated:  pulumi.Bool(false),\n\t\t\t\t\tOperator: pulumi.String(\"OR\"),\n\t\t\t\t\tOperands: zpa.PolicyAccessRuleConditionOperandArray{\n\t\t\t\t\t\t\u0026zpa.PolicyAccessRuleConditionOperandArgs{\n\t\t\t\t\t\t\tObjectType: pulumi.String(\"SCIM_GROUP\"),\n\t\t\t\t\t\t\tLhs:        pulumi.String(idpName.Id),\n\t\t\t\t\t\t\tRhs:        pulumi.String(engineering.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport com.pulumi.zpa.inputs.GetIdPControllerArgs;\nimport com.pulumi.zpa.inputs.GetSCIMGroupsArgs;\nimport com.pulumi.zpa.PolicyAccessRule;\nimport com.pulumi.zpa.PolicyAccessRuleArgs;\nimport com.pulumi.zpa.inputs.PolicyAccessRuleConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accessPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"ACCESS_POLICY\")\n            .build());\n\n        final var idpName = ZpaFunctions.getIdPController(GetIdPControllerArgs.builder()\n            .name(\"IdP_Name\")\n            .build());\n\n        final var engineering = ZpaFunctions.getSCIMGroups(GetSCIMGroupsArgs.builder()\n            .name(\"Engineering\")\n            .idpName(\"IdP_Name\")\n            .build());\n\n        var this_ = new PolicyAccessRule(\"this\", PolicyAccessRuleArgs.builder()        \n            .description(\"Example\")\n            .action(\"ALLOW\")\n            .operator(\"AND\")\n            .policySetId(accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()))\n            .conditions(            \n                PolicyAccessRuleConditionArgs.builder()\n                    .negated(false)\n                    .operator(\"OR\")\n                    .operands(PolicyAccessRuleConditionOperandArgs.builder()\n                        .objectType(\"APP\")\n                        .lhs(\"id\")\n                        .rhs(zpa_application_segment.this().id())\n                        .build())\n                    .build(),\n                PolicyAccessRuleConditionArgs.builder()\n                    .negated(false)\n                    .operator(\"OR\")\n                    .operands(PolicyAccessRuleConditionOperandArgs.builder()\n                        .objectType(\"SCIM_GROUP\")\n                        .lhs(idpName.applyValue(getIdPControllerResult -\u003e getIdPControllerResult.id()))\n                        .rhs(engineering.applyValue(getSCIMGroupsResult -\u003e getSCIMGroupsResult.id()))\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  #Create Policy Access Rule\n  this:\n    type: zpa:PolicyAccessRule\n    properties:\n      description: Example\n      action: ALLOW\n      operator: AND\n      policySetId: ${accessPolicy.id}\n      conditions:\n        - negated: false\n          operator: OR\n          operands:\n            - objectType: APP\n              lhs: id\n              rhs: ${zpa_application_segment.this.id}\n        - negated: false\n          operator: OR\n          operands:\n            - objectType: SCIM_GROUP\n              lhs: ${idpName.id}\n              rhs: ${engineering.id}\nvariables:\n  accessPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: ACCESS_POLICY\n  idpName:\n    fn::invoke:\n      Function: zpa:getIdPController\n      Arguments:\n        name: IdP_Name\n  engineering:\n    fn::invoke:\n      Function: zpa:getSCIMGroups\n      Arguments:\n        name: Engineering\n        idpName: IdP_Name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Required\n\n* `name` - (Required) This is the name of the policy rule.\n* `policy_set_id` - (Required) Use zpa.getPolicyType data source to retrieve the necessary policy Set ID ``policy_set_id``\n\n## LHS and RHS Values\n\n| Object Type | LHS| RHS\n|----------|-----------|----------\n| APP | ``\"id\"`` | ``application_segment_id`` |\n| APP_GROUP | ``\"id\"`` | ``segment_group_id``|\n| CLIENT_TYPE | ``\"id\"`` | ``zpn_client_type_zappl``, ``zpn_client_type_exporter``, ``zpn_client_type_browser_isolation``, ``zpn_client_type_ip_anchoring``, ``zpn_client_type_edge_connector``, ``zpn_client_type_branch_connector``,  ``zpn_client_type_zapp_partner``, ``zpn_client_type_zapp``  |\n| EDGE_CONNECTOR_GROUP | ``\"id\"`` | ``\u003cedge_connector_id\u003e`` |\n| IDP | ``\"id\"`` | ``identity_provider_id`` |\n| SAML | ``saml_attribute_id``  | ``attribute_value_to_match`` |\n| SCIM | ``scim_attribute_id``  | ``attribute_value_to_match``  |\n| SCIM_GROUP | ``scim_group_attribute_id``  | ``attribute_value_to_match``  |\n| PLATFORM | ``mac``, ``ios``, ``windows``, ``android``, ``linux`` | ``\"true\"`` / ``\"false\"`` |\n| MACHINE_GRP | ``\"id\"`` | ``machine_group_id`` |\n| POSTURE | ``posture_udid``  | ``\"true\"`` / ``\"false\"`` |\n| TRUSTED_NETWORK | ``network_id``  | ``\"true\"`` |\n| COUNTRY_CODE | [2 Letter ISO3166 Alpha2](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)  | ``\"true\"`` / ``\"false\"`` |\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nPolicy access rule can be imported by using `\u003cPOLICY ACCESS RULE ID\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/policyAccessRule:PolicyAccessRule example \u003cpolicy_access_rule_id\u003e\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``, and ``REQUIRE_APPROVAL``\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleAppConnectorGroup:PolicyAccessRuleAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "appServerGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleAppServerGroup:PolicyAccessRuleAppServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleCondition:PolicyAccessRuleCondition"
                    },
                    "description": "(Optional)\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "(Optional) This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This is the description of the access policy rule.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "description": "(Deprecated)\n",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "appConnectorGroups",
                "appServerGroups",
                "microtenantId",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnIsolationProfileId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``, and ``REQUIRE_APPROVAL``\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleAppConnectorGroup:PolicyAccessRuleAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "appServerGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleAppServerGroup:PolicyAccessRuleAppServerGroup"
                    },
                    "description": "List of the server group IDs.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessRuleCondition:PolicyAccessRuleCondition"
                    },
                    "description": "(Optional)\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "(Optional) This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This is the description of the access policy rule.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Optional)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string",
                    "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "description": "(Deprecated)\n",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(Optional) This is for providing the rule action. Supported values: ``ALLOW``, ``DENY``, and ``REQUIRE_APPROVAL``\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessRuleAppConnectorGroup:PolicyAccessRuleAppConnectorGroup"
                        },
                        "description": "List of app-connector IDs.\n"
                    },
                    "appServerGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessRuleAppServerGroup:PolicyAccessRuleAppServerGroup"
                        },
                        "description": "List of the server group IDs.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessRuleCondition:PolicyAccessRuleCondition"
                        },
                        "description": "(Optional)\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "(Optional) This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This is the description of the access policy rule.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Optional)\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``AND``, and ``OR``\n"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "(Optional) Supported values: ``ACCESS_POLICY`` or ``GLOBAL_POLICY``\n"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "description": "(Deprecated)\n",
                        "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                    },
                    "zpnCbiProfileId": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    },
                    "zpnIsolationProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/policyAccessTimeOutRule:PolicyAccessTimeOutRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessTimeOutRuleCondition:PolicyAccessTimeOutRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string"
                },
                "reauthTimeout": {
                    "type": "string"
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "required": [
                "microtenantId",
                "name",
                "operator",
                "policySetId",
                "policyType",
                "priority",
                "ruleOrder",
                "zpnCbiProfileId",
                "zpnInspectionProfileId",
                "zpnIsolationProfileId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "This is for providing the rule action.\n"
                },
                "actionId": {
                    "type": "string",
                    "description": "This field defines the description of the server.\n"
                },
                "bypassDefaultRule": {
                    "type": "boolean"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/PolicyAccessTimeOutRuleCondition:PolicyAccessTimeOutRuleCondition"
                    },
                    "description": "This is for proviidng the set of conditions for the policy.\n"
                },
                "customMsg": {
                    "type": "string",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "This is for providing a customer message for the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the access policy.\n"
                },
                "lssDefaultRule": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the policy.\n"
                },
                "operator": {
                    "type": "string"
                },
                "policySetId": {
                    "type": "string"
                },
                "policyType": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "reauthDefaultRule": {
                    "type": "boolean"
                },
                "reauthIdleTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "reauthTimeout": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ruleOrder": {
                    "type": "string",
                    "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                },
                "zpnCbiProfileId": {
                    "type": "string"
                },
                "zpnInspectionProfileId": {
                    "type": "string"
                },
                "zpnIsolationProfileId": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyAccessTimeOutRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "This is for providing the rule action.\n"
                    },
                    "actionId": {
                        "type": "string",
                        "description": "This field defines the description of the server.\n"
                    },
                    "bypassDefaultRule": {
                        "type": "boolean"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/PolicyAccessTimeOutRuleCondition:PolicyAccessTimeOutRuleCondition"
                        },
                        "description": "This is for proviidng the set of conditions for the policy.\n"
                    },
                    "customMsg": {
                        "type": "string",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "This is for providing a customer message for the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "This is the description of the access policy.\n"
                    },
                    "lssDefaultRule": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is the name of the policy.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "policySetId": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "reauthDefaultRule": {
                        "type": "boolean"
                    },
                    "reauthIdleTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "reauthTimeout": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ruleOrder": {
                        "type": "string",
                        "deprecationMessage": "The `rule_order` field is now deprecated for all zpa access policy resources in favor of the resource `zpa.PolicyAccessReorderRule`"
                    },
                    "zpnCbiProfileId": {
                        "type": "string"
                    },
                    "zpnInspectionProfileId": {
                        "type": "string"
                    },
                    "zpnIsolationProfileId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/provisioningKey:ProvisioningKey": {
            "description": "\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nProvisioning key can be imported by using `\u003cPROVISIONING KEY ID\u003e` or `\u003cPROVISIONING KEY NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/provisioningKey:ProvisioningKey example \u003cprovisioning_key_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/provisioningKey:ProvisioningKey example \u003cprovisioning_key_name\u003e\n```\n\n",
            "properties": {
                "ProvisioningKeyValue": {
                    "type": "string",
                    "description": "read only field. Ignored in PUT/POST calls.\n",
                    "secret": true
                },
                "appConnectorGroupId": {
                    "type": "string"
                },
                "appConnectorGroupName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                },
                "associationType": {
                    "type": "string",
                    "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                },
                "enrollmentCertId": {
                    "type": "string",
                    "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                },
                "ipAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxUsage": {
                    "type": "string",
                    "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the provisioning key.\n"
                },
                "uiConfig": {
                    "type": "string"
                },
                "usageCount": {
                    "type": "string",
                    "description": "The provisioning key utilization count.\n"
                },
                "zcomponentId": {
                    "type": "string",
                    "description": "ID of the existing App Connector or Service Edge Group.\n"
                },
                "zcomponentName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                }
            },
            "required": [
                "appConnectorGroupName",
                "associationType",
                "enrollmentCertId",
                "maxUsage",
                "name",
                "ProvisioningKeyValue",
                "usageCount",
                "zcomponentId",
                "zcomponentName"
            ],
            "inputProperties": {
                "appConnectorGroupId": {
                    "type": "string"
                },
                "associationType": {
                    "type": "string",
                    "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                },
                "enrollmentCertId": {
                    "type": "string",
                    "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                },
                "ipAcls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxUsage": {
                    "type": "string",
                    "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the provisioning key.\n"
                },
                "uiConfig": {
                    "type": "string"
                },
                "usageCount": {
                    "type": "string",
                    "description": "The provisioning key utilization count.\n"
                },
                "zcomponentId": {
                    "type": "string",
                    "description": "ID of the existing App Connector or Service Edge Group.\n"
                },
                "zcomponentName": {
                    "type": "string",
                    "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                }
            },
            "requiredInputs": [
                "associationType",
                "enrollmentCertId",
                "maxUsage",
                "zcomponentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProvisioningKey resources.\n",
                "properties": {
                    "ProvisioningKeyValue": {
                        "type": "string",
                        "description": "read only field. Ignored in PUT/POST calls.\n",
                        "secret": true
                    },
                    "appConnectorGroupId": {
                        "type": "string"
                    },
                    "appConnectorGroupName": {
                        "type": "string",
                        "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    },
                    "associationType": {
                        "type": "string",
                        "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the provisioning key is enabled or not. Supported values: true, false\n"
                    },
                    "enrollmentCertId": {
                        "type": "string",
                        "description": "ID of the enrollment certificate that can be used for this provisioning key. `ID` of the existing enrollment certificate that has the private key\n"
                    },
                    "ipAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "maxUsage": {
                        "type": "string",
                        "description": "The maximum number of instances where this provisioning key can be used for enrolling an App Connector or Service Edge.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the provisioning key.\n"
                    },
                    "uiConfig": {
                        "type": "string"
                    },
                    "usageCount": {
                        "type": "string",
                        "description": "The provisioning key utilization count.\n"
                    },
                    "zcomponentId": {
                        "type": "string",
                        "description": "ID of the existing App Connector or Service Edge Group.\n"
                    },
                    "zcomponentName": {
                        "type": "string",
                        "description": "Read only property. Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/segmentGroup:SegmentGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Segment Group resource\nconst testSegmentGroup = new zpa.SegmentGroup(\"testSegmentGroup\", {\n    description: \"test1-segment-group\",\n    enabled: true,\n    tcpKeepAliveEnabled: \"1\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Segment Group resource\ntest_segment_group = zpa.SegmentGroup(\"testSegmentGroup\",\n    description=\"test1-segment-group\",\n    enabled=True,\n    tcp_keep_alive_enabled=\"1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Segment Group resource\n    var testSegmentGroup = new Zpa.SegmentGroup(\"testSegmentGroup\", new()\n    {\n        Description = \"test1-segment-group\",\n        Enabled = true,\n        TcpKeepAliveEnabled = \"1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Segment Group resource\n\t\t_, err := zpa.NewSegmentGroup(ctx, \"testSegmentGroup\", \u0026zpa.SegmentGroupArgs{\n\t\t\tDescription:         pulumi.String(\"test1-segment-group\"),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tTcpKeepAliveEnabled: pulumi.String(\"1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.SegmentGroup;\nimport com.pulumi.zpa.SegmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSegmentGroup = new SegmentGroup(\"testSegmentGroup\", SegmentGroupArgs.builder()        \n            .description(\"test1-segment-group\")\n            .enabled(true)\n            .tcpKeepAliveEnabled(\"1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Segment Group resource\n  testSegmentGroup:\n    type: zpa:SegmentGroup\n    properties:\n      description: test1-segment-group\n      enabled: true\n      tcpKeepAliveEnabled: '1'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**segment_group** can be imported by using `\u003cSEGMENT GROUP ID\u003e` or `\u003cSEGMENT GROUP NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/segmentGroup:SegmentGroup example \u003csegment_group_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/segmentGroup:SegmentGroup example \u003csegment_group_name\u003e\n```\n\n",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/SegmentGroupApplication:SegmentGroupApplication"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the segment group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this segment group is enabled or not.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the segment group.\n"
                },
                "policyMigrated": {
                    "type": "boolean",
                    "deprecationMessage": "The `policy_migrated` field is now deprecated for the resource `zpa.SegmentGroup`, please remove this attribute to prevent configuration drifts"
                },
                "tcpKeepAliveEnabled": {
                    "type": "string",
                    "description": "(Deprecated)\n",
                    "deprecationMessage": "The `tcp_keep_alive_enabled` field is now deprecated for the resource `zpa.SegmentGroup`, please replace all uses of this within the `zpa.ApplicationSegment`resources with the attribute `tcp_keep_alive`"
                }
            },
            "required": [
                "applications",
                "microtenantId",
                "name"
            ],
            "inputProperties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/SegmentGroupApplication:SegmentGroupApplication"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) Description of the segment group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) Whether this segment group is enabled or not.\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Required) Name of the segment group.\n"
                },
                "policyMigrated": {
                    "type": "boolean",
                    "deprecationMessage": "The `policy_migrated` field is now deprecated for the resource `zpa.SegmentGroup`, please remove this attribute to prevent configuration drifts"
                },
                "tcpKeepAliveEnabled": {
                    "type": "string",
                    "description": "(Deprecated)\n",
                    "deprecationMessage": "The `tcp_keep_alive_enabled` field is now deprecated for the resource `zpa.SegmentGroup`, please replace all uses of this within the `zpa.ApplicationSegment`resources with the attribute `tcp_keep_alive`"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SegmentGroup resources.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/SegmentGroupApplication:SegmentGroupApplication"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Description of the segment group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) Whether this segment group is enabled or not.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the segment group.\n"
                    },
                    "policyMigrated": {
                        "type": "boolean",
                        "deprecationMessage": "The `policy_migrated` field is now deprecated for the resource `zpa.SegmentGroup`, please remove this attribute to prevent configuration drifts"
                    },
                    "tcpKeepAliveEnabled": {
                        "type": "string",
                        "description": "(Deprecated)\n",
                        "deprecationMessage": "The `tcp_keep_alive_enabled` field is now deprecated for the resource `zpa.SegmentGroup`, please replace all uses of this within the `zpa.ApplicationSegment`resources with the attribute `tcp_keep_alive`"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/serverGroup:ServerGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// Create a App Connector Group\nconst exampleConnectorGroup = new zpa.ConnectorGroup(\"exampleConnectorGroup\", {\n    description: \"Example\",\n    enabled: true,\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    latitude: \"37.338\",\n    longitude: \"-121.8863\",\n    location: \"San Jose, CA, US\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    overrideVersionProfile: true,\n    versionProfileId: \"0\",\n    dnsQueryType: \"IPV4\",\n});\n// Create a Server Group resource with Dynamic Discovery Enabled\nconst exampleServerGroup = new zpa.ServerGroup(\"exampleServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: true,\n    appConnectorGroups: [{\n        ids: [exampleConnectorGroup.id],\n    }],\n}, {\n    dependsOn: [exampleConnectorGroup],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create a App Connector Group\nexample_connector_group = zpa.ConnectorGroup(\"exampleConnectorGroup\",\n    description=\"Example\",\n    enabled=True,\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    latitude=\"37.338\",\n    longitude=\"-121.8863\",\n    location=\"San Jose, CA, US\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    override_version_profile=True,\n    version_profile_id=\"0\",\n    dns_query_type=\"IPV4\")\n# Create a Server Group resource with Dynamic Discovery Enabled\nexample_server_group = zpa.ServerGroup(\"exampleServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=True,\n    app_connector_groups=[zpa.ServerGroupAppConnectorGroupArgs(\n        ids=[example_connector_group.id],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[example_connector_group]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a App Connector Group\n    var exampleConnectorGroup = new Zpa.ConnectorGroup(\"exampleConnectorGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Latitude = \"37.338\",\n        Longitude = \"-121.8863\",\n        Location = \"San Jose, CA, US\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        OverrideVersionProfile = true,\n        VersionProfileId = \"0\",\n        DnsQueryType = \"IPV4\",\n    });\n\n    // Create a Server Group resource with Dynamic Discovery Enabled\n    var exampleServerGroup = new Zpa.ServerGroup(\"exampleServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = true,\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleConnectorGroup.Id,\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleConnectorGroup,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a App Connector Group\n\t\texampleConnectorGroup, err := zpa.NewConnectorGroup(ctx, \"exampleConnectorGroup\", \u0026zpa.ConnectorGroupArgs{\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tVersionProfileId:       pulumi.String(\"0\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a Server Group resource with Dynamic Discovery Enabled\n\t\t_, err = zpa.NewServerGroup(ctx, \"exampleServerGroup\", \u0026zpa.ServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(true),\n\t\t\tAppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleConnectorGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleConnectorGroup,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ConnectorGroup;\nimport com.pulumi.zpa.ConnectorGroupArgs;\nimport com.pulumi.zpa.ServerGroup;\nimport com.pulumi.zpa.ServerGroupArgs;\nimport com.pulumi.zpa.inputs.ServerGroupAppConnectorGroupArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleConnectorGroup = new ConnectorGroup(\"exampleConnectorGroup\", ConnectorGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .latitude(\"37.338\")\n            .longitude(\"-121.8863\")\n            .location(\"San Jose, CA, US\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .overrideVersionProfile(true)\n            .versionProfileId(0)\n            .dnsQueryType(\"IPV4\")\n            .build());\n\n        var exampleServerGroup = new ServerGroup(\"exampleServerGroup\", ServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(true)\n            .appConnectorGroups(ServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleConnectorGroup.id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(exampleConnectorGroup)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Server Group resource with Dynamic Discovery Enabled\n  exampleServerGroup:\n    type: zpa:ServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: true\n      appConnectorGroups:\n        - ids:\n            - ${exampleConnectorGroup.id}\n    options:\n      dependson:\n        - ${exampleConnectorGroup}\n  # Create a App Connector Group\n  exampleConnectorGroup:\n    type: zpa:ConnectorGroup\n    properties:\n      description: Example\n      enabled: true\n      cityCountry: San Jose, CA\n      countryCode: US\n      latitude: '37.338'\n      longitude: '-121.8863'\n      location: San Jose, CA, US\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      overrideVersionProfile: true\n      versionProfileId: 0\n      dnsQueryType: IPV4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// Create an application server\nconst exampleApplicationServer = new zpa.ApplicationServer(\"exampleApplicationServer\", {\n    description: \"Example\",\n    address: \"server.example.com\",\n    enabled: true,\n});\n// Create a App Connector Group\nconst exampleConnectorGroup = new zpa.ConnectorGroup(\"exampleConnectorGroup\", {\n    description: \"Example\",\n    enabled: true,\n    cityCountry: \"San Jose, CA\",\n    countryCode: \"US\",\n    latitude: \"37.338\",\n    longitude: \"-121.8863\",\n    location: \"San Jose, CA, US\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    overrideVersionProfile: true,\n    versionProfileId: \"0\",\n    dnsQueryType: \"IPV4\",\n});\n// ZPA Server Group resource with Dynamic Discovery Disabled\nconst exampleServerGroup = new zpa.ServerGroup(\"exampleServerGroup\", {\n    description: \"Example\",\n    enabled: true,\n    dynamicDiscovery: false,\n    servers: [{\n        ids: [exampleApplicationServer.id],\n    }],\n    appConnectorGroups: [{\n        ids: [exampleConnectorGroup.id],\n    }],\n}, {\n    dependsOn: [\n        exampleConnectorGroup,\n        zpa_application_server.server,\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# Create an application server\nexample_application_server = zpa.ApplicationServer(\"exampleApplicationServer\",\n    description=\"Example\",\n    address=\"server.example.com\",\n    enabled=True)\n# Create a App Connector Group\nexample_connector_group = zpa.ConnectorGroup(\"exampleConnectorGroup\",\n    description=\"Example\",\n    enabled=True,\n    city_country=\"San Jose, CA\",\n    country_code=\"US\",\n    latitude=\"37.338\",\n    longitude=\"-121.8863\",\n    location=\"San Jose, CA, US\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    override_version_profile=True,\n    version_profile_id=\"0\",\n    dns_query_type=\"IPV4\")\n# ZPA Server Group resource with Dynamic Discovery Disabled\nexample_server_group = zpa.ServerGroup(\"exampleServerGroup\",\n    description=\"Example\",\n    enabled=True,\n    dynamic_discovery=False,\n    servers=[zpa.ServerGroupServerArgs(\n        ids=[example_application_server.id],\n    )],\n    app_connector_groups=[zpa.ServerGroupAppConnectorGroupArgs(\n        ids=[example_connector_group.id],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[\n            example_connector_group,\n            zpa_application_server[\"server\"],\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an application server\n    var exampleApplicationServer = new Zpa.ApplicationServer(\"exampleApplicationServer\", new()\n    {\n        Description = \"Example\",\n        Address = \"server.example.com\",\n        Enabled = true,\n    });\n\n    // Create a App Connector Group\n    var exampleConnectorGroup = new Zpa.ConnectorGroup(\"exampleConnectorGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        CityCountry = \"San Jose, CA\",\n        CountryCode = \"US\",\n        Latitude = \"37.338\",\n        Longitude = \"-121.8863\",\n        Location = \"San Jose, CA, US\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        OverrideVersionProfile = true,\n        VersionProfileId = \"0\",\n        DnsQueryType = \"IPV4\",\n    });\n\n    // ZPA Server Group resource with Dynamic Discovery Disabled\n    var exampleServerGroup = new Zpa.ServerGroup(\"exampleServerGroup\", new()\n    {\n        Description = \"Example\",\n        Enabled = true,\n        DynamicDiscovery = false,\n        Servers = new[]\n        {\n            new Zpa.Inputs.ServerGroupServerArgs\n            {\n                Ids = new[]\n                {\n                    exampleApplicationServer.Id,\n                },\n            },\n        },\n        AppConnectorGroups = new[]\n        {\n            new Zpa.Inputs.ServerGroupAppConnectorGroupArgs\n            {\n                Ids = new[]\n                {\n                    exampleConnectorGroup.Id,\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleConnectorGroup,\n            zpa_application_server.Server,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create an application server\n\t\texampleApplicationServer, err := zpa.NewApplicationServer(ctx, \"exampleApplicationServer\", \u0026zpa.ApplicationServerArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tAddress:     pulumi.String(\"server.example.com\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a App Connector Group\n\t\texampleConnectorGroup, err := zpa.NewConnectorGroup(ctx, \"exampleConnectorGroup\", \u0026zpa.ConnectorGroupArgs{\n\t\t\tDescription:            pulumi.String(\"Example\"),\n\t\t\tEnabled:                pulumi.Bool(true),\n\t\t\tCityCountry:            pulumi.String(\"San Jose, CA\"),\n\t\t\tCountryCode:            pulumi.String(\"US\"),\n\t\t\tLatitude:               pulumi.String(\"37.338\"),\n\t\t\tLongitude:              pulumi.String(\"-121.8863\"),\n\t\t\tLocation:               pulumi.String(\"San Jose, CA, US\"),\n\t\t\tUpgradeDay:             pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:      pulumi.String(\"66600\"),\n\t\t\tOverrideVersionProfile: pulumi.Bool(true),\n\t\t\tVersionProfileId:       pulumi.String(\"0\"),\n\t\t\tDnsQueryType:           pulumi.String(\"IPV4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZPA Server Group resource with Dynamic Discovery Disabled\n\t\t_, err = zpa.NewServerGroup(ctx, \"exampleServerGroup\", \u0026zpa.ServerGroupArgs{\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\tDynamicDiscovery: pulumi.Bool(false),\n\t\t\tServers: zpa.ServerGroupServerArray{\n\t\t\t\t\u0026zpa.ServerGroupServerArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleApplicationServer.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAppConnectorGroups: zpa.ServerGroupAppConnectorGroupArray{\n\t\t\t\t\u0026zpa.ServerGroupAppConnectorGroupArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\texampleConnectorGroup.ID(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleConnectorGroup,\n\t\t\tzpa_application_server.Server,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ApplicationServer;\nimport com.pulumi.zpa.ApplicationServerArgs;\nimport com.pulumi.zpa.ConnectorGroup;\nimport com.pulumi.zpa.ConnectorGroupArgs;\nimport com.pulumi.zpa.ServerGroup;\nimport com.pulumi.zpa.ServerGroupArgs;\nimport com.pulumi.zpa.inputs.ServerGroupServerArgs;\nimport com.pulumi.zpa.inputs.ServerGroupAppConnectorGroupArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplicationServer = new ApplicationServer(\"exampleApplicationServer\", ApplicationServerArgs.builder()        \n            .description(\"Example\")\n            .address(\"server.example.com\")\n            .enabled(true)\n            .build());\n\n        var exampleConnectorGroup = new ConnectorGroup(\"exampleConnectorGroup\", ConnectorGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .cityCountry(\"San Jose, CA\")\n            .countryCode(\"US\")\n            .latitude(\"37.338\")\n            .longitude(\"-121.8863\")\n            .location(\"San Jose, CA, US\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .overrideVersionProfile(true)\n            .versionProfileId(0)\n            .dnsQueryType(\"IPV4\")\n            .build());\n\n        var exampleServerGroup = new ServerGroup(\"exampleServerGroup\", ServerGroupArgs.builder()        \n            .description(\"Example\")\n            .enabled(true)\n            .dynamicDiscovery(false)\n            .servers(ServerGroupServerArgs.builder()\n                .ids(exampleApplicationServer.id())\n                .build())\n            .appConnectorGroups(ServerGroupAppConnectorGroupArgs.builder()\n                .ids(exampleConnectorGroup.id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    exampleConnectorGroup,\n                    zpa_application_server.server())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Server Group resource with Dynamic Discovery Disabled\n  exampleServerGroup:\n    type: zpa:ServerGroup\n    properties:\n      description: Example\n      enabled: true\n      dynamicDiscovery: false\n      servers:\n        - ids:\n            - ${exampleApplicationServer.id}\n      appConnectorGroups:\n        - ids:\n            - ${exampleConnectorGroup.id}\n    options:\n      dependson:\n        - ${exampleConnectorGroup}\n        - ${zpa_application_server.server}\n  # Create an application server\n  exampleApplicationServer:\n    type: zpa:ApplicationServer\n    properties:\n      description: Example\n      address: server.example.com\n      enabled: true\n  # Create a App Connector Group\n  exampleConnectorGroup:\n    type: zpa:ConnectorGroup\n    properties:\n      description: Example\n      enabled: true\n      cityCountry: San Jose, CA\n      countryCode: US\n      latitude: '37.338'\n      longitude: '-121.8863'\n      location: San Jose, CA, US\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      overrideVersionProfile: true\n      versionProfileId: 0\n      dnsQueryType: IPV4\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Required\n\n* `name` - (Required) This field defines the name of the server group.\n* `app_connector_groups` - (Required)\n  * `id` - (Required) The ID of this resource.\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nServer Groups can be imported; use `\u003cSERVER GROUP ID\u003e` or `\u003cSERVER GROUP NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/serverGroup:ServerGroup example \u003cserver_group_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/serverGroup:ServerGroup example \u003cserver_group_name\u003e\n```\n\n",
            "properties": {
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupAppConnectorGroup:ServerGroupAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupApplication:ServerGroupApplication"
                    },
                    "description": "This field is a json array of app-connector-id only.\n"
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field is the description of the server group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupServer:ServerGroupServer"
                    },
                    "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                }
            },
            "required": [
                "appConnectorGroups",
                "applications",
                "microtenantId",
                "name",
                "servers"
            ],
            "inputProperties": {
                "appConnectorGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupAppConnectorGroup:ServerGroupAppConnectorGroup"
                    },
                    "description": "List of app-connector IDs.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupApplication:ServerGroupApplication"
                    },
                    "description": "This field is a json array of app-connector-id only.\n"
                },
                "configSpace": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "(Optional) This field is the description of the server group.\n"
                },
                "dynamicDiscovery": {
                    "type": "boolean",
                    "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                },
                "ipAnchored": {
                    "type": "boolean"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This field defines the name of the server group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServerGroupServer:ServerGroupServer"
                    },
                    "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerGroup resources.\n",
                "properties": {
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ServerGroupAppConnectorGroup:ServerGroupAppConnectorGroup"
                        },
                        "description": "List of app-connector IDs.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ServerGroupApplication:ServerGroupApplication"
                        },
                        "description": "This field is a json array of app-connector-id only.\n"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) This field is the description of the server group.\n"
                    },
                    "dynamicDiscovery": {
                        "type": "boolean",
                        "description": "(Optional) This field controls dynamic discovery of the servers.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Optional) This field defines if the server group is enabled or disabled.\n"
                    },
                    "ipAnchored": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(Optional) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ServerGroupServer:ServerGroupServer"
                        },
                        "description": "(Block List) This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required only in cases where the new servers need to be created in this API.\n"
                    }
                },
                "type": "object"
            }
        },
        "zpa:index/serviceEdgeGroup:ServiceEdgeGroup": {
            "description": "The **zpa_service_edge_group** resource creates a service edge group in the Zscaler Private Access cloud. This resource can then be referenced in a service edge connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Service Edge Group resource - Trusted Network\nconst serviceEdgeGroupSjc = new zpa.ServiceEdgeGroup(\"serviceEdgeGroupSjc\", {\n    description: \"Service Edge Group in San Jose\",\n    enabled: true,\n    isPublic: true,\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    latitude: \"37.3382082\",\n    longitude: \"-121.8863286\",\n    location: \"San Jose, CA, USA\",\n    versionProfileName: \"New Release\",\n    trustedNetworks: [{\n        ids: [data.zpa_trusted_network.example.id],\n    }],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Service Edge Group resource - Trusted Network\nservice_edge_group_sjc = zpa.ServiceEdgeGroup(\"serviceEdgeGroupSjc\",\n    description=\"Service Edge Group in San Jose\",\n    enabled=True,\n    is_public=True,\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    latitude=\"37.3382082\",\n    longitude=\"-121.8863286\",\n    location=\"San Jose, CA, USA\",\n    version_profile_name=\"New Release\",\n    trusted_networks=[zpa.ServiceEdgeGroupTrustedNetworkArgs(\n        ids=[data[\"zpa_trusted_network\"][\"example\"][\"id\"]],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Service Edge Group resource - Trusted Network\n    var serviceEdgeGroupSjc = new Zpa.ServiceEdgeGroup(\"serviceEdgeGroupSjc\", new()\n    {\n        Description = \"Service Edge Group in San Jose\",\n        Enabled = true,\n        IsPublic = true,\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        Latitude = \"37.3382082\",\n        Longitude = \"-121.8863286\",\n        Location = \"San Jose, CA, USA\",\n        VersionProfileName = \"New Release\",\n        TrustedNetworks = new[]\n        {\n            new Zpa.Inputs.ServiceEdgeGroupTrustedNetworkArgs\n            {\n                Ids = new[]\n                {\n                    data.Zpa_trusted_network.Example.Id,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Service Edge Group resource - Trusted Network\n\t\t_, err := zpa.NewServiceEdgeGroup(ctx, \"serviceEdgeGroupSjc\", \u0026zpa.ServiceEdgeGroupArgs{\n\t\t\tDescription:        pulumi.String(\"Service Edge Group in San Jose\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tIsPublic:           pulumi.Bool(true),\n\t\t\tUpgradeDay:         pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:  pulumi.String(\"66600\"),\n\t\t\tLatitude:           pulumi.String(\"37.3382082\"),\n\t\t\tLongitude:          pulumi.String(\"-121.8863286\"),\n\t\t\tLocation:           pulumi.String(\"San Jose, CA, USA\"),\n\t\t\tVersionProfileName: pulumi.String(\"New Release\"),\n\t\t\tTrustedNetworks: zpa.ServiceEdgeGroupTrustedNetworkArray{\n\t\t\t\t\u0026zpa.ServiceEdgeGroupTrustedNetworkArgs{\n\t\t\t\t\tIds: pulumi.StringArray{\n\t\t\t\t\t\tdata.Zpa_trusted_network.Example.Id,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ServiceEdgeGroup;\nimport com.pulumi.zpa.ServiceEdgeGroupArgs;\nimport com.pulumi.zpa.inputs.ServiceEdgeGroupTrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceEdgeGroupSjc = new ServiceEdgeGroup(\"serviceEdgeGroupSjc\", ServiceEdgeGroupArgs.builder()        \n            .description(\"Service Edge Group in San Jose\")\n            .enabled(true)\n            .isPublic(true)\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .latitude(\"37.3382082\")\n            .longitude(\"-121.8863286\")\n            .location(\"San Jose, CA, USA\")\n            .versionProfileName(\"New Release\")\n            .trustedNetworks(ServiceEdgeGroupTrustedNetworkArgs.builder()\n                .ids(data.zpa_trusted_network().example().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Service Edge Group resource - Trusted Network\n  serviceEdgeGroupSjc:\n    type: zpa:ServiceEdgeGroup\n    properties:\n      description: Service Edge Group in San Jose\n      enabled: true\n      isPublic: true\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      latitude: '37.3382082'\n      longitude: '-121.8863286'\n      location: San Jose, CA, USA\n      versionProfileName: New Release\n      trustedNetworks:\n        - ids:\n            - ${data.zpa_trusted_network.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@bdzscaler/pulumi-zpa\";\n\n// ZPA Service Edge Group resource - No Trusted Network\nconst serviceEdgeGroupNyc = new zpa.ServiceEdgeGroup(\"serviceEdgeGroupNyc\", {\n    description: \"Service Edge Group in New York\",\n    enabled: true,\n    isPublic: true,\n    latitude: \"40.7128\",\n    location: \"New York, NY, USA\",\n    longitude: \"-73.935242\",\n    upgradeDay: \"SUNDAY\",\n    upgradeTimeInSecs: \"66600\",\n    versionProfileName: \"New Release\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zpa as zpa\n\n# ZPA Service Edge Group resource - No Trusted Network\nservice_edge_group_nyc = zpa.ServiceEdgeGroup(\"serviceEdgeGroupNyc\",\n    description=\"Service Edge Group in New York\",\n    enabled=True,\n    is_public=True,\n    latitude=\"40.7128\",\n    location=\"New York, NY, USA\",\n    longitude=\"-73.935242\",\n    upgrade_day=\"SUNDAY\",\n    upgrade_time_in_secs=\"66600\",\n    version_profile_name=\"New Release\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Zscaler.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZPA Service Edge Group resource - No Trusted Network\n    var serviceEdgeGroupNyc = new Zpa.ServiceEdgeGroup(\"serviceEdgeGroupNyc\", new()\n    {\n        Description = \"Service Edge Group in New York\",\n        Enabled = true,\n        IsPublic = true,\n        Latitude = \"40.7128\",\n        Location = \"New York, NY, USA\",\n        Longitude = \"-73.935242\",\n        UpgradeDay = \"SUNDAY\",\n        UpgradeTimeInSecs = \"66600\",\n        VersionProfileName = \"New Release\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZPA Service Edge Group resource - No Trusted Network\n\t\t_, err := zpa.NewServiceEdgeGroup(ctx, \"serviceEdgeGroupNyc\", \u0026zpa.ServiceEdgeGroupArgs{\n\t\t\tDescription:        pulumi.String(\"Service Edge Group in New York\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tIsPublic:           pulumi.Bool(true),\n\t\t\tLatitude:           pulumi.String(\"40.7128\"),\n\t\t\tLocation:           pulumi.String(\"New York, NY, USA\"),\n\t\t\tLongitude:          pulumi.String(\"-73.935242\"),\n\t\t\tUpgradeDay:         pulumi.String(\"SUNDAY\"),\n\t\t\tUpgradeTimeInSecs:  pulumi.String(\"66600\"),\n\t\t\tVersionProfileName: pulumi.String(\"New Release\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ServiceEdgeGroup;\nimport com.pulumi.zpa.ServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceEdgeGroupNyc = new ServiceEdgeGroup(\"serviceEdgeGroupNyc\", ServiceEdgeGroupArgs.builder()        \n            .description(\"Service Edge Group in New York\")\n            .enabled(true)\n            .isPublic(true)\n            .latitude(\"40.7128\")\n            .location(\"New York, NY, USA\")\n            .longitude(\"-73.935242\")\n            .upgradeDay(\"SUNDAY\")\n            .upgradeTimeInSecs(\"66600\")\n            .versionProfileName(\"New Release\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZPA Service Edge Group resource - No Trusted Network\n  serviceEdgeGroupNyc:\n    type: zpa:ServiceEdgeGroup\n    properties:\n      description: Service Edge Group in New York\n      enabled: true\n      isPublic: true\n      latitude: '40.7128'\n      location: New York, NY, USA\n      longitude: '-73.935242'\n      upgradeDay: SUNDAY\n      upgradeTimeInSecs: '66600'\n      versionProfileName: New Release\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZPA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nService Edge Group can be imported; use `\u003cSERVER EDGE GROUP ID\u003e` or `\u003cSERVER EDGE GROUP NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zpa:index/serviceEdgeGroup:ServiceEdgeGroup example \u003cservice_edge_group_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zpa:index/serviceEdgeGroup:ServiceEdgeGroup example \u003cservice_edge_group_name\u003e\n```\n\n",
            "properties": {
                "cityCountry": {
                    "type": "string",
                    "description": "This field controls dynamic discovery of the servers.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "This field is an array of app-connector-id only.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Edge Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Enable or disable public access for the Service Edge Group. Default value: `false` Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location for the Service Edge Group.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Edge Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "serviceEdges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServiceEdgeGroupServiceEdge:ServiceEdgeGroupServiceEdge"
                    }
                },
                "trustedNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServiceEdgeGroupTrustedNetwork:ServiceEdgeGroupTrustedNetwork"
                    },
                    "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                },
                "versionProfileVisibilityScope": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                }
            },
            "required": [
                "cityCountry",
                "countryCode",
                "latitude",
                "location",
                "longitude",
                "microtenantId",
                "name",
                "serviceEdges",
                "trustedNetworks",
                "versionProfileId",
                "versionProfileName",
                "versionProfileVisibilityScope"
            ],
            "inputProperties": {
                "cityCountry": {
                    "type": "string",
                    "description": "This field controls dynamic discovery of the servers.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "This field is an array of app-connector-id only.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Edge Group.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Enable or disable public access for the Service Edge Group. Default value: `false` Supported values: `true`, `false`\n"
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location for the Service Edge Group.\n"
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                },
                "microtenantId": {
                    "type": "string",
                    "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Edge Group.\n"
                },
                "overrideVersionProfile": {
                    "type": "boolean",
                    "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                },
                "serviceEdges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServiceEdgeGroupServiceEdge:ServiceEdgeGroupServiceEdge"
                    }
                },
                "trustedNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zpa:index/ServiceEdgeGroupTrustedNetwork:ServiceEdgeGroupTrustedNetwork"
                    },
                    "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                },
                "upgradeDay": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                },
                "upgradeTimeInSecs": {
                    "type": "string",
                    "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                },
                "versionProfileId": {
                    "type": "string",
                    "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                },
                "versionProfileName": {
                    "type": "string",
                    "description": "ID of the version profile.\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "location",
                "longitude"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceEdgeGroup resources.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "This field controls dynamic discovery of the servers.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "This field is an array of app-connector-id only.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Edge Group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this Service Edge Group is enabled or not. Default value: `true` Supported values: `true`, `false`\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Enable or disable public access for the Service Edge Group. Default value: `false` Supported values: `true`, `false`\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "Latitude for the Service Edge Group. Integer or decimal with values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location for the Service Edge Group.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "Longitude for the Service Edge Group. Integer or decimal with values in the range of `-180` to `180`\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "The ID of the microtenant the resource is to be associated with.\n\n⚠️ **WARNING:**: The attribute ``microtenant_id`` is optional and requires the microtenant license and feature flag enabled for the respective tenant. The provider also supports the microtenant ID configuration via the environment variable `ZPA_MICROTENANT_ID` which is the recommended method.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service Edge Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "serviceEdges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ServiceEdgeGroupServiceEdge:ServiceEdgeGroupServiceEdge"
                        }
                    },
                    "trustedNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/ServiceEdgeGroupTrustedNetwork:ServiceEdgeGroupTrustedNetwork"
                        },
                        "description": "Trusted networks for this Service Edge Group. List of trusted network objects\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified day. Default value: `SUNDAY` List of valid days (i.e., Sunday, Monday)\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "Service Edges in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600` Integer in seconds (i..e, 66600). The integer must be greater than or equal to 0 and less than `86400`, in `15` minute intervals\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "ID of the version profile. To learn more, see Version Profile Use Cases. Supported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "ID of the version profile.\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "ID of the version profile.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "zpa:index/getAppConnectorController:getAppConnectorController": {
            "description": "Use the **zpa_app_connector_controller** data source to get information about a app connector created in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getAppConnectorController({\n    name: \"AWS-VPC100-App-Connector\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_app_connector_controller(name=\"AWS-VPC100-App-Connector\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetAppConnectorController.Invoke(new()\n    {\n        Name = \"AWS-VPC100-App-Connector\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetAppConnectorController(ctx, \u0026zpa.GetAppConnectorControllerArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-VPC100-App-Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetAppConnectorControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getAppConnectorController(GetAppConnectorControllerArgs.builder()\n            .name(\"AWS-VPC100-App-Connector\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getAppConnectorController\n      Arguments:\n        name: AWS-VPC100-App-Connector\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetAppConnectorControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getAppConnectorController(GetAppConnectorControllerArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getAppConnectorController\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAppConnectorController.\n",
                "properties": {
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the App Connector Group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAppConnectorController.\n",
                "properties": {
                    "appConnectorGroupId": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "appConnectorGroupName": {
                        "type": "string",
                        "description": "(Computed) - Expected values: UNKNOWN/ZPN_STATUS_AUTHENTICATED(1)/ZPN_STATUS_DISCONNECTED\n"
                    },
                    "applicationStartTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlChannelStatus": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "ctrlBrokerName": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "currentVersion": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) - Description of the App Connector.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Computed) - Whether this App Connector is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "enrollmentCert": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed)\n"
                    },
                    "expectedUpgradeTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "expectedVersion": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAcl": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "issuedCertId": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "lastBrokerConnectTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "lastBrokerConnectTimeDuration": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "lastBrokerDisconnectTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "lastBrokerDisconnectTimeDuration": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "lastUpgradeTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(Computed) - Latitude of the App Connector. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(Computed) - Location of the App Connector.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(Computed) - Longitude of the App Connector. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platform": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "previousVersion": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "provisioningKeyId": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "provisioningKeyName": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "sargeVersion": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "upgradeAttempt": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "(Computed)\n"
                    }
                },
                "type": "object",
                "required": [
                    "appConnectorGroupId",
                    "appConnectorGroupName",
                    "applicationStartTime",
                    "controlChannelStatus",
                    "creationTime",
                    "ctrlBrokerName",
                    "currentVersion",
                    "description",
                    "enabled",
                    "enrollmentCert",
                    "expectedUpgradeTime",
                    "expectedVersion",
                    "fingerprint",
                    "id",
                    "ipAcl",
                    "issuedCertId",
                    "lastBrokerConnectTime",
                    "lastBrokerConnectTimeDuration",
                    "lastBrokerDisconnectTime",
                    "lastBrokerDisconnectTimeDuration",
                    "lastUpgradeTime",
                    "latitude",
                    "location",
                    "longitude",
                    "modifiedTime",
                    "modifiedby",
                    "platform",
                    "previousVersion",
                    "privateIp",
                    "provisioningKeyId",
                    "provisioningKeyName",
                    "publicIp",
                    "sargeVersion",
                    "upgradeAttempt",
                    "upgradeStatus"
                ]
            }
        },
        "zpa:index/getAppConnectorGroup:getAppConnectorGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getAppConnectorGroup({\n    name: \"DataCenter\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_app_connector_group(name=\"DataCenter\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetAppConnectorGroup.Invoke(new()\n    {\n        Name = \"DataCenter\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetAppConnectorGroup(ctx, \u0026zpa.GetAppConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"DataCenter\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetAppConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getAppConnectorGroup(GetAppConnectorGroupArgs.builder()\n            .name(\"DataCenter\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getAppConnectorGroup\n      Arguments:\n        name: DataCenter\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getAppConnectorGroup({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_app_connector_group(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetAppConnectorGroup.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetAppConnectorGroup(ctx, \u0026zpa.GetAppConnectorGroupArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetAppConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getAppConnectorGroup(GetAppConnectorGroupArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getAppConnectorGroup\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAppConnectorGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the App Connector Group.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the App Connector Group.\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAppConnectorGroup.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "(String) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "connectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getAppConnectorGroupConnector:getAppConnectorGroupConnector"
                        }
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Description of the App Connector Group.\n"
                    },
                    "dnsQueryType": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(String) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "geoLocationId": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(String) Latitude of the App Connector Group. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(String) Location of the App Connector Group.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(String) Longitude of the App Connector Group. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "lssAppConnectorGroup": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getAppConnectorGroupServerGroup:getAppConnectorGroupServerGroup"
                        }
                    },
                    "tcpQuickAckApp": {
                        "type": "boolean"
                    },
                    "tcpQuickAckAssistant": {
                        "type": "boolean"
                    },
                    "tcpQuickAckReadAssistant": {
                        "type": "boolean"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "(String) App Connectors in this group will attempt to update to a newer version of the software during this specified day\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "(String) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "useInDrMode": {
                        "type": "boolean",
                        "description": "(Optional) Supported values: `true`, `false`\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "(String) ID of the version profile.\nExported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "cityCountry",
                    "connectors",
                    "countryCode",
                    "creationTime",
                    "description",
                    "dnsQueryType",
                    "enabled",
                    "geoLocationId",
                    "latitude",
                    "location",
                    "longitude",
                    "lssAppConnectorGroup",
                    "modifiedTime",
                    "modifiedby",
                    "serverGroups",
                    "tcpQuickAckApp",
                    "tcpQuickAckAssistant",
                    "tcpQuickAckReadAssistant",
                    "upgradeDay",
                    "upgradeTimeInSecs",
                    "useInDrMode",
                    "versionProfileId",
                    "versionProfileName",
                    "versionProfileVisibilityScope"
                ]
            }
        },
        "zpa:index/getApplicationSegment:getApplicationSegment": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegment({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegment.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegment(ctx, \u0026zpa.LookupApplicationSegmentArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegment(GetApplicationSegmentArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegment\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegment({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegment.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegment(ctx, \u0026zpa.LookupApplicationSegmentArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegment(GetApplicationSegmentArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegment\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationSegment.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean",
                        "description": "Default: false. Boolean: `true`, `false`.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application.\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentTcpPortRange:getApplicationSegmentTcpPortRange"
                        }
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentUdpPortRange:getApplicationSegmentUdpPortRange"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationSegment.\n",
                "properties": {
                    "bypassType": {
                        "type": "string"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "defaultIdleTimeout": {
                        "type": "string"
                    },
                    "defaultMaxAge": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "doubleEncrypt": {
                        "type": "boolean"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "healthCheckType": {
                        "type": "string"
                    },
                    "healthReporting": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean"
                    },
                    "isCnameEnabled": {
                        "type": "boolean"
                    },
                    "isIncompleteDrConfig": {
                        "type": "boolean"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "microtenantName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean"
                    },
                    "segmentGroupId": {
                        "type": "string"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentServerGroup:getApplicationSegmentServerGroup"
                        }
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentTcpPortRange:getApplicationSegmentTcpPortRange"
                        }
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentUdpPortRange:getApplicationSegmentUdpPortRange"
                        }
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "useInDrMode": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "configSpace",
                    "creationTime",
                    "defaultIdleTimeout",
                    "defaultMaxAge",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "isIncompleteDrConfig",
                    "modifiedTime",
                    "modifiedby",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "selectConnectorCloseToApp",
                    "serverGroups",
                    "tcpPortRange",
                    "tcpPortRanges",
                    "udpPortRange",
                    "udpPortRanges",
                    "useInDrMode"
                ]
            }
        },
        "zpa:index/getApplicationSegmentBrowserAccess:getApplicationSegmentBrowserAccess": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getApplicationSegmentBrowserAccess({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_application_segment_browser_access(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetApplicationSegmentBrowserAccess.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentBrowserAccess(ctx, \u0026zpa.LookupApplicationSegmentBrowserAccessArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentBrowserAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getApplicationSegmentBrowserAccess(GetApplicationSegmentBrowserAccessArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentBrowserAccess\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getApplicationSegmentBrowserAccess({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_application_segment_browser_access(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetApplicationSegmentBrowserAccess.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentBrowserAccess(ctx, \u0026zpa.LookupApplicationSegmentBrowserAccessArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentBrowserAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getApplicationSegmentBrowserAccess(GetApplicationSegmentBrowserAccessArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentBrowserAccess\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationSegmentBrowserAccess.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the application server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server.\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessTcpPortRange:getApplicationSegmentBrowserAccessTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessUdpPortRange:getApplicationSegmentBrowserAccessUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationSegmentBrowserAccess.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications. Default: `NEVER`. Supported values: `ALWAYS`, `NEVER`, `ON_NET`. The value `NEVER` indicates the use of the client forwarding policy.\n"
                    },
                    "clientlessApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessClientlessApp:getApplicationSegmentBrowserAccessClientlessApp"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(string) Whether Double Encryption is enabled or disabled for the app. Default: false. Boolean: `true`, `false`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "healthCheckType": {
                        "type": "string"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors. Default: true. Boolean: `true`, `false`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "segmentGroupName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessServerGroup:getApplicationSegmentBrowserAccessServerGroup"
                        }
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessTcpPortRange:getApplicationSegmentBrowserAccessTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentBrowserAccessUdpPortRange:getApplicationSegmentBrowserAccessUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "clientlessApps",
                    "configSpace",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "serverGroups",
                    "tcpPortRange",
                    "tcpPortRanges",
                    "udpPortRange",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getApplicationSegmentInspection:getApplicationSegmentInspection": {
            "description": "Use the **zpa_application_segment_inspection** data source to get information about an inspection application segment in the Zscaler Private Access cloud. This resource can then be referenced in a ZPA access inspection policy. This resource supports ZPA Inspection for both `HTTP` and `HTTPS`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegmentInspection({\n    name: \"ZPA_Inspection_Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment_inspection(name=\"ZPA_Inspection_Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegmentInspection.Invoke(new()\n    {\n        Name = \"ZPA_Inspection_Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentInspection(ctx, \u0026zpa.LookupApplicationSegmentInspectionArgs{\n\t\t\tName: pulumi.StringRef(\"ZPA_Inspection_Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentInspectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegmentInspection(GetApplicationSegmentInspectionArgs.builder()\n            .name(\"ZPA_Inspection_Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentInspection\n      Arguments:\n        name: ZPA_Inspection_Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegmentInspection({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment_inspection(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegmentInspection.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentInspection(ctx, \u0026zpa.LookupApplicationSegmentInspectionArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentInspectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegmentInspection(GetApplicationSegmentInspectionArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentInspection\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationSegmentInspection.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Inspection Application Segment to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Inspection Application Segment to be exported.\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionTcpPortRange:getApplicationSegmentInspectionTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionUdpPortRange:getApplicationSegmentInspectionUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationSegmentInspection.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(bool) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string) Whether health reporting for the app is Continuous or On Access. Supported values: `NONE`, `ON_ACCESS`, `CONTINUOUS`.\n"
                    },
                    "icmpAccessType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "inspectionApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionInspectionApp:getApplicationSegmentInspectionInspectionApp"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `app_id:` - (string)\n* `name:` - (string) Name of the Inspection Application\n* `description:` - (string) Description of the Inspection Application\n* `domain:` - (string) Domain name of the inspection application\n"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(String) Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "selectConnectorCloseToApp": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionServerGroup:getApplicationSegmentInspectionServerGroup"
                        },
                        "description": "(string) List of Server Group IDs\n* `id:` - (string) List of Server Group IDs\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionTcpPortRange:getApplicationSegmentInspectionTcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentInspectionUdpPortRange:getApplicationSegmentInspectionUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "creationTime",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "icmpAccessType",
                    "inspectionApps",
                    "ipAnchored",
                    "isCnameEnabled",
                    "modifiedBy",
                    "modifiedTime",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "selectConnectorCloseToApp",
                    "serverGroups",
                    "tcpPortRange",
                    "tcpPortRanges",
                    "udpPortRange",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getApplicationSegmentPRA:getApplicationSegmentPRA": {
            "description": "Use the **zpa_application_segment_pra** data source to get information about an application segment for Privileged Remote Access in the Zscaler Private Access cloud. This resource can then be referenced in an access policy rule, access policy timeout rule, access policy client forwarding rule and inspection policy. This resource supports Privileged Remote Access for both `RDP` and `SSH`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegmentPRA({\n    name: \"PRA_Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment_pra(name=\"PRA_Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()\n    {\n        Name = \"PRA_Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentPRA(ctx, \u0026zpa.LookupApplicationSegmentPRAArgs{\n\t\t\tName: pulumi.StringRef(\"PRA_Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentPRAArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegmentPRA(GetApplicationSegmentPRAArgs.builder()\n            .name(\"PRA_Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentPRA\n      Arguments:\n        name: PRA_Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getApplicationSegmentPRA({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_application_segment_pra(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetApplicationSegmentPRA.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationSegmentPRA(ctx, \u0026zpa.LookupApplicationSegmentPRAArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentPRAArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getApplicationSegmentPRA(GetApplicationSegmentPRAArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getApplicationSegmentPRA\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationSegmentPRA.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PRA Application Segment to be exported.\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRATcpPortRange:getApplicationSegmentPRATcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRAUdpPortRange:getApplicationSegmentPRAUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationSegmentPRA.\n",
                "properties": {
                    "bypassType": {
                        "type": "string",
                        "description": "(string) Indicates whether users can bypass ZPA to access applications.\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the application.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) List of domains and IPs.\n"
                    },
                    "doubleEncrypt": {
                        "type": "boolean",
                        "description": "(bool) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this application is enabled or not\n"
                    },
                    "healthCheckType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "healthReporting": {
                        "type": "string",
                        "description": "(string) Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "isCnameEnabled": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the connectors.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passiveHealthEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "segmentGroupId": {
                        "type": "string",
                        "description": "(String) Segment Group IDs\n"
                    },
                    "segmentGroupName": {
                        "type": "string"
                    },
                    "serverGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRAServerGroup:getApplicationSegmentPRAServerGroup"
                        },
                        "description": "(string) List of Server Group IDs\n* `id:` - (string) List of Server Group IDs\n"
                    },
                    "sraApps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRASraApp:getApplicationSegmentPRASraApp"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `app_id:` - (string)\n* `name:` - (string) Name of the Privileged Remote Access\n* `description:` - (string) Description of the Privileged Remote Access\n* `domain:` - (string) Domain name of the Privileged Remote Access\n"
                    },
                    "tcpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRATcpPortRange:getApplicationSegmentPRATcpPortRange"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "tcpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) TCP port ranges used to access the app.\n"
                    },
                    "udpPortRange": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getApplicationSegmentPRAUdpPortRange:getApplicationSegmentPRAUdpPortRange"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n* `from:`\n* `to:`\n"
                    },
                    "udpPortRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) UDP port ranges used to access the app.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassType",
                    "configSpace",
                    "description",
                    "domainNames",
                    "doubleEncrypt",
                    "enabled",
                    "healthCheckType",
                    "healthReporting",
                    "ipAnchored",
                    "isCnameEnabled",
                    "passiveHealthEnabled",
                    "segmentGroupId",
                    "segmentGroupName",
                    "serverGroups",
                    "sraApps",
                    "tcpPortRange",
                    "tcpPortRanges",
                    "udpPortRange",
                    "udpPortRanges"
                ]
            }
        },
        "zpa:index/getApplicationServer:getApplicationServer": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getApplicationServer({\n    name: \"server.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_application_server(name=\"server.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetApplicationServer.Invoke(new()\n    {\n        Name = \"server.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationServer(ctx, \u0026zpa.LookupApplicationServerArgs{\n\t\t\tName: pulumi.StringRef(\"server.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getApplicationServer(GetApplicationServerArgs.builder()\n            .name(\"server.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getApplicationServer\n      Arguments:\n        name: server.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getApplicationServer({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_application_server(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetApplicationServer.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupApplicationServer(ctx, \u0026zpa.LookupApplicationServerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetApplicationServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getApplicationServer(GetApplicationServerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getApplicationServer\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationServer.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the application server.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the server.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationServer.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "(string) This field defines the domain or IP address of the server.\n"
                    },
                    "appServerGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Set of String) This field defines the list of server groups IDs.\n"
                    },
                    "configSpace": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) This field defines the description of the server.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) This field defines the status of the server.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "appServerGroupIds",
                    "configSpace",
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedTime",
                    "modifiedby"
                ]
            }
        },
        "zpa:index/getAssistantSchedule:getAssistantSchedule": {
            "description": "Use the **zpa_app_connector_assistant_schedule** data source to get information about Auto Delete frequency of the App Connector for the specified customer in the Zscaler Private Access cloud.\n\n\u003e **NOTE** - The `customer_id` attribute is optional and not required during the configuration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getAssistantSchedule({\n    customerId: \"1234567891012\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_assistant_schedule(customer_id=\"1234567891012\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetAssistantSchedule.Invoke(new()\n    {\n        CustomerId = \"1234567891012\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupAssistantSchedule(ctx, \u0026zpa.LookupAssistantScheduleArgs{\n\t\t\tCustomerId: pulumi.StringRef(\"1234567891012\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetAssistantScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getAssistantSchedule(GetAssistantScheduleArgs.builder()\n            .customerId(\"1234567891012\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getAssistantSchedule\n      Arguments:\n        customerId: '1234567891012'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAssistantSchedule.\n",
                "properties": {
                    "customerId": {
                        "type": "string",
                        "description": "The unique identifier of the ZPA tenant.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier for the App Connector auto deletion configuration for a customer. This field is only required for the PUT request to update the frequency of the App Connector Settings.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAssistantSchedule.\n",
                "properties": {
                    "customerId": {
                        "type": "string"
                    },
                    "deleteDisabled": {
                        "type": "boolean",
                        "description": "(Boolean) - Indicates if the App Connectors are included for deletion if they are in a disconnected state based on frequencyInterval and frequency values.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Boolean) - Indicates if the setting for deleting App Connectors is enabled or disabled.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "(String) - The scheduled frequency at which the disconnected App Connectors are deleted. Supported value is: `days`\n"
                    },
                    "frequencyInterval": {
                        "type": "string",
                        "description": "(String) - The interval for the configured frequency value. The minimum supported value is 5. Supported values are: `5`, `7`, `14`, `30`, `60` and `90`\n"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deleteDisabled",
                    "enabled",
                    "frequency",
                    "frequencyInterval"
                ]
            }
        },
        "zpa:index/getBaCertificate:getBaCertificate": {
            "description": "Use the **zpa_ba_certificate** data source to get information about a browser access certificate created in the Zscaler Private Access cloud. This data source is required when creating a browser access application segment resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getBaCertificate({\n    name: \"example.acme.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_ba_certificate(name=\"example.acme.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Name = \"example.acme.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"example.acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .name(\"example.acme.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        name: example.acme.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getBaCertificate({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_ba_certificate(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetBaCertificate.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetBaCertificate(ctx, \u0026zpa.GetBaCertificateArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetBaCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getBaCertificate(GetBaCertificateArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getBaCertificate\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBaCertificate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the browser access certificate to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the browser access certificate to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBaCertificate.\n",
                "properties": {
                    "certChain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "(string) The certificate text is in PEM format.\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "publicKey": {
                        "type": "string"
                    },
                    "sans": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "serialNo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validFromInEpochsec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validToInEpochsec": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "certChain",
                    "certificate",
                    "cname",
                    "creationTime",
                    "description",
                    "issuedBy",
                    "issuedTo",
                    "microtenantId",
                    "modifiedTime",
                    "modifiedby",
                    "publicKey",
                    "sans",
                    "serialNo",
                    "status",
                    "validFromInEpochsec",
                    "validToInEpochsec"
                ]
            }
        },
        "zpa:index/getCloudBrowserIsolationBanner:getCloudBrowserIsolationBanner": {
            "description": "Use the **zpa_cloud_browser_isolation_banner** data source to get information about Cloud Browser Isolation banner. This data source information is required as part of the attribute `banner_id` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getCloudBrowserIsolationBanner({\n    name: \"Default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_cloud_browser_isolation_banner(name=\"Default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetCloudBrowserIsolationBanner.Invoke(new()\n    {\n        Name = \"Default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupCloudBrowserIsolationBanner(ctx, \u0026zpa.LookupCloudBrowserIsolationBannerArgs{\n\t\t\tName: pulumi.StringRef(\"Default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationBannerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getCloudBrowserIsolationBanner(GetCloudBrowserIsolationBannerArgs.builder()\n            .name(\"Default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationBanner\n      Arguments:\n        name: Default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudBrowserIsolationBanner.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the CBI banner to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI banner to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudBrowserIsolationBanner.\n",
                "properties": {
                    "banner": {
                        "type": "boolean",
                        "description": "(bool) - Show Welcome Notification\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "(bool) - Use the default banner\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "(string) - The Logo Image (.jpeg or .png; Maximum file size is 100KB.)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notificationText": {
                        "type": "string",
                        "description": "(string) The Banner Notification Text\n"
                    },
                    "notificationTitle": {
                        "type": "string",
                        "description": "(string) The Banner Notification Title\n"
                    },
                    "primaryColor": {
                        "type": "string",
                        "description": "(string) - The Banner Primary Color code in hexadecimal way to represent the color of the banner in RGB format\n"
                    },
                    "textColor": {
                        "type": "string",
                        "description": "(string) - The Banner Text Color code in hexadecimal way to represent the color of the text in RGB format\n"
                    }
                },
                "type": "object",
                "required": [
                    "banner",
                    "isDefault",
                    "logo",
                    "notificationText",
                    "notificationTitle",
                    "primaryColor",
                    "textColor"
                ]
            }
        },
        "zpa:index/getCloudBrowserIsolationCertificate:getCloudBrowserIsolationCertificate": {
            "description": "Use the **zpa_cloud_browser_isolation_certificate** data source to get information about Cloud Browser Isolation Certificate. This data source information is required as part of the attribute `certificate_ids` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getCloudBrowserIsolationCertificate({\n    name: \"Zscaler Root Certificate\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_cloud_browser_isolation_certificate(name=\"Zscaler Root Certificate\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetCloudBrowserIsolationCertificate.Invoke(new()\n    {\n        Name = \"Zscaler Root Certificate\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupCloudBrowserIsolationCertificate(ctx, \u0026zpa.LookupCloudBrowserIsolationCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"Zscaler Root Certificate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getCloudBrowserIsolationCertificate(GetCloudBrowserIsolationCertificateArgs.builder()\n            .name(\"Zscaler Root Certificate\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationCertificate\n      Arguments:\n        name: Zscaler Root Certificate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudBrowserIsolationCertificate.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the CBI certificate to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI certificate to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudBrowserIsolationCertificate.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pem": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isDefault",
                    "pem"
                ]
            }
        },
        "zpa:index/getCloudBrowserIsolationExternalProfile:getCloudBrowserIsolationExternalProfile": {
            "description": "Use the **zpa_cloud_browser_isolation_external_profile** data source to get information about Cloud Browser Isolation external profile. This data source information can then be used in as part of `zpa.PolicyAccessIsolationRule` when the `action` attribute is set to `ISOLATE`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getCloudBrowserIsolationExternalProfile({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_cloud_browser_isolation_external_profile(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetCloudBrowserIsolationExternalProfile.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupCloudBrowserIsolationExternalProfile(ctx, \u0026zpa.LookupCloudBrowserIsolationExternalProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationExternalProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getCloudBrowserIsolationExternalProfile(GetCloudBrowserIsolationExternalProfileArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationExternalProfile\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudBrowserIsolationExternalProfile.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI banner to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudBrowserIsolationExternalProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(string) - The description of the CBI profile\n"
                    },
                    "href": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "(bool) - Indicates if the CBI profile is the default one.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCloudBrowserIsolationExternalProfileRegion:getCloudBrowserIsolationExternalProfileRegion"
                        },
                        "description": "(string) List of regions where multi-region deployment is enabled\n* `id:` - (string) Region ID where the profile is applied to\n* `name:` - (string) Region name where the profile is applied to\n"
                    },
                    "securityControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCloudBrowserIsolationExternalProfileSecurityControl:getCloudBrowserIsolationExternalProfileSecurityControl"
                        },
                        "description": "The CBI security controls enabled for the profile\n* `copy_paste:` - (string) Enable or disable copy \u0026 paste for local computer to isolation\n* `document_viewer:` - (bool) Enable or disable to view Microsoft Office files in isolation.\n* `local_render:` - (bool) Enables non-isolated hyperlinks to be opened on the user's native browser.\n* `upload_download:` - (string) Enable or disable file transfer from local computer to isolation\n* `allow_printing:` - (bool) Enables the user to print web pages and documents rendered within the isolation browser.\n* `restrict_keystrokes:` - (bool) Prevents keyboard and text input to isolated web pages.\n"
                    },
                    "userExperiences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCloudBrowserIsolationExternalProfileUserExperience:getCloudBrowserIsolationExternalProfileUserExperience"
                        },
                        "description": "The CBI security controls enabled for the profile\n* `session_persistence:` - (bool) Save user cookies between sessions. If disabled, all cookies will be discarded when isolation session ends.\n* `browser_in_browser:` - (bool) Enable or disable browser-in-browser or native browser experience\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "href",
                    "isDefault",
                    "regions",
                    "securityControls",
                    "userExperiences"
                ]
            }
        },
        "zpa:index/getCloudBrowserIsolationRegion:getCloudBrowserIsolationRegion": {
            "description": "Use the **zpa_cloud_browser_isolation_region** data source to get information about Cloud Browser Isolation regions such as ID and Name. This data source information is required as part of the attribute `region_ids` when creating an Cloud Browser Isolation External Profile ``zpa.CloudBrowserIsolationExternalProfile``\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getCloudBrowserIsolationRegion({\n    name: \"Singapore\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_cloud_browser_isolation_region(name=\"Singapore\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetCloudBrowserIsolationRegion.Invoke(new()\n    {\n        Name = \"Singapore\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetCloudBrowserIsolationRegion(ctx, \u0026zpa.GetCloudBrowserIsolationRegionArgs{\n\t\t\tName: pulumi.StringRef(\"Singapore\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getCloudBrowserIsolationRegion(GetCloudBrowserIsolationRegionArgs.builder()\n            .name(\"Singapore\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationRegion\n      Arguments:\n        name: Singapore\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudBrowserIsolationRegion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the CBI region to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CBI region to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudBrowserIsolationRegion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(string) - ID information of the CBI region\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) - Name of the CBI region\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "zpa:index/getCloudBrowserIsolationZPAProfile:getCloudBrowserIsolationZPAProfile": {
            "description": "Use the **zpa_cloud_browser_isolation_zpa_profile** data source to get information about an isolation profile in the Zscaler Private Access cloud. This data source is required when configuring an isolation policy rule resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getCloudBrowserIsolationZPAProfile({\n    name: \"ZPA_Profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_cloud_browser_isolation_zpa_profile(name=\"ZPA_Profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetCloudBrowserIsolationZPAProfile.Invoke(new()\n    {\n        Name = \"ZPA_Profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetCloudBrowserIsolationZPAProfile(ctx, \u0026zpa.GetCloudBrowserIsolationZPAProfileArgs{\n\t\t\tName: pulumi.StringRef(\"ZPA_Profile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudBrowserIsolationZPAProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getCloudBrowserIsolationZPAProfile(GetCloudBrowserIsolationZPAProfileArgs.builder()\n            .name(\"ZPA_Profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getCloudBrowserIsolationZPAProfile\n      Arguments:\n        name: ZPA_Profile\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudBrowserIsolationZPAProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the isolation profile.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudBrowserIsolationZPAProfile.\n",
                "properties": {
                    "cbiProfileId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "cbiTenantId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "cbiUrl": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cbiProfileId",
                    "cbiTenantId",
                    "cbiUrl",
                    "creationTime",
                    "description",
                    "enabled",
                    "id",
                    "modifiedTime",
                    "modifiedby"
                ]
            }
        },
        "zpa:index/getCloudConnectorGroup:getCloudConnectorGroup": {
            "description": "Use the **zpa_cloud_connector_group** data source to get information about a cloud connector group created from the Zscaler Private Access cloud. This data source can then be referenced within an Access Policy rule\n\n\u003e **NOTE:** A Cloud Connector Group resource is created in the Zscaler Cloud Connector cloud and replicated to the ZPA cloud. This resource can then be referenced in a Access Policy Rule where the Object Type = `CLOUD_CONNECTOR_GROUP` is being used.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getCloudConnectorGroup({\n    name: \"AWS-Cloud\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_cloud_connector_group(name=\"AWS-Cloud\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetCloudConnectorGroup.Invoke(new()\n    {\n        Name = \"AWS-Cloud\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetCloudConnectorGroup(ctx, \u0026zpa.GetCloudConnectorGroupArgs{\n\t\t\tName: pulumi.StringRef(\"AWS-Cloud\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getCloudConnectorGroup(GetCloudConnectorGroupArgs.builder()\n            .name(\"AWS-Cloud\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getCloudConnectorGroup\n      Arguments:\n        name: AWS-Cloud\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getCloudConnectorGroup({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_cloud_connector_group(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetCloudConnectorGroup.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetCloudConnectorGroup(ctx, \u0026zpa.GetCloudConnectorGroupArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCloudConnectorGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getCloudConnectorGroup(GetCloudConnectorGroupArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getCloudConnectorGroup\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudConnectorGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the cloud connector group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the cloud connector group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudConnectorGroup.\n",
                "properties": {
                    "cloudConnectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCloudConnectorGroupCloudConnector:getCloudConnectorGroupCloudConnector"
                        },
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "geolocationId": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)- Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) - This field defines the name of the cloud connector group.\n"
                    },
                    "ziaCloud": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    },
                    "ziaOrgId": {
                        "type": "string",
                        "description": "(string) - Only applicable for a GET request. Ignored in PUT/POST/DELETE requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudConnectors",
                    "creationTime",
                    "description",
                    "enabled",
                    "geolocationId",
                    "modifiedTime",
                    "modifiedby",
                    "ziaCloud",
                    "ziaOrgId"
                ]
            }
        },
        "zpa:index/getCustomerVersionProfile:getCustomerVersionProfile": {
            "description": "Use the **zpa_customer_version_profile** data source to get information about all customer version profiles from the Zscaler Private Access cloud. This data source can be associated with an App Connector Group within the parameter `version_profile_id` or `version_profile_name`\n\nThe customer version profile IDs are:\n\n* `Default` = `0`\n* `Previous Default` = `1`\n* `New Release` = `2`\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst default = zpa.getCustomerVersionProfile({\n    name: \"Default\",\n});\nconst previousDefault = zpa.getCustomerVersionProfile({\n    name: \"Previous Default\",\n});\nconst newRelease = zpa.getCustomerVersionProfile({\n    name: \"New Release\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ndefault = zpa.get_customer_version_profile(name=\"Default\")\nprevious_default = zpa.get_customer_version_profile(name=\"Previous Default\")\nnew_release = zpa.get_customer_version_profile(name=\"New Release\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zpa.GetCustomerVersionProfile.Invoke(new()\n    {\n        Name = \"Default\",\n    });\n\n    var previousDefault = Zpa.GetCustomerVersionProfile.Invoke(new()\n    {\n        Name = \"Previous Default\",\n    });\n\n    var newRelease = Zpa.GetCustomerVersionProfile.Invoke(new()\n    {\n        Name = \"New Release\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetCustomerVersionProfile(ctx, \u0026zpa.GetCustomerVersionProfileArgs{\n\t\t\tName: \"Default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetCustomerVersionProfile(ctx, \u0026zpa.GetCustomerVersionProfileArgs{\n\t\t\tName: \"Previous Default\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetCustomerVersionProfile(ctx, \u0026zpa.GetCustomerVersionProfileArgs{\n\t\t\tName: \"New Release\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetCustomerVersionProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZpaFunctions.getCustomerVersionProfile(GetCustomerVersionProfileArgs.builder()\n            .name(\"Default\")\n            .build());\n\n        final var previousDefault = ZpaFunctions.getCustomerVersionProfile(GetCustomerVersionProfileArgs.builder()\n            .name(\"Previous Default\")\n            .build());\n\n        final var newRelease = ZpaFunctions.getCustomerVersionProfile(GetCustomerVersionProfileArgs.builder()\n            .name(\"New Release\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zpa:getCustomerVersionProfile\n      Arguments:\n        name: Default\n  previousDefault:\n    fn::invoke:\n      Function: zpa:getCustomerVersionProfile\n      Arguments:\n        name: Previous Default\n  newRelease:\n    fn::invoke:\n      Function: zpa:getCustomerVersionProfile\n      Arguments:\n        name: New Release\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomerVersionProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the enrollment certificate to be exported.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomerVersionProfile.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "customScopeCustomerIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCustomerVersionProfileCustomScopeCustomerId:getCustomerVersionProfileCustomScopeCustomerId"
                        }
                    },
                    "customerId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "upgradePriority": {
                        "type": "string"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getCustomerVersionProfileVersion:getCustomerVersionProfileVersion"
                        }
                    },
                    "visibilityScope": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "customScopeCustomerIds",
                    "customerId",
                    "description",
                    "id",
                    "modifiedBy",
                    "modifiedTime",
                    "name",
                    "upgradePriority",
                    "versions",
                    "visibilityScope"
                ]
            }
        },
        "zpa:index/getEnrollmentCert:getEnrollmentCert": {
            "description": "Use the **zpa_enrollment_cert** data source to get information about all configured enrollment certificate details created in the Zscaler Private Access cloud. This data source is required when creating provisioning key resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst root = zpa.getEnrollmentCert({\n    name: \"Root\",\n});\nconst client = zpa.getEnrollmentCert({\n    name: \"Client\",\n});\nconst connector = zpa.getEnrollmentCert({\n    name: \"Connector\",\n});\nconst serviceEdge = zpa.getEnrollmentCert({\n    name: \"Service Edge\",\n});\nconst isolationClient = zpa.getEnrollmentCert({\n    name: \"Isolation Client\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nroot = zpa.get_enrollment_cert(name=\"Root\")\nclient = zpa.get_enrollment_cert(name=\"Client\")\nconnector = zpa.get_enrollment_cert(name=\"Connector\")\nservice_edge = zpa.get_enrollment_cert(name=\"Service Edge\")\nisolation_client = zpa.get_enrollment_cert(name=\"Isolation Client\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var root = Zpa.GetEnrollmentCert.Invoke(new()\n    {\n        Name = \"Root\",\n    });\n\n    var client = Zpa.GetEnrollmentCert.Invoke(new()\n    {\n        Name = \"Client\",\n    });\n\n    var connector = Zpa.GetEnrollmentCert.Invoke(new()\n    {\n        Name = \"Connector\",\n    });\n\n    var serviceEdge = Zpa.GetEnrollmentCert.Invoke(new()\n    {\n        Name = \"Service Edge\",\n    });\n\n    var isolationClient = Zpa.GetEnrollmentCert.Invoke(new()\n    {\n        Name = \"Isolation Client\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetEnrollmentCert(ctx, \u0026zpa.GetEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Root\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetEnrollmentCert(ctx, \u0026zpa.GetEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Client\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetEnrollmentCert(ctx, \u0026zpa.GetEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Connector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetEnrollmentCert(ctx, \u0026zpa.GetEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Service Edge\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetEnrollmentCert(ctx, \u0026zpa.GetEnrollmentCertArgs{\n\t\t\tName: pulumi.StringRef(\"Isolation Client\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetEnrollmentCertArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var root = ZpaFunctions.getEnrollmentCert(GetEnrollmentCertArgs.builder()\n            .name(\"Root\")\n            .build());\n\n        final var client = ZpaFunctions.getEnrollmentCert(GetEnrollmentCertArgs.builder()\n            .name(\"Client\")\n            .build());\n\n        final var connector = ZpaFunctions.getEnrollmentCert(GetEnrollmentCertArgs.builder()\n            .name(\"Connector\")\n            .build());\n\n        final var serviceEdge = ZpaFunctions.getEnrollmentCert(GetEnrollmentCertArgs.builder()\n            .name(\"Service Edge\")\n            .build());\n\n        final var isolationClient = ZpaFunctions.getEnrollmentCert(GetEnrollmentCertArgs.builder()\n            .name(\"Isolation Client\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  root:\n    fn::invoke:\n      Function: zpa:getEnrollmentCert\n      Arguments:\n        name: Root\n  client:\n    fn::invoke:\n      Function: zpa:getEnrollmentCert\n      Arguments:\n        name: Client\n  connector:\n    fn::invoke:\n      Function: zpa:getEnrollmentCert\n      Arguments:\n        name: Connector\n  serviceEdge:\n    fn::invoke:\n      Function: zpa:getEnrollmentCert\n      Arguments:\n        name: Service Edge\n  isolationClient:\n    fn::invoke:\n      Function: zpa:getEnrollmentCert\n      Arguments:\n        name: Isolation Client\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnrollmentCert.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the enrollment certificate to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the enrollment certificate to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnrollmentCert.\n",
                "properties": {
                    "allowSigning": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "(string) The certificate text is in PEM format.\n"
                    },
                    "clientCertType": {
                        "type": "string",
                        "description": "(string) Returned values are:\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "csr": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "microtenantId": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentCertId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "parentCertName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "privateKey": {
                        "type": "string"
                    },
                    "privateKeyPresent": {
                        "type": "boolean"
                    },
                    "serialNo": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validFromInEpochSec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "validToInEpochSec": {
                        "type": "string"
                    },
                    "zrsaEncryptedPrivateKey": {
                        "type": "string"
                    },
                    "zrsaEncryptedSessionKey": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "allowSigning",
                    "certificate",
                    "clientCertType",
                    "cname",
                    "creationTime",
                    "csr",
                    "description",
                    "issuedBy",
                    "issuedTo",
                    "modifiedBy",
                    "modifiedTime",
                    "parentCertId",
                    "parentCertName",
                    "privateKey",
                    "privateKeyPresent",
                    "serialNo",
                    "validFromInEpochSec",
                    "validToInEpochSec",
                    "zrsaEncryptedPrivateKey",
                    "zrsaEncryptedSessionKey"
                ]
            }
        },
        "zpa:index/getIdPController:getIdPController": {
            "description": "Use the **zpa_idp_controller** data source to get information about an Identity Provider created in the Zscaler Private Access cloud. This data source is required when creating:\n\n1. Access policy Rules\n2. Access policy timeout rules\n3. Access policy forwarding rules\n4. Access policy inspection rules\n5. Access policy isolation rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getIdPController({\n    name: \"idp_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_id_p_controller(name=\"idp_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetIdPController.Invoke(new()\n    {\n        Name = \"idp_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetIdPController(ctx, \u0026zpa.GetIdPControllerArgs{\n\t\t\tName: pulumi.StringRef(\"idp_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetIdPControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getIdPController(GetIdPControllerArgs.builder()\n            .name(\"idp_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getIdPController\n      Arguments:\n        name: idp_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getIdPController({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_id_p_controller(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetIdPController.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetIdPController(ctx, \u0026zpa.GetIdPControllerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetIdPControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getIdPController(GetIdPControllerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getIdPController\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIdPController.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The name of the Identity Provider (IdP) to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Identity Provider (IdP) to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIdPController.\n",
                "properties": {
                    "adminMetadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getIdPControllerAdminMetadata:getIdPControllerAdminMetadata"
                        },
                        "description": "(Computed)\n"
                    },
                    "adminSpSigningCertId": {
                        "type": "string"
                    },
                    "autoProvision": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "disableSamlBasedPolicy": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "domainLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "enableArbitraryAuthDomains": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enableScimBasedPolicy": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Default value if null is True\n"
                    },
                    "forceAuth": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpEntityId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "loginHint": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "loginNameAttribute": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reauthOnUserUpdate": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "redirectBinding": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "scimEnabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "scimServiceProviderEndpoint": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "scimSharedSecretExists": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "signSamlRequest": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "ssoTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "useCustomSpMetadata": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "userMetadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getIdPControllerUserMetadata:getIdPControllerUserMetadata"
                        },
                        "description": "(Computed)\n"
                    },
                    "userSpSigningCertId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adminMetadatas",
                    "adminSpSigningCertId",
                    "autoProvision",
                    "creationTime",
                    "description",
                    "disableSamlBasedPolicy",
                    "domainLists",
                    "enableArbitraryAuthDomains",
                    "enableScimBasedPolicy",
                    "enabled",
                    "forceAuth",
                    "id",
                    "idpEntityId",
                    "loginHint",
                    "loginNameAttribute",
                    "loginUrl",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "reauthOnUserUpdate",
                    "redirectBinding",
                    "scimEnabled",
                    "scimServiceProviderEndpoint",
                    "scimSharedSecretExists",
                    "signSamlRequest",
                    "ssoTypes",
                    "useCustomSpMetadata",
                    "userMetadatas",
                    "userSpSigningCertId"
                ]
            }
        },
        "zpa:index/getInspectionAllPredefinedControls:getInspectionAllPredefinedControls": {
            "description": "Use the **zpa_inspection_all_predefined_controls** data source to get information about all OWASP predefined control and prefedined control version by group name. The `Preprocessors` predefined control is the default predefined control, This data source is always required, when creating an inspection profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getInspectionAllPredefinedControls({\n    groupName: \"Preprocessors\",\n    version: \"OWASP_CRS/3.3.0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_inspection_all_predefined_controls(group_name=\"Preprocessors\",\n    version=\"OWASP_CRS/3.3.0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetInspectionAllPredefinedControls.Invoke(new()\n    {\n        GroupName = \"Preprocessors\",\n        Version = \"OWASP_CRS/3.3.0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetInspectionAllPredefinedControls(ctx, \u0026zpa.GetInspectionAllPredefinedControlsArgs{\n\t\t\tGroupName: pulumi.StringRef(\"Preprocessors\"),\n\t\t\tVersion:   \"OWASP_CRS/3.3.0\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetInspectionAllPredefinedControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getInspectionAllPredefinedControls(GetInspectionAllPredefinedControlsArgs.builder()\n            .groupName(\"Preprocessors\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getInspectionAllPredefinedControls\n      Arguments:\n        groupName: Preprocessors\n        version: OWASP_CRS/3.3.0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInspectionAllPredefinedControls.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "description": "The name of the predefined control.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                    }
                },
                "type": "object",
                "required": [
                    "version"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInspectionAllPredefinedControls.\n",
                "properties": {
                    "groupName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionAllPredefinedControlsList:getInspectionAllPredefinedControlsList"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "version",
                    "id"
                ]
            }
        },
        "zpa:index/getInspectionCustomControls:getInspectionCustomControls": {
            "inputs": {
                "description": "A collection of arguments for invoking getInspectionCustomControls.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInspectionCustomControls.\n",
                "properties": {
                    "action": {
                        "type": "string"
                    },
                    "actionValue": {
                        "type": "string"
                    },
                    "controlNumber": {
                        "type": "string"
                    },
                    "controlRuleJson": {
                        "type": "string"
                    },
                    "controlType": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "defaultAction": {
                        "type": "string"
                    },
                    "defaultActionValue": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "paranoiaLevel": {
                        "type": "string"
                    },
                    "protocolType": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionCustomControlsRule:getInspectionCustomControlsRule"
                        }
                    },
                    "severity": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "actionValue",
                    "controlNumber",
                    "controlRuleJson",
                    "controlType",
                    "creationTime",
                    "defaultAction",
                    "defaultActionValue",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "paranoiaLevel",
                    "protocolType",
                    "rules",
                    "severity",
                    "type",
                    "version"
                ]
            }
        },
        "zpa:index/getInspectionPredefinedControls:getInspectionPredefinedControls": {
            "description": "Use the **zpa_inspection_predefined_controls** data source to get information about an OWASP predefined control and prefedined control version. This data source is required when creating an inspection profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getInspectionPredefinedControls({\n    name: \"Failed to parse request body\",\n    version: \"OWASP_CRS/3.3.0\",\n});\nexport const zpaInspectionPredefinedControls = example;\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_inspection_predefined_controls(name=\"Failed to parse request body\",\n    version=\"OWASP_CRS/3.3.0\")\npulumi.export(\"zpaInspectionPredefinedControls\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetInspectionPredefinedControls.Invoke(new()\n    {\n        Name = \"Failed to parse request body\",\n        Version = \"OWASP_CRS/3.3.0\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaInspectionPredefinedControls\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := zpa.GetInspectionPredefinedControls(ctx, \u0026zpa.GetInspectionPredefinedControlsArgs{\n\t\t\tName:    pulumi.StringRef(\"Failed to parse request body\"),\n\t\t\tVersion: pulumi.StringRef(\"OWASP_CRS/3.3.0\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaInspectionPredefinedControls\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetInspectionPredefinedControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getInspectionPredefinedControls(GetInspectionPredefinedControlsArgs.builder()\n            .name(\"Failed to parse request body\")\n            .version(\"OWASP_CRS/3.3.0\")\n            .build());\n\n        ctx.export(\"zpaInspectionPredefinedControls\", example.applyValue(getInspectionPredefinedControlsResult -\u003e getInspectionPredefinedControlsResult));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getInspectionPredefinedControls\n      Arguments:\n        name: Failed to parse request body\n        version: OWASP_CRS/3.3.0\noutputs:\n  zpaInspectionPredefinedControls: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInspectionPredefinedControls.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the predefined control.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the predefined control, the default is: `OWASP_CRS/3.3.0`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInspectionPredefinedControls.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "actionValue": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "associatedInspectionProfileNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionPredefinedControlsAssociatedInspectionProfileName:getInspectionPredefinedControlsAssociatedInspectionProfileName"
                        },
                        "description": "(Computed)\n"
                    },
                    "attachment": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlGroup": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlNumber": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "controlType": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "defaultAction": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "defaultActionValue": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "protocolType": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "(Computed)\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "actionValue",
                    "associatedInspectionProfileNames",
                    "attachment",
                    "controlGroup",
                    "controlNumber",
                    "controlType",
                    "creationTime",
                    "defaultAction",
                    "defaultActionValue",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "paranoiaLevel",
                    "protocolType",
                    "severity"
                ]
            }
        },
        "zpa:index/getInspectionProfile:getInspectionProfile": {
            "description": "Use the **zpa_inspection_profile** data source to get information about an inspection profile in the Zscaler Private Access cloud. This resource can then be referenced in an inspection custom control resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getInspectionProfile({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_inspection_profile(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetInspectionProfile.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupInspectionProfile(ctx, \u0026zpa.LookupInspectionProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetInspectionProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getInspectionProfile(GetInspectionProfileArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getInspectionProfile\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInspectionProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "This field defines the id of the inspection profile.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the inspection profile.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInspectionProfile.\n",
                "properties": {
                    "commonGlobalOverrideActionsConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "controlsInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionProfileControlsInfo:getInspectionProfileControlsInfo"
                        },
                        "description": "(string) Types for custom controls\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "customControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionProfileCustomControl:getInspectionProfileCustomControl"
                        },
                        "description": "(string) Types for custom controls\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the inspection profile.\n"
                    },
                    "globalControlActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "(string) ID of the predefined control\n"
                    },
                    "incarnationNumber": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "paranoiaLevel": {
                        "type": "string",
                        "description": "(string) OWASP Predefined Paranoia Level. Range: [1-4], inclusive\n"
                    },
                    "predefinedControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionProfilePredefinedControl:getInspectionProfilePredefinedControl"
                        },
                        "description": "(string) The predefined controls\n"
                    },
                    "predefinedControlsVersion": {
                        "type": "string"
                    },
                    "webSocketControls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getInspectionProfileWebSocketControl:getInspectionProfileWebSocketControl"
                        },
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "commonGlobalOverrideActionsConfig",
                    "controlsInfos",
                    "creationTime",
                    "customControls",
                    "description",
                    "globalControlActions",
                    "id",
                    "incarnationNumber",
                    "modifiedBy",
                    "modifiedTime",
                    "name",
                    "paranoiaLevel",
                    "predefinedControls",
                    "predefinedControlsVersion",
                    "webSocketControls"
                ]
            }
        },
        "zpa:index/getIsolationProfile:getIsolationProfile": {
            "description": "Use the **zpa_isolation_profile** data source to get information about an isolation profile in the Zscaler Private Access cloud. This data source is required when configuring an isolation policy rule resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst isolationProfile = zpa.getIsolationProfile({\n    name: \"zpa_isolation_profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nisolation_profile = zpa.get_isolation_profile(name=\"zpa_isolation_profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var isolationProfile = Zpa.GetIsolationProfile.Invoke(new()\n    {\n        Name = \"zpa_isolation_profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetIsolationProfile(ctx, \u0026zpa.GetIsolationProfileArgs{\n\t\t\tName: pulumi.StringRef(\"zpa_isolation_profile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetIsolationProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var isolationProfile = ZpaFunctions.getIsolationProfile(GetIsolationProfileArgs.builder()\n            .name(\"zpa_isolation_profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  isolationProfile:\n    fn::invoke:\n      Function: zpa:getIsolationProfile\n      Arguments:\n        name: zpa_isolation_profile\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIsolationProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the isolation profile.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIsolationProfile.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isolationProfileId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "isolationTenantId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "isolationUrl": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "description",
                    "enabled",
                    "id",
                    "isolationProfileId",
                    "isolationTenantId",
                    "isolationUrl",
                    "modifiedTime",
                    "modifiedby"
                ]
            }
        },
        "zpa:index/getLSSClientTypes:getLSSClientTypes": {
            "description": "Use the **zpa_lss_config_client_types** data source to get information about all LSS client types in the Zscaler Private Access cloud. This data source is required when the defining a policy rule resource for an object type as `CLIENT_TYPE` parameter in the LSS Config Controller resource is set. To learn more see the To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSClientTypes)\n\n\u003e **NOTE** By Default the ZPA provider will return all client types\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getLSSClientTypes({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_lss_client_types()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetLSSClientTypes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetLSSClientTypes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getLSSClientTypes();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getLSSClientTypes\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getLSSClientTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zpnClientTypeEdgeConnector": {
                        "type": "string"
                    },
                    "zpnClientTypeExporter": {
                        "type": "string"
                    },
                    "zpnClientTypeIpAnchoring": {
                        "type": "string"
                    },
                    "zpnClientTypeMachineTunnel": {
                        "type": "string"
                    },
                    "zpnClientTypeSlogger": {
                        "type": "string"
                    },
                    "zpnClientTypeZapp": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zpnClientTypeEdgeConnector",
                    "zpnClientTypeExporter",
                    "zpnClientTypeIpAnchoring",
                    "zpnClientTypeMachineTunnel",
                    "zpnClientTypeSlogger",
                    "zpnClientTypeZapp",
                    "id"
                ]
            }
        },
        "zpa:index/getLSSConfigController:getLSSConfigController": {
            "description": "Use the **zpa_lss_config_controller** data source to get information about a Log Streaming (LSS) configuration resource created in the Zscaler Private Access.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetLSSConfigControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getLSSConfigController(GetLSSConfigControllerArgs.builder()\n            .name(\"testAcc-lss-server\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getLSSConfigController\n      Arguments:\n        name: testAcc-lss-server\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getLSSConfigController({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_lss_config_controller(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetLSSConfigController.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupLSSConfigController(ctx, \u0026zpa.LookupLSSConfigControllerArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetLSSConfigControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getLSSConfigController(GetLSSConfigControllerArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getLSSConfigController\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLSSConfigController.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getLSSConfigControllerConfig:getLSSConfigControllerConfig"
                        },
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "This field defines the name of the log streaming resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLSSConfigController.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getLSSConfigControllerConfig:getLSSConfigControllerConfig"
                        },
                        "description": "(Computed)\n"
                    },
                    "connectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getLSSConfigControllerConnectorGroup:getLSSConfigControllerConnectorGroup"
                        },
                        "description": "(Computed)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "policyRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getLSSConfigControllerPolicyRule:getLSSConfigControllerPolicyRule"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "configs",
                    "connectorGroups",
                    "policyRules"
                ]
            }
        },
        "zpa:index/getLSSLogTypeFormats:getLSSLogTypeFormats": {
            "description": "Use the **zpa_lss_config_log_type_formats** data source to get information about all LSS log type formats in the Zscaler Private Access cloud. This data source is required when creating an LSS Config Controller resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst zpnTransLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_trans_log\",\n});\nconst zpnAuthLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_auth_log\",\n});\nconst zpnAstAuthLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_ast_auth_log\",\n});\nconst zpnHttpTransLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_http_trans_log\",\n});\nconst zpnAuditLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_audit_log\",\n});\nconst zpnSysAuthLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_sys_auth_log\",\n});\nconst zpnAstComprehensiveStats = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_ast_comprehensive_stats\",\n});\nconst zpnWafHttpExchangesLog = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_waf_http_exchanges_log\",\n});\nconst zpnPbrokerComprehensiveStats = zpa.getLSSLogTypeFormats({\n    logType: \"zpn_pbroker_comprehensive_stats\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nzpn_trans_log = zpa.get_lss_log_type_formats(log_type=\"zpn_trans_log\")\nzpn_auth_log = zpa.get_lss_log_type_formats(log_type=\"zpn_auth_log\")\nzpn_ast_auth_log = zpa.get_lss_log_type_formats(log_type=\"zpn_ast_auth_log\")\nzpn_http_trans_log = zpa.get_lss_log_type_formats(log_type=\"zpn_http_trans_log\")\nzpn_audit_log = zpa.get_lss_log_type_formats(log_type=\"zpn_audit_log\")\nzpn_sys_auth_log = zpa.get_lss_log_type_formats(log_type=\"zpn_sys_auth_log\")\nzpn_ast_comprehensive_stats = zpa.get_lss_log_type_formats(log_type=\"zpn_ast_comprehensive_stats\")\nzpn_waf_http_exchanges_log = zpa.get_lss_log_type_formats(log_type=\"zpn_waf_http_exchanges_log\")\nzpn_pbroker_comprehensive_stats = zpa.get_lss_log_type_formats(log_type=\"zpn_pbroker_comprehensive_stats\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zpnTransLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_trans_log\",\n    });\n\n    var zpnAuthLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_auth_log\",\n    });\n\n    var zpnAstAuthLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_ast_auth_log\",\n    });\n\n    var zpnHttpTransLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_http_trans_log\",\n    });\n\n    var zpnAuditLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_audit_log\",\n    });\n\n    var zpnSysAuthLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_sys_auth_log\",\n    });\n\n    var zpnAstComprehensiveStats = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_ast_comprehensive_stats\",\n    });\n\n    var zpnWafHttpExchangesLog = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_waf_http_exchanges_log\",\n    });\n\n    var zpnPbrokerComprehensiveStats = Zpa.GetLSSLogTypeFormats.Invoke(new()\n    {\n        LogType = \"zpn_pbroker_comprehensive_stats\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_trans_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_ast_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_http_trans_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_audit_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_sys_auth_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_ast_comprehensive_stats\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_waf_http_exchanges_log\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetLSSLogTypeFormats(ctx, \u0026zpa.GetLSSLogTypeFormatsArgs{\n\t\t\tLogType: \"zpn_pbroker_comprehensive_stats\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetLSSLogTypeFormatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zpnTransLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_trans_log\")\n            .build());\n\n        final var zpnAuthLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_auth_log\")\n            .build());\n\n        final var zpnAstAuthLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_ast_auth_log\")\n            .build());\n\n        final var zpnHttpTransLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_http_trans_log\")\n            .build());\n\n        final var zpnAuditLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_audit_log\")\n            .build());\n\n        final var zpnSysAuthLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_sys_auth_log\")\n            .build());\n\n        final var zpnAstComprehensiveStats = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_ast_comprehensive_stats\")\n            .build());\n\n        final var zpnWafHttpExchangesLog = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_waf_http_exchanges_log\")\n            .build());\n\n        final var zpnPbrokerComprehensiveStats = ZpaFunctions.getLSSLogTypeFormats(GetLSSLogTypeFormatsArgs.builder()\n            .logType(\"zpn_pbroker_comprehensive_stats\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  zpnTransLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_trans_log\n  zpnAuthLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_auth_log\n  zpnAstAuthLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_ast_auth_log\n  zpnHttpTransLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_http_trans_log\n  zpnAuditLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_audit_log\n  zpnSysAuthLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_sys_auth_log\n  zpnAstComprehensiveStats:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_ast_comprehensive_stats\n  zpnWafHttpExchangesLog:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_waf_http_exchanges_log\n  zpnPbrokerComprehensiveStats:\n    fn::invoke:\n      Function: zpa:getLSSLogTypeFormats\n      Arguments:\n        logType: zpn_pbroker_comprehensive_stats\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLSSLogTypeFormats.\n",
                "properties": {
                    "logType": {
                        "type": "string",
                        "description": "The type of log to be exported.\n"
                    }
                },
                "type": "object",
                "required": [
                    "logType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLSSLogTypeFormats.\n",
                "properties": {
                    "csv": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "json": {
                        "type": "string"
                    },
                    "logType": {
                        "type": "string"
                    },
                    "tsv": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "csv",
                    "json",
                    "logType",
                    "tsv",
                    "id"
                ]
            }
        },
        "zpa:index/getLSSStatusCodes:getLSSStatusCodes": {
            "description": "Use the **zpa_lss_config_status_codes** data source to get information about all LSS status codes in the Zscaler Private Access cloud. This data source is required when the `filter` parameter in the LSS Config Controller resource is set. To learn more see the [Getting Details of All LSS Status Codes](https://help.zscaler.com/zpa/log-streaming-service-configuration-use-cases#GettingLSSStatusCodes)\n\n\u003e **NOTE** By Default the ZPA provider will return all status codes\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getLSSStatusCodes({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_lss_status_codes()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetLSSStatusCodes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetLSSStatusCodes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getLSSStatusCodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getLSSStatusCodes\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getLSSStatusCodes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zpnAstAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnSysAuthLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "zpnTransLog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "zpnAstAuthLog",
                    "zpnAuthLog",
                    "zpnSysAuthLog",
                    "zpnTransLog",
                    "id"
                ]
            }
        },
        "zpa:index/getMachineGroup:getMachineGroup": {
            "description": "Use the **zpa_machine_group** data source to get information about a machine group created in the Zscaler Private Access cloud. This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getMachineGroup({\n    name: \"MGR01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_machine_group(name=\"MGR01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetMachineGroup.Invoke(new()\n    {\n        Name = \"MGR01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetMachineGroup(ctx, \u0026zpa.GetMachineGroupArgs{\n\t\t\tName: pulumi.StringRef(\"MGR01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetMachineGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getMachineGroup(GetMachineGroupArgs.builder()\n            .name(\"MGR01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getMachineGroup\n      Arguments:\n        name: MGR01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getMachineGroup({\n    id: \"1234567890\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_machine_group(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetMachineGroup.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetMachineGroup(ctx, \u0026zpa.GetMachineGroupArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetMachineGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getMachineGroup(GetMachineGroupArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getMachineGroup\n      Arguments:\n        id: '1234567890'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMachineGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the machine group to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the machine group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMachineGroup.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "machines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getMachineGroupMachine:getMachineGroupMachine"
                        },
                        "description": "(string)\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "description",
                    "enabled",
                    "machines",
                    "modifiedBy",
                    "modifiedTime"
                ]
            }
        },
        "zpa:index/getMicrotenant:getMicrotenant": {
            "description": "The **zpa_microtenant_controller** data source to get information about a machine group created in the Zscaler Private Access cloud. This data source allows administrators to retrieve a specific microtenant ID, which can be passed to other supported resources via the `microtenant_id` attribute.\n\n⚠️ **WARNING:**: This feature is in limited availability and requires additional license. To learn more, contact Zscaler Support or your local account team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getMicrotenant({\n    name: \"Microtenant_A\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_microtenant(name=\"Microtenant_A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetMicrotenant.Invoke(new()\n    {\n        Name = \"Microtenant_A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupMicrotenant(ctx, \u0026zpa.LookupMicrotenantArgs{\n\t\t\tName: pulumi.StringRef(\"Microtenant_A\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetMicrotenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getMicrotenant(GetMicrotenantArgs.builder()\n            .name(\"Microtenant_A\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getMicrotenant\n      Arguments:\n        name: Microtenant_A\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMicrotenant.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the microtenant controller.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMicrotenant.\n",
                "properties": {
                    "creationTime": {
                        "type": "string"
                    },
                    "criteriaAttribute": {
                        "type": "string",
                        "description": "(string) Type of authentication criteria for the microtenant\n"
                    },
                    "criteriaAttributeValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string) The domain associated with the respective microtenant controller resource\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the microtenant controller.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this microtenant resource is enabled or not.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Required) Name of the microtenant controller.\n"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getMicrotenantRole:getMicrotenantRole"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getMicrotenantUser:getMicrotenantUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "criteriaAttribute",
                    "criteriaAttributeValues",
                    "description",
                    "enabled",
                    "modifiedBy",
                    "modifiedTime",
                    "operator",
                    "priority",
                    "roles",
                    "users"
                ]
            }
        },
        "zpa:index/getPolicyClientType:getPolicyClientType": {
            "description": "Use the **zpa_access_policy_client_types** data source to get information about all client types for the specified customer in the Zscaler Private Access cloud. This data source can be optionally used when defining the following policy types:\n    - ``zpa.PolicyAccessRule``\n    - ``zpa.PolicyAccessTimeOutRule``\n    - ``zpa.PolicyAccessForwardingRule``\n    - ``zpa.PolicyAccessIsolationRule``\n    - ``zpa.PolicyAccessInspectionRule``\n\nThe ``object_type`` attribute must be defined as \"CLIENT_TYPE\" in the policy operand condition. To learn more see the To learn more see the [Getting Details of All Client Types](https://help.zscaler.com/zpa/configuring-access-policies-using-api#getClientTypes)\n\n\u003e **NOTE** By Default the ZPA provider will return all client types\n\n\u003e **NOTE** When defining a ``zpa.PolicyAccessIsolationRule`` policy the ``object_type`` \"CLIENT_TYPE\" is mandatory and ``zpn_client_type_exporter`` is the only supported value.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getPolicyClientType({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_policy_client_type()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetPolicyClientType.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPolicyClientType(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getPolicyClientType();\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getPolicyClientType\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getPolicyClientType.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zpnClientTypeBranchConnector": {
                        "type": "string"
                    },
                    "zpnClientTypeBrowserIsolation": {
                        "type": "string"
                    },
                    "zpnClientTypeEdgeConnector": {
                        "type": "string"
                    },
                    "zpnClientTypeExporter": {
                        "type": "string"
                    },
                    "zpnClientTypeExporterNoauth": {
                        "type": "string"
                    },
                    "zpnClientTypeIpAnchoring": {
                        "type": "string"
                    },
                    "zpnClientTypeMachineTunnel": {
                        "type": "string"
                    },
                    "zpnClientTypeSlogger": {
                        "type": "string"
                    },
                    "zpnClientTypeZapp": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "zpnClientTypeBranchConnector",
                    "zpnClientTypeBrowserIsolation",
                    "zpnClientTypeEdgeConnector",
                    "zpnClientTypeExporter",
                    "zpnClientTypeExporterNoauth",
                    "zpnClientTypeIpAnchoring",
                    "zpnClientTypeMachineTunnel",
                    "zpnClientTypeSlogger",
                    "zpnClientTypeZapp",
                    "id"
                ]
            }
        },
        "zpa:index/getPolicyPlatform:getPolicyPlatform": {
            "description": "Use the **zpa_access_policy_platforms** data source to get information about all platforms for the specified customer in the Zscaler Private Access cloud. This data source can be optionally used when defining the following policy types:\n    - ``zpa.PolicyAccessRule``\n    - ``zpa.PolicyAccessTimeOutRule``\n    - ``zpa.PolicyAccessForwardingRule``\n    - ``zpa.PolicyAccessIsolationRule``\n    - ``zpa.PolicyAccessInspectionRule``\n\nThe ``object_type`` attribute must be defined as \"PLATFORM\" in the policy operand condition. To learn more see the To learn more see the [Getting Platform Types for a Customer](https://help.zscaler.com/zpa/configuring-access-policies-using-api#getPlatformTypes)\n\n\u003e **NOTE** By Default the ZPA provider will return all platform types\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst this = zpa.getPolicyPlatform({});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nthis = zpa.get_policy_platform()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zpa.GetPolicyPlatform.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPolicyPlatform(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZpaFunctions.getPolicyPlatform();\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zpa:getPolicyPlatform\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getPolicyPlatform.\n",
                "properties": {
                    "android": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ios": {
                        "type": "string"
                    },
                    "linux": {
                        "type": "string"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "windows": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "android",
                    "ios",
                    "linux",
                    "mac",
                    "windows",
                    "id"
                ]
            }
        },
        "zpa:index/getPolicyType:getPolicyType": {
            "description": "Use the **zpa_policy_type** data source to get information about an a ``policy_set_id`` and ``policy_type``. This data source is required when creating:\n\n1. Access policy Rules\n2. Access policy timeout rules\n3. Access policy forwarding rules\n4. Access policy inspection rules\n\n\u003e **NOTE** The parameters ``policy_set_id`` is required in all circumstances and is exported when checking for the policy_type parameter. The policy_type value is used for differentiating the policy types, in the request endpoint. The supported values are:\n\n* ``ACCESS_POLICY/GLOBAL_POLICY``\n* ``TIMEOUT_POLICY/REAUTH_POLICY``\n* ``BYPASS_POLICY/CLIENT_FORWARDING_POLICY``\n* ``INSPECTION_POLICY``\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst accessPolicy = zpa.getPolicyType({\n    policyType: \"ACCESS_POLICY\",\n});\nexport const zpaPolicyTypeAccessPolicy = accessPolicy.then(accessPolicy =\u003e accessPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\naccess_policy = zpa.get_policy_type(policy_type=\"ACCESS_POLICY\")\npulumi.export(\"zpaPolicyTypeAccessPolicy\", access_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var accessPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"ACCESS_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeAccessPolicy\"] = accessPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taccessPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"ACCESS_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeAccessPolicy\", accessPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accessPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"ACCESS_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeAccessPolicy\", accessPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  accessPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: ACCESS_POLICY\noutputs:\n  zpaPolicyTypeAccessPolicy: ${accessPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst globalPolicy = zpa.getPolicyType({\n    policyType: \"GLOBAL_POLICY\",\n});\nexport const zpaPolicyTypeAccessPolicy = globalPolicy.then(globalPolicy =\u003e globalPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nglobal_policy = zpa.get_policy_type(policy_type=\"GLOBAL_POLICY\")\npulumi.export(\"zpaPolicyTypeAccessPolicy\", global_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var globalPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"GLOBAL_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeAccessPolicy\"] = globalPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tglobalPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"GLOBAL_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeAccessPolicy\", globalPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var globalPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"GLOBAL_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeAccessPolicy\", globalPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  globalPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: GLOBAL_POLICY\noutputs:\n  zpaPolicyTypeAccessPolicy: ${globalPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst timeoutPolicy = zpa.getPolicyType({\n    policyType: \"TIMEOUT_POLICY\",\n});\nexport const zpaPolicyTypeTimeoutPolicy = timeoutPolicy.then(timeoutPolicy =\u003e timeoutPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ntimeout_policy = zpa.get_policy_type(policy_type=\"TIMEOUT_POLICY\")\npulumi.export(\"zpaPolicyTypeTimeoutPolicy\", timeout_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var timeoutPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"TIMEOUT_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeTimeoutPolicy\"] = timeoutPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttimeoutPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"TIMEOUT_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeTimeoutPolicy\", timeoutPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var timeoutPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"TIMEOUT_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeTimeoutPolicy\", timeoutPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  timeoutPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: TIMEOUT_POLICY\noutputs:\n  zpaPolicyTypeTimeoutPolicy: ${timeoutPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst reauthPolicy = zpa.getPolicyType({\n    policyType: \"REAUTH_POLICY\",\n});\nexport const zpaPolicyTypeReauthPolicy = reauthPolicy.then(reauthPolicy =\u003e reauthPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nreauth_policy = zpa.get_policy_type(policy_type=\"REAUTH_POLICY\")\npulumi.export(\"zpaPolicyTypeReauthPolicy\", reauth_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reauthPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"REAUTH_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeReauthPolicy\"] = reauthPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treauthPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"REAUTH_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeReauthPolicy\", reauthPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reauthPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"REAUTH_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeReauthPolicy\", reauthPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  reauthPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: REAUTH_POLICY\noutputs:\n  zpaPolicyTypeReauthPolicy: ${reauthPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst clientForwardingPolicy = zpa.getPolicyType({\n    policyType: \"CLIENT_FORWARDING_POLICY\",\n});\nexport const zpaPolicyTypeClientForwardingPolicy = clientForwardingPolicy.then(clientForwardingPolicy =\u003e clientForwardingPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nclient_forwarding_policy = zpa.get_policy_type(policy_type=\"CLIENT_FORWARDING_POLICY\")\npulumi.export(\"zpaPolicyTypeClientForwardingPolicy\", client_forwarding_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clientForwardingPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"CLIENT_FORWARDING_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeClientForwardingPolicy\"] = clientForwardingPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tclientForwardingPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"CLIENT_FORWARDING_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeClientForwardingPolicy\", clientForwardingPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var clientForwardingPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"CLIENT_FORWARDING_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeClientForwardingPolicy\", clientForwardingPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  clientForwardingPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: CLIENT_FORWARDING_POLICY\noutputs:\n  zpaPolicyTypeClientForwardingPolicy: ${clientForwardingPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst inspectionPolicy = zpa.getPolicyType({\n    policyType: \"INSPECTION_POLICY\",\n});\nexport const zpaPolicyTypeInspectionPolicy = inspectionPolicy.then(inspectionPolicy =\u003e inspectionPolicy.id);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ninspection_policy = zpa.get_policy_type(policy_type=\"INSPECTION_POLICY\")\npulumi.export(\"zpaPolicyTypeInspectionPolicy\", inspection_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inspectionPolicy = Zpa.GetPolicyType.Invoke(new()\n    {\n        PolicyType = \"INSPECTION_POLICY\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPolicyTypeInspectionPolicy\"] = inspectionPolicy.Apply(getPolicyTypeResult =\u003e getPolicyTypeResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinspectionPolicy, err := zpa.GetPolicyType(ctx, \u0026zpa.GetPolicyTypeArgs{\n\t\t\tPolicyType: pulumi.StringRef(\"INSPECTION_POLICY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPolicyTypeInspectionPolicy\", inspectionPolicy.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPolicyTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var inspectionPolicy = ZpaFunctions.getPolicyType(GetPolicyTypeArgs.builder()\n            .policyType(\"INSPECTION_POLICY\")\n            .build());\n\n        ctx.export(\"zpaPolicyTypeInspectionPolicy\", inspectionPolicy.applyValue(getPolicyTypeResult -\u003e getPolicyTypeResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  inspectionPolicy:\n    fn::invoke:\n      Function: zpa:getPolicyType\n      Arguments:\n        policyType: INSPECTION_POLICY\noutputs:\n  zpaPolicyTypeInspectionPolicy: ${inspectionPolicy.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyType.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The value for differentiating the policy types.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyType.\n",
                "properties": {
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "policyType": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getPolicyTypeRule:getPolicyTypeRule"
                        }
                    },
                    "sorted": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedBy",
                    "modifiedTime",
                    "name",
                    "policyType",
                    "rules",
                    "sorted"
                ]
            }
        },
        "zpa:index/getPostureProfile:getPostureProfile": {
            "description": "Use the **zpa_posture_profile** data source to get information about a posture profile created in the Zscaler Private Access Mobile Portal. This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPostureProfile(ctx, \u0026zpa.GetPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getPostureProfile(GetPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example2 = zpa.getPostureProfile({\n    name: \"Detect SentinelOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample2 = zpa.get_posture_profile(name=\"Detect SentinelOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example2 = Zpa.GetPostureProfile.Invoke(new()\n    {\n        Name = \"Detect SentinelOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPostureProfile(ctx, \u0026zpa.GetPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"Detect SentinelOne\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example2 = ZpaFunctions.getPostureProfile(GetPostureProfileArgs.builder()\n            .name(\"Detect SentinelOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example2:\n    fn::invoke:\n      Function: zpa:getPostureProfile\n      Arguments:\n        name: Detect SentinelOne\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example3 = zpa.getPostureProfile({\n    name: \"domain_joined\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample3 = zpa.get_posture_profile(name=\"domain_joined\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example3 = Zpa.GetPostureProfile.Invoke(new()\n    {\n        Name = \"domain_joined\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPostureProfile(ctx, \u0026zpa.GetPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"domain_joined\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example3 = ZpaFunctions.getPostureProfile(GetPostureProfileArgs.builder()\n            .name(\"domain_joined\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example3:\n    fn::invoke:\n      Function: zpa:getPostureProfile\n      Arguments:\n        name: domain_joined\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE** To query posture profiles that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the posture profile as the below example:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetPostureProfile(ctx, \u0026zpa.GetPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getPostureProfile(GetPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE** When associating a posture profile with one of supported resources, the following parameter must be exported: ``posture_udid`` instead of the ``id`` of the resource.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getPostureProfile({\n    name: \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n});\nexport const zpaPostureProfile = example1.then(example1 =\u003e example1.postureUdid);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_posture_profile(name=\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\npulumi.export(\"zpaPostureProfile\", example1.posture_udid)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetPostureProfile.Invoke(new()\n    {\n        Name = \"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaPostureProfile\"] = example1.Apply(getPostureProfileResult =\u003e getPostureProfileResult.PostureUdid),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := zpa.GetPostureProfile(ctx, \u0026zpa.GetPostureProfileArgs{\n\t\t\tName: pulumi.StringRef(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaPostureProfile\", example1.PostureUdid)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetPostureProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getPostureProfile(GetPostureProfileArgs.builder()\n            .name(\"CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\")\n            .build());\n\n        ctx.export(\"zpaPostureProfile\", example1.applyValue(getPostureProfileResult -\u003e getPostureProfileResult.postureUdid()));\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getPostureProfile\n      Arguments:\n        name: CrowdStrike_ZPA_ZTA_40 (zscalertwo.net)\noutputs:\n  zpaPostureProfile: ${example1.postureUdid}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPostureProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the posture profile to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPostureProfile.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "masterCustomerId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "postureUdid": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCloud": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCustomerId": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "domain",
                    "id",
                    "masterCustomerId",
                    "modifiedTime",
                    "modifiedby",
                    "postureUdid",
                    "zscalerCloud",
                    "zscalerCustomerId"
                ]
            }
        },
        "zpa:index/getProvisioningKey:getProvisioningKey": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getProvisioningKey({\n    associationType: \"CONNECTOR_GRP\",\n    name: \"Provisioning_Key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_provisioning_key(association_type=\"CONNECTOR_GRP\",\n    name=\"Provisioning_Key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetProvisioningKey.Invoke(new()\n    {\n        AssociationType = \"CONNECTOR_GRP\",\n        Name = \"Provisioning_Key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupProvisioningKey(ctx, \u0026zpa.LookupProvisioningKeyArgs{\n\t\t\tAssociationType: \"CONNECTOR_GRP\",\n\t\t\tName:            pulumi.StringRef(\"Provisioning_Key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetProvisioningKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getProvisioningKey(GetProvisioningKeyArgs.builder()\n            .associationType(\"CONNECTOR_GRP\")\n            .name(\"Provisioning_Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getProvisioningKey\n      Arguments:\n        associationType: CONNECTOR_GRP\n        name: Provisioning_Key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getProvisioningKey({\n    associationType: \"SERVICE_EDGE_GRP\",\n    name: \"Provisioning_Key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_provisioning_key(association_type=\"SERVICE_EDGE_GRP\",\n    name=\"Provisioning_Key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetProvisioningKey.Invoke(new()\n    {\n        AssociationType = \"SERVICE_EDGE_GRP\",\n        Name = \"Provisioning_Key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupProvisioningKey(ctx, \u0026zpa.LookupProvisioningKeyArgs{\n\t\t\tAssociationType: \"SERVICE_EDGE_GRP\",\n\t\t\tName:            pulumi.StringRef(\"Provisioning_Key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetProvisioningKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getProvisioningKey(GetProvisioningKeyArgs.builder()\n            .associationType(\"SERVICE_EDGE_GRP\")\n            .name(\"Provisioning_Key\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getProvisioningKey\n      Arguments:\n        associationType: SERVICE_EDGE_GRP\n        name: Provisioning_Key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProvisioningKey.\n",
                "properties": {
                    "associationType": {
                        "type": "string",
                        "description": "Specifies the provisioning key type for App Connectors or ZPA Private Service Edges. The supported values are `CONNECTOR_GRP` and `SERVICE_EDGE_GRP`\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the provisioning key to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the provisioning key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "associationType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProvisioningKey.\n",
                "properties": {
                    "appConnectorGroupId": {
                        "type": "string"
                    },
                    "appConnectorGroupName": {
                        "type": "string"
                    },
                    "associationType": {
                        "type": "string"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "enrollmentCertId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enrollmentCertName": {
                        "type": "string",
                        "description": "(string) Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    },
                    "expirationInEpochSec": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAcls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "maxUsage": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "provisioningKey": {
                        "type": "string",
                        "description": "(string) Ignored in PUT/POST calls.\n"
                    },
                    "uiConfig": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "usageCount": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zcomponentId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zcomponentName": {
                        "type": "string",
                        "description": "(string) Applicable only for GET calls, ignored in PUT/POST calls.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appConnectorGroupId",
                    "appConnectorGroupName",
                    "associationType",
                    "creationTime",
                    "enabled",
                    "enrollmentCertId",
                    "enrollmentCertName",
                    "expirationInEpochSec",
                    "ipAcls",
                    "maxUsage",
                    "modifiedTime",
                    "modifiedby",
                    "provisioningKey",
                    "uiConfig",
                    "usageCount",
                    "zcomponentId",
                    "zcomponentName"
                ]
            }
        },
        "zpa:index/getSAMLAttribute:getSAMLAttribute": {
            "description": "Use the **zpa_saml_attribute** data source to get information about a SAML Attributes from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst emailUserSso = zpa.getSAMLAttribute({\n    idpName: \"idp_name\",\n    name: \"Email_User SSO\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nemail_user_sso = zpa.get_saml_attribute(idp_name=\"idp_name\",\n    name=\"Email_User SSO\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var emailUserSso = Zpa.GetSAMLAttribute.Invoke(new()\n    {\n        IdpName = \"idp_name\",\n        Name = \"Email_User SSO\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetSAMLAttribute(ctx, \u0026zpa.GetSAMLAttributeArgs{\n\t\t\tIdpName: pulumi.StringRef(\"idp_name\"),\n\t\t\tName:    pulumi.StringRef(\"Email_User SSO\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetSAMLAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var emailUserSso = ZpaFunctions.getSAMLAttribute(GetSAMLAttributeArgs.builder()\n            .idpName(\"idp_name\")\n            .name(\"Email_User SSO\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  emailUserSso:\n    fn::invoke:\n      Function: zpa:getSAMLAttribute\n      Arguments:\n        idpName: idp_name\n        name: Email_User SSO\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst department = zpa.getSAMLAttribute({\n    idpName: \"idp_name\",\n    name: \"DepartmentName_IdP_Name_Users\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ndepartment = zpa.get_saml_attribute(idp_name=\"idp_name\",\n    name=\"DepartmentName_IdP_Name_Users\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var department = Zpa.GetSAMLAttribute.Invoke(new()\n    {\n        IdpName = \"idp_name\",\n        Name = \"DepartmentName_IdP_Name_Users\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetSAMLAttribute(ctx, \u0026zpa.GetSAMLAttributeArgs{\n\t\t\tIdpName: pulumi.StringRef(\"idp_name\"),\n\t\t\tName:    pulumi.StringRef(\"DepartmentName_IdP_Name_Users\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetSAMLAttributeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var department = ZpaFunctions.getSAMLAttribute(GetSAMLAttributeArgs.builder()\n            .idpName(\"idp_name\")\n            .name(\"DepartmentName_IdP_Name_Users\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  department:\n    fn::invoke:\n      Function: zpa:getSAMLAttribute\n      Arguments:\n        idpName: idp_name\n        name: DepartmentName_IdP_Name_Users\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSAMLAttribute.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the machine group to be exported.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "The name of the IdP corresponding to the SAML attribute.\n\n\u003e **NOTE** When multiple Identity Providers (IdP) are onboarded in ZPA, the parameter ``idp_name`` is required in order to reture the attribute from the correct IdP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the saml attribute to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSAMLAttribute.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "samlName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "userAttribute": {
                        "type": "boolean",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "id",
                    "idpId",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "samlName",
                    "userAttribute"
                ]
            }
        },
        "zpa:index/getSCIMAttributeHeader:getSCIMAttributeHeader": {
            "description": "Use the **zpa_scim_attribute_header** data source to get information about a SCIM attribute from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Inspection Policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst givenName = zpa.getSCIMAttributeHeader({\n    idpName: \"IdP_Name\",\n    name: \"name.givenName\",\n});\nconst familyName = zpa.getSCIMAttributeHeader({\n    idpName: \"IdP_Name\",\n    name: \"name.familyName\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\ngiven_name = zpa.get_scim_attribute_header(idp_name=\"IdP_Name\",\n    name=\"name.givenName\")\nfamily_name = zpa.get_scim_attribute_header(idp_name=\"IdP_Name\",\n    name=\"name.familyName\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var givenName = Zpa.GetSCIMAttributeHeader.Invoke(new()\n    {\n        IdpName = \"IdP_Name\",\n        Name = \"name.givenName\",\n    });\n\n    var familyName = Zpa.GetSCIMAttributeHeader.Invoke(new()\n    {\n        IdpName = \"IdP_Name\",\n        Name = \"name.familyName\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetSCIMAttributeHeader(ctx, \u0026zpa.GetSCIMAttributeHeaderArgs{\n\t\t\tIdpName: pulumi.StringRef(\"IdP_Name\"),\n\t\t\tName:    pulumi.StringRef(\"name.givenName\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zpa.GetSCIMAttributeHeader(ctx, \u0026zpa.GetSCIMAttributeHeaderArgs{\n\t\t\tIdpName: pulumi.StringRef(\"IdP_Name\"),\n\t\t\tName:    pulumi.StringRef(\"name.familyName\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetSCIMAttributeHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var givenName = ZpaFunctions.getSCIMAttributeHeader(GetSCIMAttributeHeaderArgs.builder()\n            .idpName(\"IdP_Name\")\n            .name(\"name.givenName\")\n            .build());\n\n        final var familyName = ZpaFunctions.getSCIMAttributeHeader(GetSCIMAttributeHeaderArgs.builder()\n            .idpName(\"IdP_Name\")\n            .name(\"name.familyName\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  givenName:\n    fn::invoke:\n      Function: zpa:getSCIMAttributeHeader\n      Arguments:\n        idpName: IdP_Name\n        name: name.givenName\n  familyName:\n    fn::invoke:\n      Function: zpa:getSCIMAttributeHeader\n      Arguments:\n        idpName: IdP_Name\n        name: name.familyName\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSCIMAttributeHeader.\n",
                "properties": {
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "The name of the scim attribute header that must be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the scim attribute header to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSCIMAttributeHeader.\n",
                "properties": {
                    "canonicalValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(string)\n"
                    },
                    "caseSensitive": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "multivalued": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "mutability": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "returned": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "schemaUri": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "uniqueness": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "canonicalValues",
                    "caseSensitive",
                    "creationTime",
                    "dataType",
                    "description",
                    "id",
                    "modifiedTime",
                    "modifiedby",
                    "multivalued",
                    "mutability",
                    "required",
                    "returned",
                    "schemaUri",
                    "uniqueness",
                    "values"
                ]
            }
        },
        "zpa:index/getSCIMGroups:getSCIMGroups": {
            "description": "Use the **zpa_scim_groups** data source to get information about a SCIM Group from an Identity Provider (IdP). This data source can then be referenced in an Access Policy, Timeout policy, Forwarding Policy, Inspection Policy or Isolation Policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst engineering = zpa.getSCIMGroups({\n    idpName: \"idp_name\",\n    name: \"Engineering\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nengineering = zpa.get_scim_groups(idp_name=\"idp_name\",\n    name=\"Engineering\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineering = Zpa.GetSCIMGroups.Invoke(new()\n    {\n        IdpName = \"idp_name\",\n        Name = \"Engineering\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetSCIMGroups(ctx, \u0026zpa.GetSCIMGroupsArgs{\n\t\t\tIdpName: pulumi.StringRef(\"idp_name\"),\n\t\t\tName:    pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetSCIMGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var engineering = ZpaFunctions.getSCIMGroups(GetSCIMGroupsArgs.builder()\n            .idpName(\"idp_name\")\n            .name(\"Engineering\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  engineering:\n    fn::invoke:\n      Function: zpa:getSCIMGroups\n      Arguments:\n        idpName: idp_name\n        name: Engineering\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSCIMGroups.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "idpId": {
                        "type": "integer",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string",
                        "description": "Name. The name of the IdP where the scim group must be exported from.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name. The name of the scim group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSCIMGroups.\n",
                "properties": {
                    "creationTime": {
                        "type": "integer",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "idpGroupId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "idpId": {
                        "type": "integer",
                        "description": "(string) The ID of the IdP corresponding to the SAML attribute.\n"
                    },
                    "idpName": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "integer",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "idpGroupId",
                    "modifiedTime"
                ]
            }
        },
        "zpa:index/getSegmentGroup:getSegmentGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getSegmentGroup({\n    name: \"segment_group_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_segment_group(name=\"segment_group_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetSegmentGroup.Invoke(new()\n    {\n        Name = \"segment_group_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupSegmentGroup(ctx, \u0026zpa.LookupSegmentGroupArgs{\n\t\t\tName: pulumi.StringRef(\"segment_group_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetSegmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getSegmentGroup(GetSegmentGroupArgs.builder()\n            .name(\"segment_group_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getSegmentGroup\n      Arguments:\n        name: segment_group_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSegmentGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the segment group to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the segment group to be exported.\n"
                    },
                    "policyMigrated": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSegmentGroup.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getSegmentGroupApplication:getSegmentGroupApplication"
                        },
                        "description": "(Computed)\n"
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "policyMigrated": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "tcpKeepAliveEnabled": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "applications",
                    "configSpace",
                    "creationTime",
                    "description",
                    "enabled",
                    "modifiedBy",
                    "modifiedTime",
                    "policyMigrated",
                    "tcpKeepAliveEnabled"
                ]
            }
        },
        "zpa:index/getServerGroup:getServerGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getServerGroup({\n    name: \"server_group_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_server_group(name=\"server_group_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetServerGroup.Invoke(new()\n    {\n        Name = \"server_group_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupServerGroup(ctx, \u0026zpa.LookupServerGroupArgs{\n\t\t\tName: pulumi.StringRef(\"server_group_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetServerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getServerGroup(GetServerGroupArgs.builder()\n            .name(\"server_group_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getServerGroup\n      Arguments:\n        name: server_group_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the server group to be exported.\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerGroup.\n",
                "properties": {
                    "appConnectorGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServerGroupAppConnectorGroup:getServerGroupAppConnectorGroup"
                        },
                        "description": "(string)This field is a json array of app-connector-id only.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServerGroupApplication:getServerGroupApplication"
                        }
                    },
                    "configSpace": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) This field is the description of the server group.\n"
                    },
                    "dynamicDiscovery": {
                        "type": "boolean",
                        "description": "(bool) This field controls dynamic discovery of the servers.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) This field defines if the server group is enabled or disabled.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAnchored": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "microtenantId": {
                        "type": "string",
                        "description": "(string) The ID of the microtenant the resource is to be associated with.\n"
                    },
                    "microtenantName": {
                        "type": "string",
                        "description": "(string) The name of the microtenant the resource is to be associated with.\n"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServerGroupServer:getServerGroupServer"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "appConnectorGroups",
                    "applications",
                    "configSpace",
                    "creationTime",
                    "description",
                    "dynamicDiscovery",
                    "enabled",
                    "ipAnchored",
                    "modifiedTime",
                    "modifiedby",
                    "servers"
                ]
            }
        },
        "zpa:index/getServiceEdgeController:getServiceEdgeController": {
            "description": "Use the **zpa_service_edge_controller** data source to get information about a service edge controller in the Zscaler Private Access cloud. This data source can then be referenced in a Service Edge Group and Provisioning Key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getServiceEdgeController({\n    name: \"On-Prem-PSE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_service_edge_controller(name=\"On-Prem-PSE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetServiceEdgeController.Invoke(new()\n    {\n        Name = \"On-Prem-PSE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetServiceEdgeController(ctx, \u0026zpa.GetServiceEdgeControllerArgs{\n\t\t\tName: pulumi.StringRef(\"On-Prem-PSE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetServiceEdgeControllerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getServiceEdgeController(GetServiceEdgeControllerArgs.builder()\n            .name(\"On-Prem-PSE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getServiceEdgeController\n      Arguments:\n        name: On-Prem-PSE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceEdgeController.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the service edge controller to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceEdgeController.\n",
                "properties": {
                    "applicationStartTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "controlChannelStatus": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "ctrlBrokerName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "currentVersion": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - Description of the App Connector.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this Service Edge Controller is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "enrollmentCert": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(string)\n"
                    },
                    "expectedUpgradeTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "expectedVersion": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAcl": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "issuedCertId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "lastBrokerConnectTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "lastBrokerConnectTimeDuration": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "lastBrokerDisconnectTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "lastBrokerDisconnectTimeDuration": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "lastUpgradeTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(string) Latitude of the Service Edge Controller. Integer or decimal. With values in the range of `-90` to `90`\n"
                    },
                    "listenIps": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) Location of the Service Edge Controller.\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(string) Longitude of the Service Edge Controller. Integer or decimal. With values in the range of `-180` to `180`\n"
                    },
                    "modifiedBy": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platform": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "previousVersion": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "privateIp": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "provisioningKeyId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "provisioningKeyName": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "publishIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sargeVersion": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "serviceEdgeGroupId": {
                        "type": "string"
                    },
                    "serviceEdgeGroupName": {
                        "type": "string"
                    },
                    "upgradeAttempt": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "upgradeStatus": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zpnSubModuleUpgradeLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServiceEdgeControllerZpnSubModuleUpgradeList:getServiceEdgeControllerZpnSubModuleUpgradeList"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "applicationStartTime",
                    "controlChannelStatus",
                    "creationTime",
                    "ctrlBrokerName",
                    "currentVersion",
                    "description",
                    "enabled",
                    "enrollmentCert",
                    "expectedUpgradeTime",
                    "expectedVersion",
                    "fingerprint",
                    "id",
                    "ipAcl",
                    "issuedCertId",
                    "lastBrokerConnectTime",
                    "lastBrokerConnectTimeDuration",
                    "lastBrokerDisconnectTime",
                    "lastBrokerDisconnectTimeDuration",
                    "lastUpgradeTime",
                    "latitude",
                    "listenIps",
                    "location",
                    "longitude",
                    "modifiedBy",
                    "modifiedTime",
                    "platform",
                    "previousVersion",
                    "privateIp",
                    "provisioningKeyId",
                    "provisioningKeyName",
                    "publicIp",
                    "publishIps",
                    "sargeVersion",
                    "serviceEdgeGroupId",
                    "serviceEdgeGroupName",
                    "upgradeAttempt",
                    "upgradeStatus",
                    "zpnSubModuleUpgradeLists"
                ]
            }
        },
        "zpa:index/getServiceEdgeGroup:getServiceEdgeGroup": {
            "description": "Use the **zpa_service_edge_group** data source to get information about a service edge group in the Zscaler Private Access cloud. This data source can then be referenced in an App Connector Group. This data source can then be referenced in the following resources:\n\n* Create a server group\n* Provisioning Key\n* Access policy rule\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getServiceEdgeGroup({\n    name: \"DataCenter\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_service_edge_group(name=\"DataCenter\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetServiceEdgeGroup.Invoke(new()\n    {\n        Name = \"DataCenter\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupServiceEdgeGroup(ctx, \u0026zpa.LookupServiceEdgeGroupArgs{\n\t\t\tName: pulumi.StringRef(\"DataCenter\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getServiceEdgeGroup(GetServiceEdgeGroupArgs.builder()\n            .name(\"DataCenter\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getServiceEdgeGroup\n      Arguments:\n        name: DataCenter\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst foo = zpa.getServiceEdgeGroup({\n    id: \"123456789\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nfoo = zpa.get_service_edge_group(id=\"123456789\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zpa.GetServiceEdgeGroup.Invoke(new()\n    {\n        Id = \"123456789\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.LookupServiceEdgeGroup(ctx, \u0026zpa.LookupServiceEdgeGroupArgs{\n\t\t\tId: pulumi.StringRef(\"123456789\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetServiceEdgeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZpaFunctions.getServiceEdgeGroup(GetServiceEdgeGroupArgs.builder()\n            .id(\"123456789\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zpa:getServiceEdgeGroup\n      Arguments:\n        id: '123456789'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceEdgeGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the service edge group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service edge group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceEdgeGroup.\n",
                "properties": {
                    "cityCountry": {
                        "type": "string",
                        "description": "(string) Whether Double Encryption is enabled or disabled for the app.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Service Edge Group.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(bool) Whether this App Connector Group is enabled or not. Default value: `true`. Supported values: `true`, `false`\n"
                    },
                    "geoLocationId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "isPublic": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "overrideVersionProfile": {
                        "type": "boolean",
                        "description": "(bool) Whether the default version profile of the App Connector Group is applied or overridden. Default: `false` Supported values: `true`, `false`\n"
                    },
                    "serviceEdges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServiceEdgeGroupServiceEdge:getServiceEdgeGroupServiceEdge"
                        },
                        "description": "(string)\n"
                    },
                    "trustedNetworks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zpa:index/getServiceEdgeGroupTrustedNetwork:getServiceEdgeGroupTrustedNetwork"
                        },
                        "description": "(string)\n"
                    },
                    "upgradeDay": {
                        "type": "string",
                        "description": "(string) App Connectors in this group will attempt to update to a newer version of the software during this specified day\n"
                    },
                    "upgradeTimeInSecs": {
                        "type": "string",
                        "description": "(string) App Connectors in this group will attempt to update to a newer version of the software during this specified time. Default value: `66600`. Integer in seconds (i.e., `-66600`). The integer should be greater than or equal to `0` and less than `86400`, in `15` minute intervals\n"
                    },
                    "versionProfileId": {
                        "type": "string",
                        "description": "(String) ID of the version profile.\nExported values are:\n"
                    },
                    "versionProfileName": {
                        "type": "string",
                        "description": "(String)\nExported values are:\n"
                    },
                    "versionProfileVisibilityScope": {
                        "type": "string",
                        "description": "(string)\nExported values are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "cityCountry",
                    "countryCode",
                    "creationTime",
                    "description",
                    "enabled",
                    "geoLocationId",
                    "id",
                    "isPublic",
                    "latitude",
                    "location",
                    "longitude",
                    "modifiedTime",
                    "modifiedby",
                    "name",
                    "overrideVersionProfile",
                    "serviceEdges",
                    "trustedNetworks",
                    "upgradeDay",
                    "upgradeTimeInSecs",
                    "versionProfileId",
                    "versionProfileName",
                    "versionProfileVisibilityScope"
                ]
            }
        },
        "zpa:index/getTrustedNetwork:getTrustedNetwork": {
            "description": "The **zpa_trusted_network** data source to get information about a trusted network created in the Zscaler Private Access Mobile Portal. This data source can then be referenced within the following resources:\n\n1. Access Policy\n2. Forwarding Policy\n3. Inspection Policy\n4. Isolation Policy\n5. Service Edge Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example = zpa.getTrustedNetwork({\n    name: \"trusted_network_name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample = zpa.get_trusted_network(name=\"trusted_network_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zpa.GetTrustedNetwork.Invoke(new()\n    {\n        Name = \"trusted_network_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zpa.GetTrustedNetwork(ctx, \u0026zpa.GetTrustedNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"trusted_network_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetTrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZpaFunctions.getTrustedNetwork(GetTrustedNetworkArgs.builder()\n            .name(\"trusted_network_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zpa:getTrustedNetwork\n      Arguments:\n        name: trusted_network_name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE** To query trusted network that are associated with a specific Zscaler cloud, it is required to append the cloud name to the name of the trusted network as the below example:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst example1 = zpa.getTrustedNetwork({\n    name: \"Corporate-Network (zscalertwo.net)\",\n});\nexport const zpaTrustedNetwork = example1.then(example1 =\u003e example1.networkId);\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\n\nexample1 = zpa.get_trusted_network(name=\"Corporate-Network (zscalertwo.net)\")\npulumi.export(\"zpaTrustedNetwork\", example1.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zpa.GetTrustedNetwork.Invoke(new()\n    {\n        Name = \"Corporate-Network (zscalertwo.net)\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zpaTrustedNetwork\"] = example1.Apply(getTrustedNetworkResult =\u003e getTrustedNetworkResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := zpa.GetTrustedNetwork(ctx, \u0026zpa.GetTrustedNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate-Network (zscalertwo.net)\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zpaTrustedNetwork\", example1.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetTrustedNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZpaFunctions.getTrustedNetwork(GetTrustedNetworkArgs.builder()\n            .name(\"Corporate-Network (zscalertwo.net)\")\n            .build());\n\n        ctx.export(\"zpaTrustedNetwork\", example1.applyValue(getTrustedNetworkResult -\u003e getTrustedNetworkResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: zpa:getTrustedNetwork\n      Arguments:\n        name: Corporate-Network (zscalertwo.net)\noutputs:\n  zpaTrustedNetwork: ${example1.networkId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrustedNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the posture profile to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the posture profile to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrustedNetwork.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifiedTime": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "modifiedby": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "(string)\n"
                    },
                    "zscalerCloud": {
                        "type": "string",
                        "description": "(string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "creationTime",
                    "domain",
                    "modifiedTime",
                    "modifiedby",
                    "networkId",
                    "zscalerCloud"
                ]
            }
        }
    }
}